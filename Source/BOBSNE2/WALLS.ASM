** determine what kind of character it was*		acc holds character number*	borgkars:		dc.w	116		dc.b	#blank	dc.w	117		dc.b	#sleepleft	dc.w	120		dc.b	#blank	dc.w	121		dc.b	#sleepright	dc.w	149	dc.b	#blank	dc.w	150	dc.b 	#solid	dc.w	167		dc.b	#blank	dc.w	182	dc.b	#solid	dc.w	184	dc.b	#blank	dc.w	244		dc.b	#solid	dc.w	249 	dc.b	#death	dc.w	250	dc.b	#blank	dc.w	252		dc.b	#overhand	dc.w	253		dc.b	#blank	dc.w	254		dc.b	#ladderleft	dc.w	255		dc.b	#ladderright	dc.w	295	dc.b	#solid	dc.w	437	dc.b	#blank			dc.w	447	dc.b	#solid					dc.w	474	dc.b	#blank	dc.w	477	dc.b	#solid	dc.w	506	dc.b	#blank	dc.w	510	dc.b	#solid	dc.w	511	dc.b	#victory	dc.w	9999	dc.b	#blank	borgkars2:		dc.w	149	dc.b	#blank		dc.w	150	dc.b	#solid		dc.w	167		dc.b	#blank	dc.w	182	dc.b	#solid	dc.w	184	dc.b	#blank		dc.w	207	dc.b	#solid		dc.w	209	dc.b	#blank		dc.w	242	dc.b	#solid		dc.w	249 	dc.b	#death	dc.w	252		dc.b	#overhand	dc.w	253		dc.b	#blank	dc.w	254		dc.b	#ladderleft	dc.w	255		dc.b	#ladderright	dc.w	511	dc.b	#blank		borgkars3:		dc.w	254	dc.b	#blank	dc.w	255	dc.b	#elevatorstop	dc.w	375		dc.b	#blank	dc.w	379	dc.b	#death	dc.w	383	dc.b	#solid	dc.w	385		dc.b	#death	dc.w	499		dc.b	#solid	dc.w	500		dc.b	#overhand	dc.w	501	dc.b	#ladderleft	dc.w	502	dc.b	#ladderright	dc.w	506	dc.b	#blank	dc.w	508	dc.b	#elevatorshaft	dc.w	9999	dc.b	#blank	bugkars:	dc.w	75	dc.b	#blank	dc.w	207	dc.b	#solid	dc.w	236	dc.b	#blank	dc.w	231	dc.b	#solid	dc.w	232	dc.b	#blank;	dc.w	236;	dc.b	#death;	dc.w	240;	dc.b	#solid	dc.w	247	dc.b	#death	dc.w	249	dc.b	#overhand	dc.w	252	dc.b	#ladderleft	dc.w	255	dc.b	#ladderright	dc.w	383	dc.b	#blank	dc.w	447	dc.b	#solid	dc.w	510	dc.b	#blank	dc.w	511	dc.b	#victory	dc.w	9999	dc.b	#blank	lavakars:	dc.w	159	dc.b	#blank	dc.w	170	dc.b	#solid	dc.w	213			;211 - bobo	dc.b	#blank	dc.w	219	dc.b	#solid	dc.w	220	dc.b	#ladderleft	dc.w	221	dc.b	#ladderright	dc.w	222	dc.b	#ladderleft	dc.w	223	dc.b	#ladderright	dc.w	231	dc.b	#death	dc.w	235	dc.b	#solid	dc.w	239	dc.b	#blank	dc.w	243	dc.b	#death	dc.w	247	dc.b	#solid	dc.w	251	dc.b	#blank	dc.w	255	dc.b	#death	dc.w	437	dc.b	#blank	dc.w	447	dc.b	#solid	dc.w	465	dc.b	#blank	dc.w	479	dc.b	#solid	dc.w	506	dc.b	#blank	dc.w	510	dc.b	#solid	dc.w	9999	dc.b	#blankanckars:	dc.w	17	dc.b	#blank	dc.w	19	dc.b	#ladderleft	dc.w	21	dc.b	#ladderright	dc.w	159	dc.b	#blank	dc.w	234	dc.b	#solid	dc.w	236	dc.b	#blank	dc.w	252	dc.b	#solid	dc.w	253	dc.b	#overhand	dc.w	437	dc.b	#blank	dc.w	447	dc.b	#solid	dc.w	456	dc.b	#blank	dc.w	460	dc.b	#death		dc.w	464	dc.b	#solid	dc.w	474	dc.b	#blank	dc.w	478	dc.b	#solid	dc.w	506	dc.b	#blank	dc.w	510	dc.b	#solid	dc.w	511	dc.b	#victory	dc.w	9999	dc.b	#blank	ultrakars:	dc.w	21	dc.b	#blank	dc.w	23	dc.b	#overhand	dc.w	95	dc.b	#blank	dc.w	223	dc.b	#solid	dc.w	227	dc.b	#death	dc.w	231	dc.b	#solid	dc.w	243	dc.b	#death	dc.w	249	dc.b	#ladderleft	dc.w	255	dc.b	#ladderright	dc.w	383	dc.b	#blank	dc.w	446	dc.b	#solid	dc.w	510	dc.b	#blank	dc.w	511	dc.b	#victory	dc.w	9999	dc.b	#blank	bubblekars:	dc.w	174	dc.b	#blank	dc.w	195	dc.b	#solid	dc.w	199	dc.b	#overhand	dc.w	207	dc.b	#solid	dc.w	239	dc.b	#death	dc.w	247	dc.b	#ladderleft	dc.w	255	dc.b	#ladderright	dc.w	437	dc.b	#blank	dc.w	447	dc.b	#solid	dc.w	474	dc.b	#blank	dc.w	478	dc.b	#solid	dc.w	506	dc.b	#blank	dc.w	510	dc.b	#solid	dc.w	9999	dc.b	#blankdoorkars	dc.w	214	dc.b	#blank	dc.w	255	dc.b	#solid	dc.w	491	dc.b	#blank	dc.w	499	dc.b	#solid	dc.w	9999	dc.b	#blank	** space rocks (from Greg's head)*spacerocktable:	;size, x-pseed ,y-posspin-dir+spin-speed		dc.b	0,4,20,-8	dc.b	1,2,170,6	dc.b	2,2,40,-4	dc.b	2,4,180,2	dc.b	0,2,150,1	dc.b	2,2,60,-4	dc.b	1,4,10,2	dc.b	1,4,180,2	dc.b	2,2,120,-2	dc.b	1,2,21,4	dc.b	0,4,30,8	dc.b	1,2,70,-6	dc.b	0,2,160,4	dc.b	2,4,150,-2	dc.b	1,2,50,1	dc.b	2,2,70,-4	dc.b	0,4,160,2passwordrockgen:	lda	enterpassword	bne	@notover	jml	TSKcancel@notover:	lda	TSKclock	and	#7	cmp	#7	beq	@morerocks	rtl@morerocks:	lda	#type_enemy	jsl	TSKschedule	dw	arock	bcc	@noroom	tax	lda	#7				;code	sta	TSKbank,x	lda	#7				;pics	sta	PICbank,x	lda	#1	sta	PICxhi,x	lda	#8	sta	PICxlo,x	lda	#1	sta	PICcolor,x		stz	PICdirv,x		lda	rockdata	asl	a	asl	a	tay	lda	spacerocktable,y	sta	PICanim,x			;size	lda	spacerocktable+1,y	sta	PICdir,x			;speed	lda	spacerocktable+2,y	sta	PICylo,x			;y-loc	lda	spacerocktable+3,y	bpl	@pos	inc	PICdirv,x	eor	#255	inc	a@pos:	sta	PICcount2,x			;spin speed and dir		lda	rockdata		;next rock	inc	a	and	#15	sta	rockdata@noroom:	ldx	TSKcurrent	rtl	** generic rock*arock:	lda	enterpassword	beq	@kill	lda	PICxhi,x	cmp	#-1	bne	@alive@kill:	jmp	TSKcancel@alive:	lda	PICdir,x	jsl	PICxsub		lda	PICdir,x	asl	a	sta	PICmoveh,x		lda	PICvomit,x	inc	a	sta	PICvomit,x	cmp	PICcount2,x	bcc	@justdraw		stz	PICvomit,x		lda	PICdirv,x	beq	@around	lda	PICcount,x	dec	a	cmp	#-1	bcc	@nowrap2	lda	#11@nowrap2:	sta	PICcount,x	bra	@justdraw		@around:	lda	PICcount,x	inc	a	cmp	#12	bcc	@nowrap	lda	#0@nowrap:	sta	PICcount,x	@justdraw:	jsr	drawrock	rtl	** draw a spinning rock...*drawrock:	lda	PICanim,x		;size	asl	a	tay	lda	rocktables,y	sta	tmp+2	lda	rocktables+1,y	sta	tmp+3		lda	PICcount,x		;rotation counter	asl	a	tay	lda	(tmp+2),y	sta	tmp	iny	lda	(tmp+2),y	sta	tmp+1	jsl	PICput2	rts	** break off from main rock*rocktables:	dc.w bigrock	dc.w littlerock1	dc.w littlerock2	bigrock:		dc.w	rock11	dc.w	rock12	dc.w	rock13	dc.w	rock14	dc.w	rock15	dc.w	rock16	dc.w	rock17	dc.w	rock18	dc.w	rock19	dc.w	rock110	dc.w	rock111	dc.w	rock112littlerock1:		dc.w	rock21	dc.w	rock22	dc.w	rock23	dc.w	rock24	dc.w	rock25	dc.w	rock26	dc.w	rock27	dc.w	rock28	dc.w	rock29	dc.w	rock210	dc.w	rock211	dc.w	rock212littlerock2:		dc.w	rock31	dc.w	rock32	dc.w	rock33	dc.w	rock34	dc.w	rock35	dc.w	rock36	dc.w	rock37	dc.w	rock38	dc.w	rock39	dc.w	rock310	dc.w	rock311	dc.w	rock312rock11: dc.b $04 dc.b $4B,$05,$90 dc.b $05,$4B,$72 dc.b $43,$C3,$81 dc.b $4B,$CB,$70rock12: dc.b $04 dc.b $4C,$05,$93 dc.b $04,$4B,$75 dc.b $44,$C3,$84 dc.b $4C,$CB,$73rock13: dc.b $04 dc.b $4B,$05,$96 dc.b $05,$4B,$78 dc.b $43,$C3,$87 dc.b $4B,$CB,$76rock14: dc.b $04 dc.b $4B,$05,$99 dc.b $05,$4B,$7B dc.b $43,$C3,$8A dc.b $4B,$CB,$79rock15: dc.b $04 dc.b $4B,$04,$C0 dc.b $05,$4C,$A2 dc.b $43,$C4,$B1 dc.b $4B,$CC,$A0rock16: dc.b $03 dc.b $4E,$C5,$B3 dc.b $46,$CD,$A4 dc.b $46,$C5,$B4rock17: dc.b $03 dc.b $4F,$C6,$B6 dc.b $47,$CE,$A7 dc.b $47,$C6,$B7rock18: dc.b $03 dc.b $4A,$CE,$A9 dc.b $42,$C6,$BA dc.b $4A,$C6,$B9rock19: dc.b $03 dc.b $41,$CB,$D1 dc.b $49,$C3,$E0 dc.b $49,$CB,$D0rock110: dc.b $03 dc.b $42,$CA,$D4 dc.b $4A,$C2,$E3 dc.b $4A,$CA,$D3rock111: dc.b $04 dc.b $04,$4B,$D8 dc.b $4C,$05,$F6 dc.b $4C,$CB,$D6 dc.b $44,$C3,$E7rock112: dc.b $04 dc.b $4B,$04,$F9 dc.b $05,$4C,$DB dc.b $4B,$CC,$D9 dc.b $43,$C4,$EArock21: dc.b $01 dc.b $C8,$C8,$80rock22: dc.b $01 dc.b $C8,$C8,$82rock23: dc.b $01 dc.b $C8,$C8,$84rock24: dc.b $01 dc.b $C8,$C8,$86rock25: dc.b $01 dc.b $C8,$C8,$88rock26: dc.b $01 dc.b $C8,$C8,$8Arock27: dc.b $01 dc.b $C8,$C8,$8Crock28: dc.b $01 dc.b $C8,$C8,$8Erock29: dc.b $01 dc.b $C8,$C8,$A0rock210: dc.b $01 dc.b $C8,$C8,$A2rock211: dc.b $01 dc.b $C8,$C8,$A4rock212: dc.b $01 dc.b $C8,$C8,$A6rock31: dc.b $01 dc.b $C8,$C8,$A8rock32: dc.b $01 dc.b $C8,$C8,$AArock33: dc.b $01 dc.b $C8,$C8,$ACrock34: dc.b $01 dc.b $C8,$C8,$AErock35: dc.b $01 dc.b $C8,$C8,$C0rock36: dc.b $01 dc.b $C8,$C8,$C2rock37: dc.b $01 dc.b $C8,$C8,$C4rock38: dc.b $01 dc.b $C8,$C8,$C6rock39: dc.b $01 dc.b $C8,$C8,$C8rock310: dc.b $01 dc.b $C8,$C8,$CArock311: dc.b $01 dc.b $C8,$C8,$CCrock312: dc.b $01 dc.b $C8,$C8,$CE** inventory select task*invenpic: 	dc.b $04 	dc.b $C0,$80,$09 	dc.b $C8,$80,$08 	dc.b $C8,$88,$18 	dc.b $C0,$88,$19	** create inventory stuff*createallinv:	lda	#7	pha	plb			lda	#type_inven	jsl	TSKschedule	dw	inventask		;weapons	jsr	setupinv		lda	#type_inven	jsl	TSKschedule	dw	inventask2		;remotes	jsr	setupinv		lda	#type_inven	jsl	TSKschedule	dw	inventask3		;picture of bob	jsr	setupinv	;	ldy	#0				;build ram frame;@loop:;	lda	invenpic,y;	sta	invsprites,y;	sta	invsprites2,y;	iny;	cpy	#13;	bcc	@loop		lda	#0	pha	plb		rtl	setupinv:	bcc	@fuck	tay	lda	#7	sta	TSKbank,y	sta	PICbank,y@fuck:	rts	invenypos:	dc.b	71-8-24,71-8+16-24,71-8+32-24,71-8+48-24,71-8+64-24,71-8+80-24inventask:	lda	#4						sta	PICcolor,x		lda	#24+32	sta	PICxlo,x		ldy	weapon	lda	invenypos,y	sta	PICylo,x		jsl	TSKsuspend	lda	status	cmp	#drivescooter	beq	@nothing	cmp	#rideship	beq	@nothing	lda	weapon	bpl	@fine@nothing:	stz	PICadrLo,x	stz	PICadrHi,x	bra	@endofstuff@fine:		jsl	PICput	dw	invenpic@endofstuff:** change stuff*	lda	weapon	bmi	@exit	lda	debounce	and	#JoyTL	bne	@changew	lda	debounce+1	and	#JoyY	beq	@exit@changew:	jsl	changeweaponl@exit:	lda	remote	bmi	@exit2	lda	debounce	and	#JoyX	bne	@changer	lda	debounce	and	#JoyTR	beq	@exit2@changer:	jsl	changeremotel@exit2:		ldy	weapon	lda	invenypos,y	sta	PICylo,x	** and try exit (kills all other tasks)*;	jsr	updatepanel	lda	pauseflag			;wait for setup...	cmp	#3	bne	@noexit	lda	pausehold	beq	@nowait	dec	pausehold	bra	@noexit@nowait:	lda	debounce+1			;then read stick	and	#joyStart	beq	@noexit		inc	pauseflag		ldy	#inven_task+1					;remove other tasks	lda	#0	sta	TSKflags,y	sta	PICadrLo,y	sta	PICadrHi,y	iny	sta	TSKflags,y	sta	PICadrLo,y	sta	PICadrHi,y			jml	TSKcancel@noexit:	rtl	** remote*inventask2:	lda	#4						sta	PICcolor,x	lda	#168	sta	PICxlo,x		ldy	remote	lda	invenypos,y	sta	PICylo,x	jsl	TSKsuspend	lda	status	cmp	#drivescooter	beq	@nothing	cmp	#rideship	beq	@nothing		lda	remote	bpl	@fine2@nothing:	stz	PICadrLo,x 	stz	PICadrHi,x	bra	@endofstuff2@fine2:		jsl	PICput	dw	invenpic@endofstuff2:	ldy	remote	lda	invenypos,y	sta	PICylo,x	rtl** bob drawing*blinktime:	dc.b	0,0,1,0,0,0,1,0	dc.b	0,0,0,1,0,0,1,0	inventask3:	lda	#126	sta	PICxlo,x	lda	#67+32+8-24	sta	PICylo,x	jsl	PICput	dw	invbob1	lda	#8	sta	PICbank,x		jsl	TSKsuspend			lda	TSKclock	and	#7	cmp	#7	bne	@noinc	inc	PICtemp1,x@noinc:	lda	PICtemp1,x	and	#15	tay	lda	blinktime,y	bne	@close	jsl	PICput	dw	invbob1	rtl@close:	jsl	PICput	dw	invbob2	rtl