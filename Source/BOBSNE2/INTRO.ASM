** module for the fancy-schmancy introduction sequence*	with built in sphagetti*textspeed	equ	5** intro 1 text*introtext1:	dc.w	introtext10		;text per intro sequence	dc.w	introtext11	dc.w	introtext12	dc.w	introtext13	dc.w	introtext14	dc.w	introtext15	dc.w	introtext16	dc.w	introtext17	dc.w	introtext18introtext10:	dc.b	0,30			;text number and timings...introtext11:	dc.b	0,2	dc.b	9,66	dc.b	0,230introtext12:	dc.b	0,200introtext13:	dc.b	0,200introtext14:	dc.b	0,200introtext15:	dc.b	0,70	dc.b	13,88	dc.b	0,200introtext16:	dc.b	0,200introtext17:	dc.b	0,10	dc.b	11,95	dc.b	0,200introtext18:	dc.b	0,200	** intro text 2*introtext2:	dc.w	introtext20		;text per intro sequence	dc.w	introtext21	dc.w	introtext22	dc.w	introtext23	dc.w	introtext24	dc.w	introtext25	dc.w	introtext26	dc.w	introtext27	dc.w	introtext28	dc.w	introtext29	introtext20:	dc.b	0,30			;text number and timings...introtext21:	dc.b	0,6	dc.b	16,24	dc.b	0,26	dc.b	17,50	dc.b	0,52	dc.b	19,77	dc.b	0,80	dc.b	15,88	dc.b	0,230introtext22:	dc.b	0,80introtext23:	dc.b	0,2	dc.b	7,12	dc.b	0,50introtext24:	dc.b	0,70introtext25:	dc.b	0,10	dc.b	0,20	dc.b	0,30	dc.b	0,40introtext26:	dc.b	0,10	dc.b	0,20	dc.b	0,30introtext27:	dc.b	0,10	dc.b	0,30	dc.b	0,60introtext28:	dc.b	0,10	dc.b	0,15	dc.b	0,80	introtext29:	dc.b	0,20	dc.b	20,90	dc.b	0,200	** intro text 3*introtext3:	dc.w	introtext30		;text per intro sequence	dc.w	introtext31	dc.w	introtext32	dc.w	introtext33	dc.w	introtext34	dc.w	introtext35	dc.w	introtext36	dc.w	introtext37introtext30:	dc.b	0,200			;text number and timings...introtext31:	dc.b	0,20	dc.b	12,100	dc.b	0,230introtext32:	dc.b	0,10	dc.b	21,18	dc.b	0,200introtext33:	dc.b	0,200introtext34:	dc.b	0,26	dc.b	23,40	dc.b	0,200introtext35:	dc.b	0,200introtext36:	dc.b	0,2	dc.b	24,19	dc.b	0,200introtext37:	dc.b	0,200	** intro text 4*introtext4:	dc.w	introtext40		;text per intro sequence	dc.w	introtext41	dc.w	introtext42	dc.w	introtext43	introtext40:	dc.b	0,30			;text number and timings...introtext41:	dc.b	0,10	dc.b	25,30	dc.b	0,60introtext42:	dc.b	0,30introtext43:	dc.b	0,40**  some of bob's faces*bobmugs:	dc.b	0,0,0,1,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,1,0,0,0bobturns:	dc.b	0,0,0,0,0,0,0,3,3,3	dc.b	4,4,4,4,4,4,4,4,4,5	dc.b	5,5,5,5,5,5,5,5,5,5	dc.b	5,5,5,5,5,5,6,6,6,6	dc.b	6,6,6,6,6,6,6,6,6,7	dc.b	7,7,7,7,7,7,7,7,7,7	dc.b	7,7,7,7,7,7,6,6,6,6	dc.b	6,6,6,6,6,6,6,6,6,6,6bobcrashes:	dc.b	8,8,9,9,10,10,11,11,12,12	** intro 2 bob faces*	bobmugs2:	dc.b	0,0,0,0,1,1,2,2,3,3	dc.b	3,3,3,3,3,3,3,3,3,3	dc.b	3,4,5,5,5,5,5,5,5,6	bobwatchsign:	dc.b	11,7,7,7,7,7,11,10,10	dc.b	10,10,10,10,10,11,7,7,7,7	dc.b	7,7,0,1,2,3,3,3,3,3	dc.b	3,3,3,3,3,3,3,3,3,3	dc.b	4,5,6,10,10,10,10	bobdrops:	dc.b	12,12,12,13,13,13,13,13,13,13	dc.b	13,13,13,13,13,13,13,13,13,13	dc.b	14,14,15,15,15,15,15,15,15,15	dc.b	15,15,16,17,16,17,16,17,16,17	dc.b	16,17,16,17,16,17,16,17** intro 3 bob faces*bobdisbelief:	dc.b	41,41,42,42,42,42,42,42,42,42,42,42,42,42	dc.b	42,42,42,42,42bobmugs3:	dc.b	0,0,0,0,0,1,1,1,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,1,1,1,0,0,0	dc.b	0,32,32,32+1,32+1,32+1,32+2,32+2,32+2,32+2,32+2,32+2,32+2,32+2,32+2	dc.b	32+3,32+3,32+3,32+3,32+3,32+3,32+3,32+3,32+3	dc.b	35,35,35,35,35,35	bobrelief:	dc.b	32+4,32+4,32+5,32+5,32+6,32+6,32+6,32+7,32+7,32+7,32+7,32+7,32+7,32+7	dc.b	39,39,39,39,39,39,39,39,39,39,39,39;	dc.b	32+8,32+8,32+8,32+8,32+8,32+4,32+4,32+4,32+4,32+4,32+4,32+4	cardodgestuff:	dc.b	-2,-2,-2,-2,-2,-2,-2,-2,-2,-2	dc.b	2,2,2,2,2,2,2,2,2,2	dc.b	2,2,2,2,2,2,2,2,2,-2	dc.b	-4,-4,-4,-4,-4,-4,-4,-4,-2,2	dc.b	4,4,4,4,4,4,4,2,2,-2	dc.b	-2,-2,-2,-2,-2,-2,-2,-2,-2,-2	dc.b	0,0,0,0,0,0,2,2,2,2	dc.b	0,0,0,0,0,0,0		cardodgestuff2:	dc.b	-1,-1,-1,-1,-1,-1,-1,-1,-1,-1	dc.b	1,1,1,1,1,1,1,1,1,1** end animation....*bobhaswon:	dc.b	43+0,43+1,43+2,43+3,43+3,43+3,43+3	dc.b	43+4,43+5,43+6,43+7,43+8	dc.b	43+9,43+9,43+9,43+9,43+9,43+9,43+9,43+9,52,52,52,52,52	dc.b	43+10,43+11,43+12,43+12,43+12,55,55,55,55,55** main intro driver*processintro:	phb	lda	#13	pha	plb	** bring ship on screen*	lda	introcount			bne	@phase1@phase0:	lda	#0				;bob straight	sta	pictureoffset	lda	#1	jsl	movestars	lda	#2	jsl	PICxadd	lda	PICxhi,x	bne	@exit0	lda	PICxlo,x	cmp	#128	bcc	@exit0	inc	introcount	stz	hotdata@exit0:	plb	rtl** bring on the first of little space rocks*@phase1:	cmp	#1	bne	@phase2		ldy	hotdata	lda	bobmugs,y	sta	pictureoffset		lda	#1	jsl	movestars	lda	cputime	and	#3	cmp	#3	bne	@exit1	lda	hotdata	inc	a	sta	hotdata	cmp	#40	bcc	@exit1	inc	introcount	stz	hotdata@exit1:	plb	rtl	** scroll on the first big rock*@phase2:	cmp	#2	bne	@phase3	lda	#1	jsl	movestars	lda	#4	jsl	movestarscroll		lda	#0	sta	pictureoffset		lda	hotdata	inc	a	sta	hotdata	cmp	#38	bcc	@exit2	cmp	#54	;70	bcs	@phase2a	lda	#-4	;-2	jsl	PICyadd	bra	@exit2@phase2a:	cmp	#90	bcc	@exit2	cmp	#100	;110	bcs	@end2	lda	#4		;2	jsl	PICyadd	bra	@exit2@end2:	cmp	#140	bcc	@exit2	inc	introcount	stz	hotdata@exit2:	plb	rtl	** more little space rocks*@phase3:	cmp	#3	bne	@phase4	lda	#0	sta	pictureoffset	lda	#1	jsl	movestars	lda	cputime	and	#1	cmp	#1	bne	@exit3	lda	hotdata	inc	a	sta	hotdata	cmp	#60	bcc	@exit3	inc	introcount	stz	hotdata@exit3:	plb	rtl** scroll on the second big rock*@phase4:	cmp	#4	bne	@phase5	lda	#1	jsl	movestars	lda	#4	jsl	movestarscroll		lda	#0	sta	pictureoffset		lda	hotdata	inc	a	sta	hotdata	cmp	#25	bcc	@exit4	cmp	#45	;65	bcs	@phase4a	lda	#4	;2	jsl	PICyadd	bra	@exit4@phase4a:	cmp	#75	bcc	@exit4	cmp	#89	;104	bcs	@end4	lda	#-4	;-2	jsl	PICyadd	bra	@exit4@end4:	cmp	#120	bcc	@exit4	inc	introcount	stz	hotdata@exit4:	plb	rtl	** final of little stars and the lube job sign*@phase5:	cmp	#5	bne	@phase6		ldy	hotdata	lda	bobturns,y	sta	pictureoffset		lda	#1	jsl	movestars	lda	cputime	and	#3	cmp	#3	bne	@exit5	lda	hotdata	inc	a	sta	hotdata	cmp	#79	bcc	@exit5	inc	introcount	stz	hotdata@exit5:	plb	rtl** and then scroll on the final collide sign*@phase6:	cmp	#6	bne	@phase7	lda	#1	jsl	movestars	lda	#4	jsl	movestarscroll	lda	#6	sta	pictureoffset		lda	hotdata	inc	a	sta	hotdata	cmp	#46	bcc	@exit6	inc	introcount	stz	hotdata	lda	#30	sta	shakescreen@exit6:	plb	rtl** hit rock*@phase7:	cmp	#7	bne	@phase8	lda	hotdata	cmp	#8	bcc	@getfromtable3	lda	#12	bra	@nomug3@getfromtable3:	tay	lda	bobcrashes,y@nomug3:	sta	pictureoffset		lda	hotdata	inc	a	sta	hotdata	cmp	#100	bcc	@exit7		inc	introcount	stz	hotdata@exit7:	plb	rtl	** drop off screen*@phase8:	lda	#13	sta	pictureoffset		lda	cputime	and	#3	cmp	#3	bne	@exit8	lda	#16	jsl	PICyadd	lda	hotdata	inc	a	sta	hotdata	cmp	#20	bcc	@exit8	inc	introend	stz	PICcolor,x@exit8:	plb	rtl** Level 1-2 in-between driver*processintro2:	phb	lda	#13	pha	plb	** bring ship on screen*	lda	introcount			bne	@phase1@phase0:	lda	#0+14				;bob straight	sta	pictureoffset	lda	#1	jsl	movestars	lda	#2	jsl	PICxadd	lda	PICxhi,x	bne	@exit0	lda	PICxlo,x	cmp	#128	bcc	@exit0	inc	introcount	stz	hotdata@exit0:	plb	rtl** scroll by the first rock*@phase1:	cmp	#1	bne	@phase2	lda	#0+14				;bob straight	sta	pictureoffset		lda	#1	jsl	movestars	lda	#2	jsl	movestarscroll		lda	hotdata	inc	a	sta	hotdata	cmp	#210	bcc	@exit1	inc	introcount	stz	hotdata@exit1:	plb	rtl	** bob mugs for speedup*@phase2:	cmp	#2	bne	@phase3	lda	#1	jsl	movestars		ldy	hotdata	lda	bobmugs2,y	clc	adc	#14	sta	pictureoffset		lda	cputime	and	#7	cmp	#7	bne	@exit2		lda	hotdata	inc	a	sta	hotdata	cmp	#30	bcc	@exit2	inc	introcount	stz	hotdata@exit2:	plb	rtl	** scream through rocks*@phase3:	cmp	#3	bne	@phase4	lda	#20					;move fast	sta	pictureoffset		lda	#3	jsl	movestars	lda	#4	jsl	movestarscroll	lda	cputime	and	#3	cmp	#3	bne	@exit3		inc	hotdata	lda	hotdata	cmp	#60	bcc	@exit3	inc	introcount	stz	hotdata@exit3:	plb	rtl** look at gas station+sign*@phase4:	cmp	#4	bne	@phase5	lda	#3	jsl	movestars	lda	#4	jsl	movestarscroll		ldy	hotdata	lda	bobwatchsign,y	clc	adc	#14	sta	pictureoffset		lda	cputime	and	#7	cmp	#7	bne	@exit4		inc	hotdata	lda	hotdata	cmp	#46       	bcc	@exit4		inc	introcount	stz	hotdata	lda	#4	sta	adamcount@exit4:	plb	rtl	** slow down scroll till 0 (out of gas)*@phase5:	cmp	#5	bne	@phase6	lda	#3	jsl	movestars	lda	adamcount	jsl	movestarscroll		lda	adamcount	cmp	#2	bcs	@up	lda	#10+15	bra	@ohoh@up:	lda	#10+14@ohoh:	sta	pictureoffset		lda	cputime	and	#63	cmp	#63	bne	@exit5	dec	adamcount	lda	adamcount	bne	@exit5	inc	introcount	stz	hotdata@exit5:	plb	rtl** stop+wave+die!!!!*@phase6:	cmp	#6	bne	@phase7	inc	adamcount	lda	adamcount	cmp	#30	bcc	@exit6		ldy	hotdata	lda	bobdrops,y	clc	adc	#14	sta	pictureoffset		lda	cputime	and	#3	cmp	#3	bne	@exit6		lda	hotdata	inc	a	sta	hotdata	cmp	#46	bcc	@exit6	inc	introcount	stz	hotdata@exit6:	plb	rtl** drop off screen*@phase7:	lda	#14+17	sta	pictureoffset		lda	#8	jsl	PICyadd		lda	PICyhi,x	beq	@exit7	stz	introcount	inc	introend	stz	hotdata@exit7:	plb	rtl	** bob's witty speech balloon*speechballoon:	lda	#0	sta	PICscroll,x	sta	PICcolor,x		jsr	attachtobob		lda	#32	jsl	PICysub		lda	#31	sta	PICbank,x		lda	introflag	bne	@stillon	jml	TSKcancel@stillon:	lda	introcount	asl	a	tay		lda	introtype	beq	@world1	cmp	#1	beq	@world2	cmp	#2	beq	@world3@world4:	lda	introtext4,y	sta	tmp	lda	introtext4+1,y	sta	tmp+1	bra	@checkloop@world3:	lda	introtext3,y	sta	tmp	lda	introtext3+1,y	sta	tmp+1	bra	@checkloop@world2:	lda	introtext2,y	sta	tmp	lda	introtext2+1,y	sta	tmp+1	bra	@checkloop@world1:	lda	introtext1,y	sta	tmp	lda	introtext1+1,y	sta	tmp+1@checkloop:	ldy	#1@scanloop:	lda	(tmp),y	cmp	hotdata	bcs	@done	iny	iny	bra	@scanloop	@done:	dey	lda	(tmp),y	asl	a	tay	lda	allgametext,y	sta	tmp	lda	allgametext+1,y	sta	tmp+1	jsl	PICput2		rtl	** evil rock which tings bob's car..*rocktrajback:	dc.b	0,-2,-2,-2,-2,-1,-1,0,0,1,1,2,2,3,3rocktrajbackx:	dc.b	1,1,2,2,2,2,2,2,2,2,2,2,2,1,1,1evilrock:	lda	#1	sta	PICcolor,x		lda	#1	sta	PICxhi,x	lda	#20	sta	PICxlo,x	lda	#118	sta	PICylo,x		jsl	PICput	dw	lintrock0		stz	PICvomit,x		jsl	TSKsuspend		lda	PICstatus,x		;plummet off screen after hit	beq	@nohit	lda	PICvomit,x	cmp	#14	bcs	@dropping	inc	a	sta	PICvomit,x	tay	lda	rocktrajback,y	jsl	PICyadd	ldy	PICvomit,x	lda	rocktrajbackx,y	jsl	PICxadd	inc	hotdata	rtl@dropping:	lda	#4	jsl	PICyadd	lda	PICyhi,x	beq	@nomove	lda	#7	sta	introcount	stz	hotdata	jml	TSKcancel@nohit:	lda	introcount	cmp	#6	bne	@nomove	lda	#-4	jsl	PICxadd	lda	PICxlo,x	cmp	#172	bne	@nomove	inc	PICstatus,x	@nomove:	rtl	** dropping pieces of bob's caddy*caddfallframes:	dc.w	0				;dummy	dc.w	caddframe5		;bumper	dc.w	caddframe8		;roof	dc.w	caddframe11		;rear tail	dc.w	caddframe14		;front end	dc.w	caddframe16		;read fin		caddypieces:	lda	#3	sta	PICcolor,x	sta	PICprior,x		lda	#0	sta	PICscroll,x		lda	introcount	cmp	#7	beq	@going	rtl@going:	lda	adamcount	asl	a	tay	lda	caddfallframes,y	sta	tmp	lda	caddfallframes+1,y	sta	tmp+1	jsl	PICput2	lda	dirtymok	bne	@flyoff	jsr	attachtobob	inc	dirtymok@wait:	rtl@flyoff:	lda	#-16	jsl	PICxadd	lda	PICxhi,x	beq	@stillon	lda	PICxlo,x	cmp	#240	bcs	@stillon	stz	dirtymok	lda	adamcount	inc	a	sta	adamcount	cmp	#6	bcc	@stillon	stz	hotdata	lda	#8	sta	introcount	jml	TSKcancel	@stillon:	rtl	** end of game animation*processintro4:	phb	lda	#13	pha	plb	** bring ship on screen*	lda	introcount			bne	@phase1@phase0:	lda	#43+0	sta	pictureoffset		lda	#2	jsl	movestars		lda	#2	jsl	PICxadd	lda	PICxhi,x	bne	@exit0	lda	PICxlo,x	cmp	#128	bcc	@exit0	inc	introcount	stz	hotdata@exit0:	plb	rtl** put on the shades, hunch forward*@phase1:	cmp	#1	bne	@phase2	lda	#2	jsl	movestars		ldy	hotdata	lda	bobhaswon,y	sta	pictureoffset	lda	cputime	and	#7	cmp	#7	bne	@exit1	lda	hotdata	inc	a	sta	hotdata	cmp	#34	bcc	@exit1	inc	introcount	stz	hotdata@exit1:	plb	rtl	** speed off screen*@phase2:	cmp	#2	bne	@phase3	lda	#43+12	sta	pictureoffset		lda	#2	jsl	movestars		lda	#8	jsl	PICxadd	lda	PICxhi,x	beq	@exit2	lda	PICxlo,x	cmp	#220	bcc	@exit2	inc	introcount	stz	hotdata@exit2:	plb	rtl	** do "the end" bit*@phase3:;	cmp	#3;	bne	@phase4	inc	introend	stz	introcount@exit3:	plb	rtl** Level 2-3 in-betweeny*processintro3:	phb	lda	#13	pha	plb	** bring ship on screen*	lda	introcount			bne	@phase1@phase0:	lda	#0+32	sta	pictureoffset		lda	#2	jsl	movestars		lda	#2	jsl	PICxadd	lda	PICxhi,x	bne	@exit0	lda	PICxlo,x	cmp	#128	bcc	@exit0	inc	introcount	stz	hotdata@exit0:	plb	rtl** happiness...followed by panic*@phase1:	cmp	#1	bne	@phase2	lda	#2	jsl	movestars		ldy	hotdata	lda	bobmugs3,y	sta	pictureoffset	lda	cputime	and	#3	cmp	#3	bne	@exit1	lda	hotdata	inc	a	sta	hotdata	cmp	#94	bcc	@exit1	inc	introcount	stz	hotdata@exit1:	plb	rtl	** drive fast through rocks*@phase2:	cmp	#2	bne	@phase3	lda	#2	jsl	movestars	lda	#6	jsl	movestarscroll		lda	#32+3	sta	pictureoffset		ldy	hotdata	lda	cardodgestuff,y	jsl	PICyadd		lda	cputime	and	#3	cmp	#3	bne	@exit2		lda	hotdata	inc	a	sta	hotdata	cmp	#76	bcc	@exit2	inc	introcount	stz	hotdata@exit2:	plb	rtl	** show relief*@phase3:	cmp	#3	bne	@phase4	ldy	hotdata	lda	bobrelief,y	sta	pictureoffset		lda	#2	jsl	movestars	lda	cputime	and	#7	cmp	#7	bne	@exit3		lda	hotdata	inc	a	sta	hotdata	cmp	#15	bcc	@exit3		inc	introcount	stz	hotdata@exit3:	plb	rtl** dodge last rock....*@phase4:	cmp	#4	bne	@phase5	lda	#2	jsl	movestars	lda	#6	jsl	movestarscroll		lda	#32+2	sta	pictureoffset		ldy	hotdata	lda	cardodgestuff2,y	jsl	PICyadd		lda	cputime	and	#3	cmp	#3	bne	@exit4		lda	hotdata	inc	a	sta	hotdata	cmp	#20	bcc	@exit4	inc	introcount	stz	hotdata@exit4:	plb	rtl	** one more mug...*@phase5:	cmp	#5	bne	@phase6		lda	#2	jsl	movestars	lda	#39	sta	pictureoffset	;	ldy	hotdata;	lda	bobmugs,y;	sta	pictureoffset	lda	cputime	and	#3	cmp	#3	bne	@exit5	lda	hotdata	inc	a	sta	hotdata	cmp	#1	bcc	@exit5	inc	introcount	stz	hotdata	stz	dirtymok	stz	adamcount@exit5:	plb	rtl** hit little sprite rock*@phase6:	cmp	#6	bne	@phase7		lda	#2	jsl	movestars		lda	hotdata	cmp	#2	bcc	@sad	cmp	#15	bcc	@straight	lda	#41	bra	@sethead@straight:	lda	#40@sethead:	sta	pictureoffset	plb	rtl@sad:	lda	#38			;32+4	sta	pictureoffset	@exit6:	plb	rtl	** fall apart the car...piece by piece*@phase7:	cmp	#7	bne	@phase8		lda	#2				;caddy pieces does it...	jsl	movestars		ldy	adamcount	lda	bobdisbelief,y	sta	pictureoffset	@exit7:	plb	rtl** look back at parts*@phase8:	cmp	#8	bne	@phase9	lda	#2	jsl	movestars			lda	#10+32	sta	pictureoffset		lda	hotdata	inc	a	sta	hotdata	cmp	#60	bcc	@exit8		inc	introcount	stz	hotdata@exit8:	plb	rtl	** look at camera and drop*@phase9:	lda	#9+32	sta	pictureoffset		lda	#2	jsl	movestars		lda	hotdata	inc	a	sta	hotdata	cmp	#120	bcc	@exit9		lda	#8	jsl	PICyadd		lda	PICyhi,x	beq	@exit9	lda	PICylo,x	cmp	#96	bcc	@exit9	stz	introcount	inc	introend	stz	hotdata@exit9:	plb	rtl	** attach x/y to bob*attachtobob:	lda	bobxposhi	sta	PICxhi,x	lda	bobyposhi	sta	PICyhi,x	lda	bobxpos	sta	PICxlo,x	lda	bobypos	sta	PICylo,x	rts		** move the background stars*movestars:	sta	temp	lda	Hpos2			;move parallax stuff	clc	adc	temp	sta	Hpos2	lda	cputime	and	#1	bne	@noscr3	inc	Hpos3@noscr3:	rtl** bob's car for intro*chevy:	jsr	attachtobob	lda	#3	sta	PICcolor,x	sta	PICprior,x	jsl	TSKsuspend		lda	introflag	bne	@carryon	jml	TSKcancel@carryon:	lda	#3	sta	PICcolor,x		jsr	attachtobob		lda	introcount	cmp	#7	bcc	@nothit	jsl	PICput	dw	chev1	rtl@nothit:	jsl	PICput	dw	chev0	rtl** bob's car between 1 and 2*corvette:	jsr	attachtobob	lda	#3	sta	PICcolor,x	sta	PICprior,x		jsl	TSKsuspend		lda	introflag	bne	@carryon	jml	TSKcancel@carryon:	lda	#3	sta	PICcolor,x		jsr	attachtobob		lda	introcount	cmp	#6	bcc	@useclock	lda	#0	beq	@shutup@useclock:	lda	TSKclock	and	#7@shutup:	asl	a	tay	lda	vetframes,y	sta	tmp	lda	vetframes+1,y	sta	tmp+1	jsl	PICput2	rtl	vetframes:	dw	vetteframe0	dw	vetteframe1	dw	vetteframe2	dw	vetteframe3	dw	vetteframe4	dw	vetteframe5	dw	vetteframe6	dw	vetteframe7** bob's car between 2 and 3*caddychair:	lda	introflag	bne	@carryon	jml	TSKcancel@carryon:	lda	#3	sta	PICcolor,x		jsr	attachtobob	jsl	PICput	dw	caddframe0	rtl	** the caddy*caddy:	jsr	attachtobob	lda	#3	sta	PICcolor,x	sta	PICprior,x		jsl	TSKsuspend		lda	introflag	bne	@carryon	jml	TSKcancel@carryon:	lda	#3	sta	PICcolor,x		lda	introcount	cmp	#6	bne	@noshake	lda	hotdata	cmp	#2	bcc	@shakedone	cmp	#8	bcs	@shakedone	lda	TSKclock	and	#1	bne	@add	lda	#-1@add:	jsl	PICyadd@shakedone:	rtl	@noshake:	lda	introcount	cmp	#9	bcc	@nofall	lda	hotdata	cmp	#16	bcc	@nofall	lda	#8	jsl	PICyadd	bra	@pastatt@nofall:	jsr	attachtobob@pastatt:	lda	TSKclock	and	#4	lsr	a	sta	temp		lda	adamcount	asl	a	asl	a	clc	adc	temp	tay		lda	bigcaddypieces,y	sta	tmp	lda	bigcaddypieces+1,y	sta	tmp+1	jsl	PICput2	rtlbigcaddypieces:	dc.w	caddframe1		;whole car	dc.w	caddframe2	dc.w	caddframe3		;no bumper	dc.w	caddframe4	dc.w	caddframe6		;minus front	dc.w	caddframe7	dc.w	caddframe9		;minus back	dc.w	caddframe10	dc.w	caddframe12		;minus fins	dc.w	caddframe13	dc.w	caddframe15		;only frame	dc.w	caddframe15		dc.w	caddframe15		;only frame	dc.w	caddframe15	** bob's exhaust*dadexhaust:	lda	staticintro	bne	doexhaust	jml	TSKcancel	funnyexhaust:	lda	introflag	bne	@carryon	jml	TSKcancel@carryon:	lda	introcount	cmp	#7	bcc	doexhaust	stz	PICadrLO,x	stz	PICadrHi,x	rtldoexhaust:	lda	#7	sta	PICcolor,x	jsr	attachtobob		lda	#-64+8	jsl	PICxadd		lda	TSKclock	and	#7		asl	a	asl	a	jsl	PICxsub		lda	#16		jsl	PICyadd		lda	TSKclock	and	#7	asl	a	tay	lda	exframes,y	sta	tmp	lda	exframes+1,y	sta	tmp+1	jsl	PICput2	rtl		exframes:	dw	fexhaust0	dw	fexhaust1	dw	fexhaust2	dw	fexhaust3	dw	fexhaust4	dw	fexhaust5	dw	fexhaust6	dw	fexhaust7	** stretchneck*stretchneck1:	lda	#0	sta	PICcolor,x	jsl	TSKsuspend		lda	introflag	bne	@carryon@die:	jml	TSKcancel@carryon:		jsr	attachtobob		lda	#-4	jsl	PICxadd		lda	#100	sta	PICylo,x	lda	introcount	cmp	#8	bcc	@noneck		lda	hotdata	cmp	#14	bcs	@die	asl	a	tay	lda	strframes1,y	sta	tmp	lda	strframes1+1,y	sta	tmp+1	jsl	PICput2@noneck:	rtlstretchneck2:	lda	#0	sta	PICcolor,x	jsl	TSKsuspend		lda	introflag	bne	@carryon@die:	jml	TSKcancel@carryon:	jsr	attachtobob		lda	#-4	jsl	PICxadd		lda	#100+64+16	sta	PICylo,x		lda	introcount	cmp	#8	bcc	@noneck		lda	hotdata	cmp	#14	bcs	@die	asl	a	tay	lda	strframes2,y	sta	tmp	lda	strframes2+1,y	sta	tmp+1	jsl	PICput2@noneck:	rtl	strframes1:	dc.w	strneck11	dc.w	strneck12	dc.w	strneck13	dc.w	strneck14	dc.w	strneck14	dc.w	strneck14	dc.w	strneck14	dc.w	strneck14	dc.w	strneck14	dc.w	strneck20	dc.w	strneck21	dc.w	strneck23	dc.w	strneck24	dc.w	strneck24	strframes2:	dc.w	0	dc.w	0	dc.w	0	dc.w	0	dc.w	strneck15	dc.w	strneck16	dc.w	strneck17	dc.w	strneck18	dc.w	strneck19	dc.w	strneck19	dc.w	strneck22	dc.w	0	dc.w	0	dc.w	0** lube job sign*lubesign:	lda	#5	sta	PICcolor,x		lda	#1	sta	PICxhi,x		lda	#200	sta	PICxlo,x		lda	#160	sta	PICylo,x		jsl	PICput	dw	lubejob		jsl	TSKsuspend	lda	introflag	bne	@fine	jml	TSKcancel@fine:	lda	PICstatus,x	bne	@move	lda	introcount	cmp	#4	bcc	@noreset	inc	PICstatus,x@move:	lda	#-2	jsl	PICxadd	lda	PICxhi,x	cmp	#-2	bne	@noreset	jml	TSKcancel@noreset:	rtl** frames...*chev0: dc.b $12 dc.b $A3,$89,$4C dc.b $93,$89,$4A dc.b $83,$89,$48 dc.b $CD,$89,$46 dc.b $DD,$89,$44 dc.b $ED,$89,$42 dc.b $FD,$89,$40 dc.b $9D,$C7,$2A dc.b $95,$C7,$29 dc.b $87,$D7,$2C dc.b $85,$C7,$27 dc.b $F3,$C7,$20 dc.b $F4,$E7,$00 dc.b $EB,$C7,$21 dc.b $EC,$D7,$02 dc.b $DC,$D7,$04 dc.b $DB,$C7,$23 dc.b $CB,$C7,$25chev1: dc.b $11 dc.b $EF,$CC,$82 dc.b $81,$8B,$A8 dc.b $EF,$84,$A2 dc.b $FF,$84,$A0 dc.b $FF,$CC,$80 dc.b $EE,$EA,$60 dc.b $EF,$DC,$62 dc.b $91,$8B,$AA dc.b $91,$C5,$8A dc.b $91,$D5,$6A dc.b $81,$83,$98 dc.b $CF,$85,$86 dc.b $DF,$8C,$A4 dc.b $DF,$C4,$84 dc.b $DF,$D4,$64 dc.b $CF,$CB,$66 dc.b $81,$CD,$78lubejob: dc.b $11 dc.b $67,$D6,$CA dc.b $67,$E6,$C8 dc.b $DB,$C4,$60 dc.b $93,$C6,$EC dc.b $10,$8A,$EE dc.b $60,$8A,$E8 dc.b $00,$8A,$EC dc.b $50,$8A,$EA dc.b $C7,$C6,$EE dc.b $19,$D6,$AE dc.b $09,$D6,$AC dc.b $47,$D6,$AA dc.b $57,$D6,$A8 dc.b $19,$E6,$A6 dc.b $09,$E6,$A4 dc.b $47,$E6,$A2 dc.b $57,$E6,$A0fexhaust0: dc.b $01 dc.b $C3,$43,$08fexhaust1: dc.b $02 dc.b $C3,$01,$19 dc.b $C3,$47,$09fexhaust2: dc.b $02 dc.b $43,$01,$D0 dc.b $43,$47,$C0fexhaust3: dc.b $02 dc.b $43,$01,$D1 dc.b $43,$47,$C1fexhaust4: dc.b $02 dc.b $43,$01,$D2 dc.b $43,$47,$C2fexhaust5: dc.b $03 dc.b $43,$04,$C6 dc.b $43,$4C,$C3 dc.b $43,$44,$D3fexhaust6: dc.b $03 dc.b $43,$04,$C7 dc.b $43,$44,$D4 dc.b $43,$4C,$C4fexhaust7: dc.b $03 dc.b $42,$04,$D6 dc.b $42,$44,$D5 dc.b $42,$4C,$C5strneck11: dc.b $03 dc.b $C7,$C9,$06 dc.b $CB,$5E,$18 dc.b $C7,$D9,$0Astrneck12: dc.b $04 dc.b $C7,$87,$06 dc.b $C7,$C9,$06 dc.b $CB,$5E,$18 dc.b $C7,$D9,$0Astrneck13: dc.b $05 dc.b $C7,$97,$06 dc.b $C7,$87,$06 dc.b $C7,$C9,$06 dc.b $CB,$5E,$18 dc.b $C7,$D9,$0Astrneck14: dc.b $06 dc.b $C7,$A7,$06 dc.b $C7,$97,$06 dc.b $C7,$87,$06 dc.b $C7,$C9,$06 dc.b $CB,$5E,$18 dc.b $C7,$D9,$0Astrneck15: dc.b $01 dc.b $C7,$E9,$06strneck16: dc.b $02 dc.b $C7,$E9,$06 dc.b $C7,$D9,$06strneck17: dc.b $03 dc.b $C7,$E9,$06 dc.b $C7,$D9,$06 dc.b $C7,$C9,$06strneck18: dc.b $04 dc.b $C7,$87,$06 dc.b $C7,$E9,$06 dc.b $C7,$D9,$06 dc.b $C7,$C9,$06strneck19: dc.b $05 dc.b $C7,$97,$06 dc.b $C7,$87,$06 dc.b $C7,$E9,$06 dc.b $C7,$D9,$06 dc.b $C7,$C9,$06strneck20: dc.b $08 dc.b $D0,$DD,$7C dc.b $C8,$E5,$6D dc.b $C8,$D5,$8D dc.b $C9,$C5,$E6 dc.b $C9,$8B,$E6 dc.b $C8,$87,$0E dc.b $C8,$97,$2E dc.b $C7,$A7,$06strneck21: dc.b $0A dc.b $C9,$A5,$D6 dc.b $C9,$95,$D6 dc.b $C9,$85,$C6 dc.b $C9,$CB,$A6 dc.b $87,$EB,$C4 dc.b $C9,$EB,$C2 dc.b $D9,$EB,$C0 dc.b $87,$DB,$E4 dc.b $C9,$DB,$E2 dc.b $D9,$DB,$E0strneck22: dc.b $05 dc.b $C9,$E9,$E6 dc.b $C9,$D9,$E6 dc.b $C9,$C9,$E6 dc.b $C9,$87,$E6 dc.b $C9,$97,$D6strneck23: dc.b $06 dc.b $C9,$81,$4E dc.b $C9,$CF,$0C dc.b $C1,$DF,$EA dc.b $C1,$EF,$CA dc.b $D1,$EF,$C8 dc.b $D1,$DF,$E8strneck24: dc.b $03 dc.b $80,$D6,$CE dc.b $80,$E6,$AE dc.b $D2,$E3,$AC; Frame data; Header Information:sintrock0: dc.b $01 dc.b $48,$C7,$10sintrock1: dc.b $01 dc.b $47,$C7,$30sintrock2: dc.b $01 dc.b $48,$C7,$0Esintrock3: dc.b $01 dc.b $48,$C7,$2Elintrock0: dc.b $03 dc.b $01,$49,$0A dc.b $47,$C1,$19 dc.b $4F,$C9,$08lintrock1: dc.b $03 dc.b $4B,$4B,$0B dc.b $43,$CB,$0C dc.b $4B,$C3,$1Blintrock2: dc.b $03 dc.b $4A,$05,$58 dc.b $42,$C3,$49 dc.b $4A,$CB,$38lintrock3: dc.b $04 dc.b $05,$4B,$52 dc.b $4B,$05,$70 dc.b $43,$C3,$61 dc.b $4B,$CB,$50lintrock4: dc.b $03 dc.b $04,$04,$75 dc.b $4C,$C4,$63 dc.b $44,$CC,$54  ** cadillac frames*caddframe0: dc.b $05 dc.b $92,$C6,$62 dc.b $02,$CE,$E2 dc.b $02,$82,$E6 dc.b $4E,$82,$E4 dc.b $4E,$CE,$E0caddframe1: dc.b $15 dc.b $FA,$EA,$80 dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $CA,$CA,$C6 dc.b $DA,$CA,$C4 dc.b $EA,$CA,$C2 dc.b $FA,$CA,$C0 dc.b $FA,$86,$E0 dc.b $EA,$86,$E2 dc.b $DA,$86,$E4 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $A6,$86,$EC dc.b $A6,$CA,$CC dc.b $96,$CA,$CA dc.b $DA,$DA,$A4 dc.b $CA,$DA,$A6 dc.b $86,$DA,$A8 dc.b $86,$CA,$C8caddframe2: dc.b $15 dc.b $FA,$EC,$60 dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $CA,$CA,$C6 dc.b $DA,$CA,$C4 dc.b $EA,$CA,$C2 dc.b $FA,$CA,$C0 dc.b $FA,$86,$E0 dc.b $EA,$86,$E2 dc.b $DA,$86,$E4 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $A6,$86,$EC dc.b $A6,$CA,$CC dc.b $96,$CA,$CA dc.b $DA,$DA,$A4 dc.b $CA,$DA,$A6 dc.b $86,$DA,$A8 dc.b $86,$CA,$C8caddframe3: dc.b $16 dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $A6,$86,$4C dc.b $FA,$EA,$80 dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $CA,$CA,$C6 dc.b $DA,$CA,$C4 dc.b $EA,$CA,$C2 dc.b $FA,$CA,$C0 dc.b $FA,$86,$E0 dc.b $EA,$86,$E2 dc.b $DA,$86,$E4 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $96,$CA,$CA dc.b $DA,$DA,$A4 dc.b $CA,$DA,$A6 dc.b $86,$DA,$A8 dc.b $86,$CA,$C8caddframe4: dc.b $16 dc.b $FA,$EC,$60 dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $A6,$86,$4C dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $CA,$CA,$C6 dc.b $DA,$CA,$C4 dc.b $EA,$CA,$C2 dc.b $FA,$CA,$C0 dc.b $FA,$86,$E0 dc.b $EA,$86,$E2 dc.b $DA,$86,$E4 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $96,$CA,$CA dc.b $DA,$DA,$A4 dc.b $CA,$DA,$A6 dc.b $86,$DA,$A8 dc.b $86,$CA,$C8caddframe5: dc.b $02 dc.b $A9,$82,$07 dc.b $A1,$82,$06caddframe6: dc.b $13 dc.b $06,$CA,$EE dc.b $4A,$CA,$EC dc.b $5A,$CA,$EA dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $A6,$86,$4C dc.b $FA,$EA,$80 dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $EA,$CA,$C2 dc.b $FA,$CA,$C0 dc.b $FA,$86,$E0 dc.b $EA,$86,$E2 dc.b $DA,$86,$E4 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $96,$CA,$CAcaddframe7: dc.b $13 dc.b $FA,$EC,$60 dc.b $06,$CA,$EE dc.b $4A,$CA,$EC dc.b $5A,$CA,$EA dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $A6,$86,$4C dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $EA,$CA,$C2 dc.b $FA,$CA,$C0 dc.b $FA,$86,$E0 dc.b $EA,$86,$E2 dc.b $DA,$86,$E4 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $96,$CA,$CAcaddframe8: dc.b $06 dc.b $DA,$DA,$A4 dc.b $CA,$DA,$A6 dc.b $86,$DA,$A8 dc.b $06,$CA,$CE dc.b $4A,$CA,$CC dc.b $5A,$CA,$CAcaddframe9: dc.b $13 dc.b $FA,$86,$40 dc.b $EA,$86,$42 dc.b $DA,$86,$CE dc.b $DA,$CA,$AE dc.b $EA,$CA,$AC dc.b $FA,$CA,$AA dc.b $06,$CA,$EE dc.b $4A,$CA,$EC dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $A6,$86,$4C dc.b $FA,$EA,$80 dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $96,$CA,$CAcaddframe10: dc.b $13 dc.b $FA,$EC,$60 dc.b $FA,$86,$40 dc.b $EA,$86,$42 dc.b $DA,$86,$CE dc.b $DA,$CA,$AE dc.b $EA,$CA,$AC dc.b $FA,$CA,$AA dc.b $06,$CA,$EE dc.b $4A,$CA,$EC dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $A6,$86,$4C dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2 dc.b $CA,$86,$E6 dc.b $86,$86,$E8 dc.b $96,$86,$EA dc.b $96,$CA,$CAcaddframe11: dc.b $06 dc.b $DA,$86,$88 dc.b $DA,$CA,$68 dc.b $EA,$86,$86 dc.b $EA,$CA,$66 dc.b $FA,$86,$84 dc.b $FA,$CA,$64caddframe12: dc.b $12 dc.b $FA,$EA,$80 dc.b $A6,$CA,$2C dc.b $96,$CA,$2A dc.b $86,$CA,$28 dc.b $CA,$CA,$02 dc.b $CA,$86,$04 dc.b $86,$86,$48 dc.b $96,$86,$4A dc.b $FA,$86,$40 dc.b $EA,$86,$42 dc.b $DA,$86,$CE dc.b $DA,$CA,$AE dc.b $EA,$CA,$AC dc.b $FA,$CA,$AA dc.b $A6,$86,$4C dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2caddframe13: dc.b $12 dc.b $FA,$EC,$60 dc.b $A6,$CA,$2C dc.b $96,$CA,$2A dc.b $86,$CA,$28 dc.b $CA,$CA,$02 dc.b $CA,$86,$04 dc.b $86,$86,$48 dc.b $96,$86,$4A dc.b $FA,$86,$40 dc.b $EA,$86,$42 dc.b $DA,$86,$CE dc.b $DA,$CA,$AE dc.b $EA,$CA,$AC dc.b $FA,$CA,$AA dc.b $A6,$86,$4C dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2caddframe14: dc.b $08 dc.b $A1,$82,$EE dc.b $A6,$CA,$6E dc.b $96,$CA,$CA dc.b $06,$CA,$EE dc.b $CA,$CA,$6C dc.b $CA,$86,$8C dc.b $86,$86,$E8 dc.b $96,$86,$EAcaddframe15: dc.b $0E dc.b $CA,$86,$46 dc.b $DA,$86,$44 dc.b $FA,$CA,$20 dc.b $EA,$CA,$22 dc.b $DA,$CA,$24 dc.b $CA,$CA,$26 dc.b $A6,$86,$4C dc.b $A6,$CA,$2C dc.b $96,$CA,$2A dc.b $86,$CA,$28 dc.b $86,$86,$48 dc.b $96,$86,$4A dc.b $FA,$86,$40 dc.b $EA,$86,$42caddframe16: dc.b $0A dc.b $FA,$EA,$80 dc.b $CA,$86,$8A dc.b $CA,$CA,$6A dc.b $DA,$86,$2E dc.b $DA,$CA,$0E dc.b $EA,$CA,$0C dc.b $FA,$CA,$0A dc.b $EA,$EA,$82 dc.b $FA,$DA,$A0 dc.b $EA,$DA,$A2** vette intro* ; Frame data; Header Information:vetteframe0: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9E,$D6,$AA dc.b $8E,$D6,$A8vetteframe1: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9E,$D4,$AA dc.b $8E,$D4,$A8vetteframe2: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9E,$D3,$AA dc.b $8E,$D3,$A8vetteframe3: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9E,$D5,$AA dc.b $8E,$D5,$A8vetteframe4: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9F,$D6,$AA dc.b $8F,$D6,$A8vetteframe5: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9F,$D4,$AA dc.b $8F,$D4,$A8vetteframe6: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9F,$D3,$AA dc.b $8F,$D3,$A8vetteframe7: dc.b $13 dc.b $F4,$85,$E0 dc.b $E4,$85,$E2 dc.b $F4,$CB,$C0 dc.b $85,$DB,$A6 dc.b $D4,$85,$E4 dc.b $C4,$85,$E6 dc.b $8C,$85,$E8 dc.b $9C,$85,$EA dc.b $AC,$85,$EC dc.b $AC,$CB,$CC dc.b $9C,$CB,$CA dc.b $8C,$CB,$C8 dc.b $C4,$CB,$C6 dc.b $D4,$CB,$C4 dc.b $E4,$CB,$C2 dc.b $DB,$DB,$A2 dc.b $CB,$DB,$A4 dc.b $9E,$D5,$AA dc.b $8E,$D5,$A8** borg lightning...world 2*zapchar2:; 0 dc.w $0000,$0000,$00FF,$FFFF,$0000,$0000,$0000,$0000 dc.w $0000,$0000,$FFFF,$FFFF,$FFFF,$0000,$0000,$0000; 1 dc.w $0000,$0000,$00FF,$FFFF,$0000,$0000,$0000,$0000 dc.w $0000,$0000,$FFFF,$FFFF,$FFFF,$0000,$0000,$0000; 2 dc.w $00FF,$40BF,$00FF,$FFFF,$0000,$2030,$1018,$08E7 dc.w $0000,$0000,$FFFF,$FFFF,$FFFF,$00DF,$00EF,$00FF; 3 dc.w $00FF,$02FD,$00FF,$FFFF,$0000,$040C,$0818,$10E7 dc.w $0000,$0000,$FFFF,$FFFF,$FFFF,$00FB,$00F7,$00FF; 4 dc.w $080C,$080C,$080C,$080C,$080C,$080C,$080C,$080C dc.w $1C1C,$1C1C,$1C1C,$1C1C,$1C1C,$1C1C,$1C1C,$1C1C; 5 dc.w $080C,$080C,$080C,$080C,$080C,$080C,$080C,$080C dc.w $1C1C,$1C1C,$1C1C,$1C1C,$1C1C,$1C1C,$1C1C,$1C1C; 6 dc.w $42DB,$81A5,$105A,$3C81,$249D,$245E,$A59D,$42BF dc.w $7E3C,$FF42,$FF91,$C3BD,$C3B9,$C3B9,$C37A,$007C; 7 dc.w $0000,$0000,$FF00,$FFFF,$00FF,$0000,$0000,$0000 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$0000,$0000; 8 dc.w $0000,$0000,$FF00,$FFFF,$00FF,$0000,$0000,$0000 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$0000,$0000; 9 dc.w $00FF,$0000,$FF00,$FFFF,$00FF,$0000,$1018,$08E7 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$00EF,$00FF; 10 dc.w $00FF,$0000,$FF00,$FFFF,$00FF,$0000,$0818,$10E7 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$00F7,$00FF; 11 dc.w $0C18,$0C18,$0C18,$0C18,$0C18,$0C18,$0C18,$0C18 dc.w $3E3E,$3E3E,$3E3E,$3E3E,$3E3E,$3E3E,$3E3E,$3E3E; 12 dc.w $0C18,$0C18,$0C18,$0C18,$0C18,$0C18,$0C18,$0C18 dc.w $3E3E,$3E3E,$3E3E,$3E3E,$3E3E,$3E3E,$3E3E,$3E3E; 13 dc.w $18A5,$245A,$52A5,$BD42,$A55E,$669D,$245E,$42BF dc.w $7E7E,$FFC3,$FF91,$C3BD,$C3B9,$C3B9,$C3FB,$007C; 14 dc.w $0000,$FF00,$FFFF,$FFFF,$FFFF,$FF00,$00FF,$0000 dc.w $FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF; 15 dc.w $0000,$FF00,$FFFF,$FFFF,$FFFF,$FF00,$00FF,$0000 dc.w $FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF; 16 dc.w $0000,$FF00,$FFFF,$FFFF,$FFFF,$FF00,$00FF,$0000 dc.w $FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF; 17 dc.w $0000,$FF00,$FFFF,$FFFF,$FFFF,$FF00,$00FF,$0000 dc.w $FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF; 18 dc.w $3E5C,$3E5C,$3E5C,$3E5C,$3E5C,$3E5C,$3E5C,$3E5C dc.w $FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF; 19 dc.w $3E5C,$3E5C,$3E5C,$3E5C,$3E5C,$3E5C,$3E5C,$3E5C dc.w $FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF; 20 dc.w $42DB,$81A5,$105A,$3C81,$249D,$245E,$A59D,$42BF dc.w $7E3C,$FF42,$FF91,$C3BD,$C3B9,$C3B9,$C37A,$007C; 21 dc.w $0000,$0000,$FF00,$FFFF,$FF00,$00FF,$0000,$0000 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$0000; 22 dc.w $0000,$0000,$FF00,$FFFF,$FF00,$00FF,$0000,$0000 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$0000; 23 dc.w $00FF,$0000,$FF00,$FFFF,$FF00,$00FF,$0000,$08E7 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$00FF; 24 dc.w $00FF,$0000,$FF00,$FFFF,$FF00,$00FF,$0000,$10E7 dc.w $0000,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$FFFF,$00FF; 25 dc.w $1C28,$1C28,$1C28,$1C28,$1C28,$1C28,$1C28,$1C28 dc.w $7E7E,$7E7E,$7E7E,$7E7E,$7E7E,$7E7E,$7E7E,$7E7E; 26 dc.w $1C28,$1C28,$1C28,$1C28,$1C28,$1C28,$1C28,$1C28 dc.w $7E7E,$7E7E,$7E7E,$7E7E,$7E7E,$7E7E,$7E7E,$7E7E; 27 dc.w $19A5,$245A,$52A5,$BD42,$A55E,$669D,$245E,$43BF dc.w $7E7E,$FFC3,$FF91,$C3BD,$C3B9,$C3B9,$C3FB,$007C ** borg zap gates*zapchar:; 0 dc.w $10EF,$38DF,$6CB9,$87FE,$42BD,$4DFB,$3CE7,$08FF dc.w $3000,$7C38,$FEC6,$C703,$C3C3,$EF2E,$3E18,$0C00; 1 dc.w $28F7,$7CCB,$DEFD,$83FE,$0EED,$FD2B,$76FF,$00FF dc.w $6C20,$FE7C,$FF82,$8301,$1F1F,$FFF6,$F600,$0000; 2 dc.w $30CD,$5BA4,$2ED3,$1DE4,$3EC1,$7689,$E51C,$4EF1 dc.w $3222,$7B32,$7F1A,$1F0E,$3E14,$7624,$EF46,$FE64; 3 dc.w $74AB,$60CF,$508F,$6887,$6C93,$A25D,$7689,$18E5 dc.w $7C38,$7070,$7060,$7830,$EC48,$E644,$7724,$1E16; 4 dc.w $42DB,$81A5,$105A,$2C95,$14A1,$1852,$81A5,$42DB dc.w $7E3C,$FF42,$FF91,$FF81,$FF89,$FF81,$FF42,$7E3C; 5 dc.w $00FF,$80BF,$E0FF,$D0FF,$AFFF,$F7EF,$2DFF,$07FF dc.w $0000,$E060,$F0F0,$F939,$BF9F,$F770,$7D1D,$0702; 6 dc.w $00FF,$32CB,$EF7F,$9BD9,$93BF,$CFFF,$1CF7,$00FF dc.w $0000,$7E7C,$FFFE,$FFE7,$F3D1,$DF9E,$DE88,$0000; 7 dc.w $1EF5,$74AF,$62DF,$C37E,$34EF,$3AD9,$24EB,$4C9B dc.w $1E14,$7626,$E242,$E362,$7726,$3E1C,$3C30,$7C2C; 8 dc.w $66DD,$E45D,$4AF5,$64AB,$38E7,$5CF3,$6ED9,$2EFD dc.w $E644,$E746,$7E6C,$7E30,$7830,$FC78,$6E4C,$2F2E; 9 dc.w $18A5,$245A,$52A5,$AD56,$9542,$5AB5,$245A,$18A5 dc.w $7E7E,$FFC3,$FF91,$FF81,$FF89,$FF81,$FFC3,$7E7E; 10 dc.w $00DF,$70AF,$DB7F,$CBFD,$04FF,$BAD7,$79FF,$00FF dc.w $3030,$7979,$FB89,$DF06,$8706,$FE7C,$FD00,$2000; 11 dc.w $80BF,$E07F,$F0DF,$27FC,$3BF7,$29FE,$EF7D,$86FF dc.w $C040,$E0C0,$F121,$B737,$3F1C,$3931,$EFCE,$C640; 12 dc.w $3CCB,$748B,$46A9,$E85F,$7CA3,$508F,$24DB,$4AB1 dc.w $3C18,$7624,$7674,$EE4C,$FC68,$7C38,$3C30,$7E24; 13 dc.w $44D1,$E51A,$52AD,$68B7,$32D9,$0CF1,$18E7,$08F7 dc.w $6E6E,$E742,$F362,$7A32,$3E1C,$0F0E,$1E12,$1E14; 14 dc.w $42DB,$81A5,$105A,$2C95,$14A1,$1852,$81A5,$42DB dc.w $7E3C,$FF42,$FF91,$FF81,$FF89,$FF81,$FF42,$7E3C; 15 dc.w $1AFF,$35FF,$19FF,$6CFF,$B4BF,$D7FF,$73FF,$20FF dc.w $1E0C,$3F1B,$3D30,$FCF4,$FCC4,$DF53,$F320,$3000; 16 dc.w $00FF,$C4F7,$7DFF,$AFFF,$73FF,$C6FF,$7CFF,$00FF dc.w $0000,$CE88,$FFDE,$FF73,$7322,$E6E4,$FE98,$0C00; 17 dc.w $36CD,$3BE6,$3FD0,$1CEB,$38D7,$10F7,$2CD3,$36ED dc.w $7624,$3B32,$3F1A,$1E08,$3C10,$3818,$3C08,$3E24; 18 dc.w $76AB,$E24F,$47D8,$7EB1,$0CFB,$06ED,$1EF5,$3CD3 dc.w $7622,$F373,$F7F2,$7E34,$3C08,$1E14,$1E14,$3C14; 19 dc.w $19A5,$245A,$52A5,$AD56,$9542,$5AB5,$245A,$19A5 dc.w $7E7E,$FFC3,$FF91,$FF81,$FF89,$FF81,$FFC3,$7E7E** light up appropriate icons on the control panel*IGREEN	EQU	%0000100000000000		;color familiesIBLUE	EQU	%0001100000000000		IRED	EQU	%0001000000000000IGOLD	EQU	%0001110000000000IGREENL	EQU	%00001000		;color familiesIBLUEL	EQU	%00011000		IREDL	EQU	%00010000IGOLDL	EQU	%00011100** weapon stuff*weapondigits:	dc.w	w1,w1b,w2,w2b,w3,w3b,w4,w4b,w5,w5b,w6,w6bweaponaddress:	dc.w	wa1,wa1b,wa2,wa2b,wa3,wa3b,wa4,wa4b,wa5,wa5b,wa6,wa6b	w1:		dc.w	IGREEN+234,IGREEN+235w1b:	dc.w	IGREEN+236,IGREEN+237w2:		dc.w	IGREEN+238,IGREEN+239w2b:	dc.w	IGREEN+240,IGREEN+241w3:		dc.w	IGREEN+242,IGREEN+243w3b:	dc.w	IGREEN+244,IGREEN+245w4:		dc.w	IGREEN+254,IGREEN+255w4b:	dc.w	IGREEN+256,IGREEN+257w5:		dc.w	IGREEN+250,IGREEN+251w5b:	dc.w	IGREEN+252,IGREEN+253w6:		dc.w	IGREEN+246,IGREEN+247w6b:	dc.w	IGREEN+248,IGREEN+249wa1:	dc.w	$800+(32*9)+7wa1b:	dc.w	$800+(32*10)+7wa2:	dc.w	$800+(32*11)+7wa2b:	dc.w	$800+(32*12)+7wa3:	dc.w	$800+(32*13)+7wa3b:	dc.w	$800+(32*14)+7wa4:	dc.w	$800+(32*15)+7wa4b	dc.w	$800+(32*16)+7wa5:	dc.w	$800+(32*17)+7wa5b	dc.w	$800+(32*18)+7wa6:	dc.w	$800+(32*19)+7wa6b	dc.w	$800+(32*20)+7** remote stuff*remotedigits:	dc.w	r1,r1b,r2,r2b,r3,r3b,r4,r4b,r5,r5b,r6,r6bremoteaddress:	dc.w	ra1,ra1b,ra2,ra2b,ra3,ra3b,ra4,ra4b,ra5,ra5b,ra6,ra6b	r1:		dc.w	IBLUE+258,IBLUE+259r1b:	dc.w	IBLUE+260,IBLUE+261r2:		dc.w	IBLUE+262,IBLUE+263r2b:	dc.w	IBLUE+264,IBLUE+265r3:		dc.w	IBLUE+266,IBLUE+267r3b:	dc.w	IBLUE+268,IBLUE+269r4:		dc.w	IBLUE+270,IBLUE+271r4b:	dc.w	IBLUE+272,IBLUE+273r5:		dc.w	IBLUE+274,IBLUE+275r5b:	dc.w	IBLUE+276,IBLUE+277r6:		dc.w	IBLUE+278,IBLUE+279r6b:	dc.w	IBLUE+280,IBLUE+281ra1:	dc.w	$800+(32*9)+21ra1b:	dc.w	$800+(32*10)+21ra2:	dc.w	$800+(32*11)+21ra2b:	dc.w	$800+(32*12)+21ra3:	dc.w	$800+(32*13)+21ra3b:	dc.w	$800+(32*14)+21ra4:	dc.w	$800+(32*15)+21ra4b	dc.w	$800+(32*16)+21ra5:	dc.w	$800+(32*17)+21ra5b	dc.w	$800+(32*18)+21ra6:	dc.w	$800+(32*19)+21ra6b	dc.w	$800+(32*20)+21** do it...*buildinventory:	phb		lda	#13	pha	plb	lda	#ForcedBlankOn			sta	INIDISP** first drop the password in weapfr.asm (page 4)*	lda	#4	pha	plb		lda	#<passwords			;source	sta	temp	lda	#>passwords	sta	temp+1	lda	sgivepassword	bpl	@doit	lda	#0@doit:;	lda	mapnumber	SET16	and	#$ff	asl a	asl a	asl a	clc		adc	temp	sta	temp	SET8	ldy	#2		lda	(temp),y	clc	adc	#128	sta	passwordarea	iny	lda	(temp),y	clc	adc	#128	sta	passwordarea+2	iny	lda	(temp),y	clc	adc	#128	sta	passwordarea+4	iny	lda	(temp),y	clc	adc	#128	sta	passwordarea+6		iny	lda	(temp),y	clc	adc	#128	sta	passwordarea+8		iny	lda	(temp),y	clc	adc	#128	sta	passwordarea+10	;	lda	#128;	sta	passwordarea;	sta	passwordarea+2;	sta	passwordarea+4;	sta	passwordarea+6;	sta	passwordarea+8;	sta	passwordarea+10	lda	#IREDL	sta	passwordarea+1	sta	passwordarea+3	sta	passwordarea+5	sta	passwordarea+7	sta	passwordarea+9	sta	passwordarea+11		stz	HDMAEN		; turn off h-dma		lda	#<$800+(32*24)+11		;destination	sta	VMADDL	lda	#>$800+(32*24)+11	sta	VMADDH		lda	#<passwordarea			;source	sta	$4302	lda	#>passwordarea	sta	$4303	lda	#13	sta	$4304			;source page		lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#12				; 6 characters	sta	$4305			; # of bytes low	lda	#0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	** 6 weapons*	lda	#13	pha	plb	SET16	lda	#IGREEN	sta	coloradd	SET8		stz	temp+6@weaponloop:	ldy	temp+6	lda	weaponcount,y	bne	@hasit@incweaponloop:	inc	temp+6	lda	temp+6	cmp	#6	bcc	@weaponloop	bra	@doremote@hasit:	sta	temp+7				;counter	tya	asl	a	asl	a	sta	temp+5	tay	lda	weapondigits,y	sta	tmp	iny	lda	weapondigits,y	sta	tmp+1	dey	lda	weaponaddress,y	sta	tmp+2	iny	lda	weaponaddress,y	sta	tmp+3		jsr	dumptwochars	jsr	drawdigits	ldy	temp+5	iny	iny	lda	weapondigits,y	sta	tmp	iny	lda	weapondigits,y	sta	tmp+1	dey	lda	weaponaddress,y	sta	tmp+2	iny	lda	weaponaddress,y	sta	tmp+3	jsr	dumptwochars	bra	@incweaponloop** 6 remotes*@doremote:	SET16	lda	#IBLUE	sta	coloradd	SET8	stz	temp+6@remoteloop:	ldy	temp+6	lda	remotecount,y	bne	@hasit3@incremoteloop:	inc	temp+6	lda	temp+6	cmp	#6	bcc	@remoteloop	plb	rtl@hasit3:	sta	temp+7	tya	asl	a	asl	a	sta	temp+5	tay	lda	remotedigits,y	sta	tmp	iny	lda	remotedigits,y	sta	tmp+1	dey	lda	remoteaddress,y	sta	tmp+2	iny	lda	remoteaddress,y	sta	tmp+3		jsr	dumptwochars	jsr	drawdigits		ldy	temp+5	iny	iny	lda	remotedigits,y	sta	tmp	iny	lda	remotedigits,y	sta	tmp+1	dey	lda	remoteaddress,y	sta	tmp+2	iny	lda	remoteaddress,y	sta	tmp+3	jsr	dumptwochars		bra	@incremoteloop** drop chars on inv screen*dumptwochars:	stz	HDMAEN		; turn off h-dma	lda	(tmp+2)		;dest	sta	VMADDL	ldy	#1	lda	(tmp+2),y	sta	VMADDH	lda	tmp			;source	sta	$4302	lda	tmp+1	sta	$4303dumpdigitchars:	lda	#13	sta	$4304			;source page		lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#4	sta	$4305			; # of bytes low	lda	#0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts** draw accompanying digits*drawdigits:** get the digit count*	lda	temp+7	jsr	inumtoascii	SET16	lda	temp	clc		adc	coloradd	sta	temp		lda	temp+2		clc	adc	coloradd	sta	temp+2	SET8		lda	#<temp	sta	$4302	lda	#>temp	sta	$4303** extract new destination spot for digits*	lda	(tmp+2)	sta	tmp+6	ldy	#1	lda	(tmp+2),y	sta	tmp+7	lda	tmp+6	clc	adc	#2	sta	tmp+6	bcc	@noinc	inc	tmp+7@noinc:	lda	tmp+6	sta	VMADDL	lda	tmp+7	sta	VMADDH	jmp	dumpdigitchars** number to 2 digit ascii*		acc has number*		temp/temp+1 set on output*inumtoascii:	ldy	#0			;repeated subtraction@loop:	cmp	#10	bcc	@done	sec		sbc	#10	iny	jmp	@loop@done:	iny	sty	temp	inc	a	sta	temp+2		lda	temp	clc	adc	#127	sta	temp	lda	temp+2		clc	adc	#127	sta	temp+2		stz	temp+1		;clear high	stz	temp+3	rts	** storage box and resulting boom with item*		PIClogic has type*storagebox:	lda	#1				;synch and no remove...	sta	PICscroll,x		lda	#13				;pics are here..	sta	PICbank,x	;	lda	#3				;size for los;	sta	PICsize,x	;	lda	#1				;box strength;	sta	PIChealth,x		stz	PICtype,x		ldy	#0				;hope there is a slot open...@looper:	lda	dmabox0,y	beq	@empty	iny	cpy	#3	bcc	@looper						;nope...exit	jml	TSKcancel@empty:	lda	#1	sta	dmabox0,y		;slot is occupied	lda	PIClogic,x	sta	itemin0,y		;with what	tya		sta	PICanim,x		;save slot	stz	PICvomit,x	jsl	drawitem	jsl	TSKsuspend** check for offscreen*	lda	PICxhi,x	beq	@seey	lda	PICxlo,x	cmp	#64	bcc	@seey	cmp	#200	bcc	@offscreen@seey:	lda	PICyhi,x	beq	@fine	lda	PICylo,x	cmp	#64	bcc	@fine	cmp	#200	bcs	@fine@offscreen:	lda	PICanim,x			;clear the slot	tay	lda	#0	sta	dmabox0,y	sta	itemin0,y	jml	TSKcancel		** else continue....*@fine:	lda	PICvomit,x	beq	@lookforpickup** else explode...*	lda	PICanim,x			;clear the slot	tay	lda	#0	sta	dmabox0,y	sta	itemin0,y		lda	#3	sta	PICscroll,x	lda	#7	sta	TSKbank,x	lda	#13	pha	jml	longexplode** see if bob runs by*@lookforpickup:	lda	status	cmp	#walking			;dead or dying	bcc	@notyet	jsl	pickupitem	bcc	@notyet	lda	#SFXpickup			;was pickup but sound fucked up!	jsl	soundeffects	jsl	powerupbob@notyet:	rtl** set item type and schedule back item*;setupitem:;	stz	PICtype,x		;allow bob to pickup and los to ignore;	rts	** bob see's if item is below him*pickupitem:	lda	PICxhi,x	ora	PICyhi,x	bne	@noget		lda	PICxlo,x	sec	sbc	#12	cmp	bobxpos	bcs	@noget	clc	adc	#24	cmp	bobxpos	bcc	@noget		lda	PICylo,x	sec	sbc	#28	cmp	bobypos	bcs	@noget	clc	adc	#56	cmp	bobypos	bcc	@noget			inc	PICvomit,x		sec	rtl@noget:	clc	rtl** power up bob with the item he found*weaponadd:	dc.b 	25,25,50,20,10,3remoteadd:	dc.b	1,1,3,3,3,1remotemax:	dc.b	9,9,9,9,9,9		powerupbob:	phb	lda	#13	pha	plb	lda	PIClogic,x	bne	@others	lda	lives	cmp	#99	beq	@maxlives	inc	a@maxlives:	sta	lives	plb	rtl@others:	cmp	#1	bne	@notrepair	lda	#maxstrength	sta	strength	lda	#SFXPOWERUP	jsl	soundeffects	plb	rtl@notrepair:	cmp	#8	bcs	@tryutility	sec	sbc	#2	tay	lda	weaponadd,y	sta	temp	lda	weaponcount,y		clc	adc	temp	cmp	#100	bcc	@nowrap	lda	#99@nowrap:	sta	weaponcount,y	cpy	weapon				;change to weapon only if better	bcc	@ok	sty	weapon	@ok:	plb	rtl@tryutility:@tryremote:	sec	sbc	#14	tay	lda	remoteadd,y	sta	temp	lda	remotecount,y	clc	adc	temp	sta	remotecount,y	sty	remote	@ok2:	lda	remotecount,y	cmp	remotemax,y	bcc	@fine	lda	remotemax,y	sta	remotecount,y@fine:	plb	rtl** draw the pickup item with correct pallete*		acc has which one*drawitem:	phb	lda	#13	pha	plb	lda	PIClogic,x	tay	lda	boxpalletes,y	sta	PICcolor,x		lda	PICanim,x	bne	@try2	jsl	PICput	dw	item0	plb	rtl@try2:	cmp	#1		bne	@try3	jsl	PICput	dw	item1	plb	rtl@try3:	jsl	PICput	dw	item2	plb	rtl	** dma in the proper box contents*boxdest:	dc.w	$4000+(16*16),$4000+(32*16)	dc.w	$4000+(48*16),$4000+(64*16)	dc.w	$4000+(40*16),$4000+(56*16)boxsource:;	dc.w	itemobj+(0*32),itemobj+(2*32)		;juice	dc.w	itemobj+(32*32),itemobj+(34*32)		;1up	dc.w	itemobj+(4*32),itemobj+(6*32)		;repair	dc.w	itemobj+(8*32),itemobj+(10*32)		;ammo 1	dc.w	itemobj+(12*32),itemobj+(14*32)		;ammo splitter	dc.w	itemobj+(16*32),itemobj+(18*32)		;flame	dc.w	itemobj+(28*32),itemobj+(30*32)		;missile	dc.w	itemobj+(24*32),itemobj+(26*32)		;beam	dc.w	itemobj+(20*32),itemobj+(22*32)		;sonic	dc.w	itemobj+(32*32),itemobj+(34*32)		;1up	dc.w	itemobj+(36*32),itemobj+(38*32)		;	dc.w	itemobj+(40*32),itemobj+(42*32)		;	dc.w	itemobj+(44*32),itemobj+(46*32)		;	dc.w	itemobj+(48*32),itemobj+(50*32)		;	dc.w	itemobj+(52*32),itemobj+(54*32)		;	dc.w	itemobj+(56*32),itemobj+(58*32)		;light remote	dc.w	itemobj+(60*32),itemobj+(62*32)		;shield remote	dc.w	itemobj+(64*32),itemobj+(66*32)		;spring remote	dc.w	itemobj+(68*32),itemobj+(70*32)		;parachute remote	dc.w	itemobj+(72*32),itemobj+(74*32)		;copter remote	dc.w	itemobj+(76*32),itemobj+(78*32)		;bezerker remote	boxpalletes:	dc.b	7,2					;what color man...	dc.b	7,7,6,2,7,7	dc.b	0,2,7,0,0,0	dc.b	0,0,0,0,0,0	dc.b	2,2,2,2,2,2	boxdma:	phb	lda	#13	pha	plb		lda	dmabox0	beq	@nobox0	lda	itemin0	bmi	@nobox0	tay	lda	#1	jsr	uploaditem	lda	#-1	sta	itemin0@nobox0:	lda	dmabox1	beq	@nobox1	lda	itemin1	bmi	@nobox1	tay	lda	#2	jsr	uploaditem	lda	#-1	sta	itemin1@nobox1:	lda	dmabox2	beq	@nobox2	lda	itemin2	bmi	@nobox2	tay	lda	#3	jsr	uploaditem	lda	#-1	sta	itemin2@nobox2:	plb	rtl	** dma the item...*		acc has 1 2 or 3 for box number*		y has item to upload*uploaditem:	sty	temp	dec	a				;extract destination	asl	a	asl	a	tay	lda	boxdest,y	sta	tmp	lda	boxdest+1,y	sta	tmp+1	lda	boxdest+2,y	sta	tmp+2	lda	boxdest+3,y	sta	tmp+3		lda	temp			;and source	asl	a	asl	a	tay		lda	boxsource,y	sta	tmp+4	lda	boxsource+1,y	sta	tmp+5	lda	boxsource+2,y	sta	tmp+6	lda	boxsource+3,y	sta	tmp+7	** upload top half*	lda tmp				;dest	sta VMADDL	lda tmp+1		sta VMADDH			lda	tmp+4			;source	sta	$4302	lda	tmp+5	sta	$4303		stz	HDMAEN			; turn off h-dma	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#19	sta	$4304			; bank #	lda	#(32*2) 	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN			; turn on dma	** and now the bottom half*	lda tmp+2			;dest	sta VMADDL	lda tmp+3				sta VMADDH			lda	tmp+6			;source	sta	$4302	lda	tmp+7	sta	$4303		stz	HDMAEN			; turn off h-dma	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#19	sta	$4304			; bank #	lda	#(32*2) 	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	@nobox0:	rts	** item frames*item0: dc.b $01 dc.b $48,$C8,$10item1: dc.b $01 dc.b $48,$C8,$30item2: dc.b $01 dc.b $48,$C8,$28** Escape from goth vehicle*bigship:	lda	#44	jsl	PICysub		lda	#1	sta	PICscroll,x	sta	PICprior,x		lda	#3	sta	PICcolor,x		lda	#13	sta	PICbank,x		stx	whichbigship		lda	#type_generic	sta	PICtype,x		jsl	TSKsuspend** which world....*	lda	world	cmp	#2	bne	@cadd	jsl	PICput					dw	chev0	bra	@drawn@cadd:	cmp	#1	bne	@vette		lda	status				;make engine chug...	cmp	#leavegoth		beq	@useclock	lda	#0	beq	@shutup@useclock:	lda	TSKclock	and	#7@shutup:	asl	a	tay	lda	vetframes,y	sta	tmp	lda	vetframes+1,y	sta	tmp+1	jsl	PICput2	bra	@drawn@vette:	lda	status	cmp	#leavegoth	bne	@one	lda	takeoff			;give engines time to rev up	cmp	#TAKEOFFTIME	bcc	@one	lda	TSKclock	and	#2	bne	@one@two:	jsl	PICput	dw	caddframe1	bra	@drawn@one:	jsl	PICput	dw	caddframe2	@drawn:** has the car taken off?*	lda	takeoff	bne	@stay		lda	PICxhi,x	bne	@stay		lda	PICxlo,x	cmp	#128	bcc	@stay	cmp	#132	bcs	@stay	;	lda	PICylo,x;	cmp	#102;	bcc	@stay;	cmp	#104+2;	bcs	@stay	lda	#faceright	sta	walkdir		inc	takeoff	lda	#leavegoth	sta	status	rtl	** make the fucker float*@stay:	lda	TSKclock	and	#7	cmp	#7	bne	@nosound	lda	#SFXCARENGINE	jsl	soundeffects@nosound:	lda	PICcount,x	inc	a	sta	PICcount,x	and	#7	tay	lda	shakevals,y	jsl	PICyadd	rtlshakevals:	dc.b	-1,1,0,1,-1,0,1,-1	** process the scene between bob and his dad*textforkeys:	dc.b 1,26	dc.w snappy1	;blah	dc.b 2,22	dc.w snappy1	;blah	dc.b 3,28	dc.w snappy1	;11pm on dot	dc.b 0,2		;dramatic pause	dc.w snappy1		dc.b 6,40	dc.w snappy4	;yeah	dc.b 0,2		;dramatic pause	dc.w snappy1		dc.b 2,20	dc.w snappy1	;blah	dc.b 5,35	dc.w snappy1	;not a scratch		dc.b 0,10	dc.w snappy1	;pasue	dc.b 4,35			dc.w snappy1	;or never drive again	dc.b 0,15		;22	dc.w snappy1	;blah	dc.b 26,38	dc.w snappy10	;psych	;9	look at player	dc.b 0,12	dc.w snappy11	;blah		dc.b 0,26	dc.w snappy11	;blah	;11 drive off	dc.b 0,26	dc.w snappy11	;blah		dc.b 0,26	dc.w snappy11	;blahsnappy1:	dc.b	00,00,00,00,00,00,00,00,00,00	dc.b	00,00,00,00,00,00,00,00,00,00	dc.b	00,00,00,00,00,00,00,00,00,00snappy3:	dc.b	00,00,00,00,00,00,00,00,00,00	dc.b	00,00,00,00,00,00,00,00,00,00	dc.b	00,00,00,00,00,00,00,00snappy4:	dc.b	01,02,02,02,02,02,02,02,02,02	dc.b	02,02,02,02,02,02,02,02,02,02	dc.b	02,02,02,02,02,02,02,02,02,02	dc.b	02,02,02,02,02,02,01,00,00,00snappy10:	dc.b	01,15,16,16,16,16,16,16,16,16	dc.b	16,16,16,16,16,16,16,16,16,16	dc.b	16,16,16,15,15,14,14,14,14,14	dc.b	14,14,14,14,14,14,14,14,14,14snappy11:	dc.b	20,20,20,20,20,20,20,20,20,20	dc.b	20,20,20,20,20,20,20,20,20,20	dc.b	20,20,20,20,20,20processdad:	phb	lda	#13	pha	plb		lda	introcount			;after speech is done....	cmp	#12	bcc	@nodriveoff	lda	#8					;bob screams off....	jsl	PICxadd	lda	#4	sta	PICmoveh,x@nodriveoff:	lda	introcount			;extract correct timing vars...				asl	a	asl	a	tay	lda	textforkeys+1,y	sta	introtimer	sec	sbc	#10	sta	bubbleoff			lda	fivetimer			;five cycle timer	inc	a	sta	fivetimer	cmp	#4	bne	@noinc		stz	fivetimer			;count through how many cycles needed...				lda	bubbleon	inc	a	sta	bubbleon	cmp	introtimer	bcc	@noinc	stz	bubbleon	inc	introcount@noinc:	lda	introcount			;get correct text	asl	a	asl	a	tay	lda	textforkeys,y	sta	termtext;	lda	introcount			;and the correct bob head;	asl	a;	asl a;	tay	lda	textforkeys+2,y	sta	tmp	lda	textforkeys+3,y	sta	tmp+1	ldy	bubbleon	lda	(tmp),y	sta	pictureoffset	plb	rtl** bob's dad*dadwave:	dc.b	1,1,0,1,1,1,0,0,0,1,0,1,1,0,0,0	bobsdad:	lda	#128	sta	PICxlo,x	lda	#105	sta	PICylo,x		stz	PICcolor,x	lda	#31				;rezobj.asm	sta	PICbank,x		jsl	TSKsuspend	jsl	PICput	dw	dadframe10		lda	termtext	cmp	#3	bcc	@noinc	cmp	#6	bcs	@noinc			lda	TSKclock		;wave at me daddy-o	and	#1	cmp	#1	bne	@noinc	lda	PICanim,x	inc	a	and	#15	sta	PICanim,x@noinc:	lda	PICanim,x	tay	lda	dadwave,y	beq	@handup	jsl	PICput	dw	dadframe1	bra	@handdone@handup:	jsl	PICput	dw	dadframe0@handdone:	lda	staticintro	bne	@carryon	jml	TSKcancel@carryon:	rtl** date stuff*takeoffglasses:	dc.b	55,55,55,55,55,55,54,54,53,53,52,52,51,51,50,50,49,49,48,48,47,47	dc.b	46,46,46,46,46,46,46,46,46,46,46,46,46,99	listentoyap:	dc.b	46,46,46,56,56,56,56,56,56,56,56,15,14,21,21,21,21,21,21,21,21	dc.b	21,21,21,15	dc.b	16,16,16,28,28,29,29,29,29,29,29,29,99   	watchsurfer:	dc.b	29,29,29,29,29,29,16,16,16,16,16,16,15,14,21,21,21,21,21,21,21,21,21	dc.b	14,15,16,17,17,99putonshades:	dc.b	17,17,17,17,17,17,17,17,17,17	dc.b	17,17,45,45,45,45,45,46,46,47	dc.b	47,48,48,49,49,50,50,51,51,52	dc.b	52,52,52,52,52,52,52,52,52,52	dc.b	53,53,54,54,55,55,55,55,55,99** process bob's date*processdate:	phb	lda	#13	pha	plb	lda	introcount	bne	@removeshades** first wheel into the diner*	lda	#43+12	sta	pictureoffset		lda	PICxhi,x	bne	@faster	lda	PICxlo,x	cmp	#120	bcs	@slower@faster:	lda	#2	bra	@wheelin@slower:	lda	#1@wheelin:	jsl	PICxadd	lda	PICxhi,x	bne	@noton	lda	PICxlo,x	cmp	#140	bcc	@noton	inc	introcount	stz	datecounter	stz	fivetimer@noton:	plb	rtl** now bob takes his shades*@removeshades:	cmp	#1	bne	@yapping	lda	fivetimer			;five cycle timer	inc	a	sta	fivetimer	cmp	#textspeed	bne	@cr1	stz	fivetimer	lda	datecounter	inc a	sta	datecounter@cr1:	ldy	datecounter	lda	takeoffglasses,y	cmp	#99	bne	@noinc	lda	#46					;ediot	sta	pictureoffset		inc	introcount	stz	fivetimer	stz	datecounter	plb	rtl@noinc:	sta	pictureoffset	plb	rtl	** now listen to yapping*@yapping:	cmp	#2	bne	@watchbabe	lda	fivetimer			;five cycle timer	inc	a	sta	fivetimer	cmp	#textspeed	bne	@cr2	stz	fivetimer	lda	datecounter	inc a	sta	datecounter@cr2:	ldy datecounter	lda	listentoyap,y	cmp	#99	bcc	@noinc2	inc	introcount	stz	fivetimer	stz	datecounter	plb	rtl@noinc2:	sta	pictureoffset	plb	rtl	** and watch surfer babe go by...*@watchbabe:	cmp	#3	bne	@putonshades	lda	fivetimer			;five cycle timer	inc	a	sta	fivetimer	cmp	#textspeed	bne	@cr3	stz	fivetimer	lda	datecounter	inc a	sta	datecounter@cr3:	ldy datecounter	lda	watchsurfer,y	cmp	#99	bcc	@noinc3	inc	introcount	stz	fivetimer	stz	datecounter	plb	rtl@noinc3:	sta	pictureoffset	plb	rtl	** put shades back on*@putonshades:	cmp	#4	bne	@chasesurfer	lda	fivetimer			;five cycle timer	inc	a	sta	fivetimer	cmp	#textspeed	bne	@cr4	stz	fivetimer	lda	datecounter	inc a	sta	datecounter@cr4:	ldy datecounter	lda	putonshades,y	cmp	#99	bcc	@noinc4	inc	introcount	stz	fivetimer	stz	datecounter	plb	rtl@noinc4:	sta	pictureoffset	plb	rtl	** now wait for time to chase surfer*@chasesurfer:	lda	#55	sta	pictureoffset	lda	#8				;scream off	jsl	PICxadd	lda	#4	sta	PICmoveh,x@wait:	lda	PICxhi,x	cmp	#2	bne	@done@notyet:	inc	introcount@done:	plb	rtl** bob's date*datemouth:	dc.b	1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0	bobsdate:	jsl	PICput	dw	dadframe2		lda	#184	sta	PICxlo,x	lda	#113	sta	PICylo,x		lda	#2	sta	PICcolor,x	lda	#31				;rezobj.asm	sta	PICbank,x		jsl	TSKsuspend	lda	introcount	cmp	#2	bcc	@carryon		lda	TSKclock		;nag nag nag	and	#1	cmp	#1	bne	@noinc	lda	PICanim,x	inc	a	and	#15	sta	PICanim,x@noinc:	lda	PICanim,x	tay	lda	datemouth,y	sta	termtext	bne	@handup	jsl	PICput	dw	dadframe2	bra	@handdone@handup:	jsl	PICput	dw	dadframe3@handdone:	lda	staticintro	bne	@carryon	jml	TSKcancel@carryon:	rtl** bob's surfing chick*bobsbabe:	lda	#31	sta	PICbank,x	jsl	PICput	dw	dadframe4	lda	#4	sta	PICcolor,x	lda	#-1	sta	PICxhi,x	lda	#220	sta	PICxlo,x	lda	#140	sta	PICylo,x	jsl	TSKsuspend		lda	PICxhi,x	cmp	#1	bne	@alive	lda	PICxlo,x	cmp	#48	bcc	@alive	jml	TSKcancel	@alive:	lda	introcount	cmp	#3	bcs	@rollon			;wait till bob stops	rtl@rollon	lda	#4					;roll-on	jsl	PICxadd	lda	#2	sta	PICmoveh,x@carryon:	rtl** bob's car for intro*dadchevy:	lda	#3	sta	PICcolor,x	sta	PICprior,x		lda	staticintro	bne	@carryon	jml	TSKcancel@carryon:	jsr	attachtobob	jsl	PICput	dw	chev0	rtl** dad's text driver*introtextpos:	dc.b	134,70			;dad	dc.b	184,142			;bob	dc.b	60,70			;bad dateyaptext:	dc.b	8,8,8,8,0,0,22,22,22,0,1,1,0,0,1,1	dc.b	1,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0	datetext:	lda	#0	sta	PICcolor,x		lda	#31	sta	PICbank,x		stz	PICflag,x		jsl	TSKsuspend	lda	introcount	cmp	#5	bcc	@carryon	jml	TSKcancel@carryon:	stz	PICadrLo,x	stz	PICadrHi,x		lda	introcount	cmp	#2	bne	@notstarted	lda	TSKclock	and	#7	cmp	#7	bne	@noinc	inc	PICflag,x@noinc:	lda	PICflag,x	and	#31	tay	lda	yaptext,y	sta	temp	jsr	drawgametext2		lda	#181	sta	PICxlo,x	lda	#76	sta	PICylo,x	rtl@notstarted:	cmp	#4	bne	@notbob;	lda	#7;	sta	PICcolor,x	lda	#136	sta	PICxlo,x	lda	#142	sta	PICylo,x		lda	datecounter	cmp	#1	bcc	@notbob	cmp	#10	bcs	@try2	lda	#18	bra	@settext@try2:	cmp	#30	bcc	@notbob	cmp	#40	bcs	@notbob	lda	#26@settext:	sta	temp	jsr	drawgametext2@notbob:	rtl	** dad yaps at bob*dadtext:	lda	#0	sta	PICcolor,x		lda	#31				;game text in rezobj.asm	sta	PICbank,x		jsl	TSKsuspend	lda	staticintro	bne	@carryon	jml	TSKcancel@carryon:	lda	termtext	jsr	drawgametext		lda	termtext	cmp	#6	bcc	@dad	ldy	#2	bra	@getpos@dad:	ldy	#0@getpos:	lda	introtextpos,y	sta	PICxlo,x	lda	introtextpos+1,y	sta	PICylo,x	rtl** draw the game text*drawgametext:	sta	temp	cmp	#4				;double	beq	drawgametext2	lda	bubbleon	cmp	bubbleoff	bcc	drawgametext2	stz	PICadrLo,x	stz	PICadrHi,x	rtsdrawgametext2:	lda	temp	asl	a	tay	lda	allgametext,y	sta	tmp	lda	allgametext+1,y	sta	tmp+1	jsl	PICput2	rts	teleporttext:	asl	a	tay	phb	lda	#13	pha	plb	lda	allgametext,y	sta	tmp	lda	allgametext+1,y	sta	tmp+1	jsl	PICput2	plb	rtl	allgametext:		;text,speaaker unused	dc.w	gametext0	dc.w	gametext1	dc.w	gametext2	dc.w	gametext3	dc.w	gametext4	dc.w	gametext5	dc.w	gametext6	dc.w	gametext7	dc.w	gametext8	dc.w	gametext9	dc.w	gametext10	dc.w	gametext11	dc.w	gametext12	dc.w	gametext13	dc.w	gametext14	dc.w	gametext15	dc.w	gametext16	dc.w	gametext17	dc.w	gametext18	dc.w	gametext19	dc.w	gametext20	dc.w	gametext21	dc.w	gametext22	dc.w	gametext23	dc.w	gametext24	dc.w	gametext25	dc.w	gametext26ingametalk:	dc.w	gametext27	dc.w	gametext28	dc.w	gametext29	dc.w	gametext30	dc.w	gametext31	dc.w	gametext32	dc.w	gametext33	dc.w	gametext34	dc.w	gametext35	dc.w	gametext36	dc.w	gametext37	dc.w	gametext38	dc.w	gametext39	dc.w	gametext40	dc.w	gametext41	dc.w	gametext42	dc.w	gametext43	dc.w	gametext44	dc.w	gametext45	dc.w	gametext46	dc.w	gametext47	dc.w	gametext48	dc.w	gametext49	dc.w	gametext50	dc.w	gametext51	dc.w	gametext52	dc.w	gametext53	dc.w	gametext54	dc.w	gametext55	dc.w	gametext56	dc.w	gametext57	dc.w	gametext58	dc.w	gametext59	dc.w	gametext60	dc.w	gametext61	dc.w	gametext62	dc.w	gametext63	dc.w	gametext64	dc.w	gametext65	dc.w	gametext66	dc.w	gametext67	dc.w	gametext68	dc.w	gametext69	***********************************************************schedule all intro tasks here********************************************************** schedule tasks for bob's dad*scheduledad:	lda	#13	pha	plb		stz	introtimer	stz	fivetimer	stz	introcount	stz	pictureoffset		lda	#type_enemy			;bob's car	jsl	TSKschedule	dw	dadchevy	jsr	setupintrotask	lda	#type_enemy			;and the exhaust	jsl	TSKschedule	dw	dadexhaust	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	dadtext	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	bobsdad	jsr	setupintrotask		lda	#0	pha	plb		rtl** schedule tasks for bob's date*scheduledate:	lda	#13	pha	plb		stz	introtimer	stz	fivetimer	stz	introcount	stz	pictureoffset		lda	#type_enemy			;bob's car	jsl	TSKschedule	dw	dadchevy	jsr	setupintrotask	lda	#type_enemy			;and the exhaust	jsl	TSKschedule	dw	dadexhaust	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	datetext	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	bobsbabe	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	bobsdate	jsr	setupintrotask		lda	#0	pha	plb	rtl** introduction necessary tasks*	scheduleintro:	lda	#13	pha	plb		lda	#type_enemy			;text balloon	jsl	TSKschedule	dw	speechballoon	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	lubesign	jsr	setupintrotask	lda	#type_enemy			;bob's car	jsl	TSKschedule	dw	chevy	jsr	setupintrotask	lda	#type_enemy			;and the exhaust	jsl	TSKschedule	dw	funnyexhaust	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	stretchneck1	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	stretchneck2	jsr	setupintrotask	lda	#0	pha	plb		rtl	** schedule tasks for corvette runs out of gas 1-2*scheduleintro2:	lda	#13	pha	plb		lda	#type_enemy			;text balloon	jsl	TSKschedule	dw	speechballoon	jsr	setupintrotask		lda	#type_enemy			;bob's car	jsl	TSKschedule	dw	corvette	jsr	setupintrotask		lda	#0	pha	plb	rtl	** caddy falls apart*scheduleintro3:	stz	adamcount				stz	dirtymok		lda	#13	pha	plb		lda	#type_enemy			;text balloon	jsl	TSKschedule	dw	speechballoon	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	caddypieces			;pieces of bob's car	jsr	setupintrotask		lda	#type_enemy			;bob's car	jsl	TSKschedule	dw	caddy	jsr	setupintrotask	lda	#type_enemy			;bob's caddy chair	jsl	TSKschedule	dw	caddychair	jsr	setupintrotask		lda	#type_enemy	jsl	TSKschedule	dw	evilrock			;rock that ends it all	jsr	setupintrotask	lda	#0	pha	plb	rtl	** end animation*scheduleintro4:	lda	#13	pha	plb		lda	#type_enemy			;text balloon	jsl	TSKschedule	dw	speechballoon	jsr	setupintrotask		lda	#type_enemy			;bob's car	jsl	TSKschedule	dw	chevy	jsr	setupintrotask	lda	#type_enemy			;and the exhaust	jsl	TSKschedule	dw	funnyexhaust	jsr	setupintrotask	lda	#0	pha	plb	rtl	** schedule the ending*scheduleending:	lda	#13	pha	plb		lda	#type_enemy			;the end text 	jsl	TSKschedule	dw	endlogo	jsr	setupintrotask		lda	#type_enemy			;babe	jsl	TSKschedule	dw	enddate	jsr	setupintrotask	stz	dropcar		lda	#type_enemy			;and the car	jsl	TSKschedule	dw	endcar	jsr	setupintrotask	lda	#type_enemy			;her board	jsl	TSKschedule	dw	endboard	jsr	setupintrotask		lda	#0	pha	plb	rtl** pass necessary vars*setupintrotask:	tay	lda	#13	sta	TSKbank,y	sta	PICbank,y@fuckit:	rts** then ending stuff*** end car*endcar:	lda	#3	sta	PICcolor,x	lda	#31	sta	PICbank,x	lda	#155	sta	PICxlo,x	lda	#167	sta	PICylo,x	jsl	PICput	dw	dadframe8	jsl	TSKsuspend		lda	PICyhi,x	cmp	#2	beq	@off	lda	staticintro	bne	@carryon@off:	jml	TSKcancel@carryon:	bra	shakeitall		** end board*endboard:	lda	#4	sta	PICcolor,x	lda	#31	sta	PICbank,x	lda	#155	sta	PICxlo,x	lda	#167	sta	PICylo,x	jsl	PICput	dw	dadframe9	jsl	TSKsuspend		lda	PICyhi,x	cmp	#2	beq	@off	lda	staticintro	bne	@carryon@off	jml	TSKcancel@carryon:shakeitall:	lda	dropcar	cmp	#60	bcc	@nodrop	lda	#16	jsl	PICyadd	rtl@nodrop:	lda	TSKclock	and	#1	bne	@noshake	lda	PICcount,x	inc	a	sta	PICcount,x	and	#7	tay	lda	shakevals,y	jsl	PICyadd@noshake:	rtl		** end logo*endlogo:	lda	#1	sta	PICprior,x	lda	#6	sta	PICcolor,x	lda	#31	sta	PICbank,x		lda	#1	sta	PICyhi,x	lda	#136	sta	PICxlo,x	lda	#24	sta	PICylo,x	jsl	TSKsuspend	jsl	PICput	dw	dadframe7		lda	staticintro	bne	@carryon	jml	TSKcancel@carryon:	lda	PICyhi,x	bne	@gogo	lda	PICylo,x	cmp	#120	beq	@down@gogo:	lda	#-1	jsl	PICyadd	rtl@down:	inc	dropcar	rtl		** end date*enddate:	lda	#4	sta	PICcolor,x	lda	#31	sta	PICbank,x		lda	staticintro	bne	@carryon	jml	TSKcancel@carryon:	lda	#90	sta	PICxlo,x	lda	#84	sta	PICylo,x	jsl	PICput	dw	dadframe6	rtl		entermessage:	lda	#134	sta	PICxlo,x	lda	#80	sta	PICylo,x	lda	#2	sta	PICcolor,x		lda	#13	sta	PICbank,x		jsl	TSKSuspend	lda	passwordstage	bne	@mess1	lda	#160	sta	PICxlo,x	lda	#110	sta	PICylo,x	jsl	PICput	dw	chooseentry	bra	@exit@mess1:	lda	#134	sta	PICxlo,x	lda	#80	sta	PICylo,x	jsl	PICput	dw	sentermessage@exit:	lda	enterpassword	beq	@endit	rtl@endit:	jml	TSKcancel	invalidmessage:	lda	#134	sta	PICxlo,x	lda	#170	sta	PICylo,x	lda	#2	sta	PICcolor,x	lda	#13	sta	PICbank,x		jsl	TSKsuspend		lda	invalidpass	bne	@showmess@nobother:	stz	PICadrLo,x	stz	PICadrhi,x	bra	@exit:@showmess:	lda	TSKclock	and	#4	cmp	#4	bne	@nobother	jsl	PICput	dw	sinvalidmessage@exit:	lda	enterpassword	beq	@endit	rtl@endit:	jml	TSKcancel	nextmessage:	lda	#134	sta	PICxlo,x	lda	#80	sta	PICylo,x	lda	#2	sta	PICcolor,x	lda	#13	sta	PICbank,x	jsl	TSKsuspend	jsl	PICput	dw	nextpassword	lda	enterpassword	beq	@endit	rtl@endit:	jml	TSKcancel	sentermessage:		;enter password dc.b $0C dc.b $94,$D0,$47 dc.b $AA,$80,$6C dc.b $9A,$80,$6A dc.b $8A,$80,$68 dc.b $C6,$80,$66 dc.b $D6,$80,$64 dc.b $E6,$80,$62 dc.b $F6,$80,$60 dc.b $8C,$D0,$46 dc.b $C4,$D0,$44 dc.b $D4,$D0,$42 dc.b $E4,$D0,$40chooseentry:		;choose entry dc.b $0F dc.b $2E,$E1,$EE dc.b $1E,$E1,$EC dc.b $0E,$E1,$CE dc.b $42,$E1,$CC dc.b $D2,$E0,$4E dc.b $DA,$E0,$4D dc.b $EA,$E0,$4B dc.b $FA,$E0,$49 dc.b $A8,$90,$EC dc.b $98,$90,$EA dc.b $88,$90,$E8 dc.b $F8,$90,$E0 dc.b $E8,$90,$E2 dc.b $D8,$90,$E4 dc.b $C8,$90,$E6sinvalidmessage:		;invalid dc.b $0D dc.b $A5,$D0,$2E dc.b $95,$D0,$2C dc.b $85,$D0,$2A dc.b $CB,$D0,$28 dc.b $DB,$D0,$26 dc.b $EB,$D0,$24 dc.b $AA,$80,$6C dc.b $9A,$80,$6A dc.b $8A,$80,$68 dc.b $C6,$80,$66 dc.b $D6,$80,$64 dc.b $E6,$80,$62 dc.b $F6,$80,$60nextpassword:				;next password dc.b $0B dc.b $10,$D0,$5A dc.b $00,$D0,$58 dc.b $E0,$D0,$49 dc.b $D0,$D0,$4B dc.b $AA,$80,$6C dc.b $9A,$80,$6A dc.b $8A,$80,$68 dc.b $C6,$80,$66 dc.b $D6,$80,$64 dc.b $E6,$80,$62 dc.b $F6,$80,$60