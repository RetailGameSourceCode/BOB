** light up appropriate icons on the control panel*IGREEN	EQU	%0000100000000000		;color familiesIBLUE	EQU	%0001100000000000		IRED	EQU	%0001000000000000IGOLD	EQU	%0001110000000000** weapon stuff*weapondigits:	dc.w	w1,w1b,w2,w2b,w3,w3b,w4,w4b,w5,w5b,w6,w6bweaponaddress:	dc.w	wa1,wa1b,wa2,wa2b,wa3,wa3b,wa4,wa4b,wa5,wa5b,wa6,wa6b	w1:		dc.w	IGREEN+234,IGREEN+235w1b:	dc.w	IGREEN+236,IGREEN+237w2:		dc.w	IGREEN+238,IGREEN+239w2b:	dc.w	IGREEN+240,IGREEN+241w3:		dc.w	IGREEN+242,IGREEN+243w3b:	dc.w	IGREEN+244,IGREEN+245w4:		dc.w	IGREEN+254,IGREEN+255w4b:	dc.w	IGREEN+256,IGREEN+257w5:		dc.w	IGREEN+250,IGREEN+251w5b:	dc.w	IGREEN+252,IGREEN+253w6:		dc.w	IGREEN+246,IGREEN+247w6b:	dc.w	IGREEN+248,IGREEN+249wa1:	dc.w	$800+(32*10)+7wa1b:	dc.w	$800+(32*11)+7wa2:	dc.w	$800+(32*12)+7wa2b:	dc.w	$800+(32*13)+7wa3:	dc.w	$800+(32*14)+7wa3b:	dc.w	$800+(32*15)+7wa4:	dc.w	$800+(32*16)+7wa4b	dc.w	$800+(32*17)+7wa5:	dc.w	$800+(32*18)+7wa5b	dc.w	$800+(32*19)+7wa6:	dc.w	$800+(32*20)+7wa6b	dc.w	$800+(32*21)+7** remote stuff*remotedigits:	dc.w	r1,r1b,r2,r2b,r3,r3b,r4,r4b,r5,r5b,r6,r6bremoteaddress:	dc.w	ra1,ra1b,ra2,ra2b,ra3,ra3b,ra4,ra4b,ra5,ra5b,ra6,ra6b	r1:		dc.w	IBLUE+258,IBLUE+259r1b:	dc.w	IBLUE+260,IBLUE+261r2:		dc.w	IBLUE+262,IBLUE+263r2b:	dc.w	IBLUE+264,IBLUE+265r3:		dc.w	IBLUE+266,IBLUE+267r3b:	dc.w	IBLUE+268,IBLUE+269r4:		dc.w	IBLUE+270,IBLUE+271r4b:	dc.w	IBLUE+272,IBLUE+273r5:		dc.w	IBLUE+274,IBLUE+275r5b:	dc.w	IBLUE+276,IBLUE+277r6:		dc.w	IBLUE+278,IBLUE+279r6b:	dc.w	IBLUE+280,IBLUE+281ra1:	dc.w	$800+(32*10)+21ra1b:	dc.w	$800+(32*11)+21ra2:	dc.w	$800+(32*12)+21ra2b:	dc.w	$800+(32*13)+21ra3:	dc.w	$800+(32*14)+21ra3b:	dc.w	$800+(32*15)+21ra4:	dc.w	$800+(32*16)+21ra4b	dc.w	$800+(32*17)+21ra5:	dc.w	$800+(32*18)+21ra5b	dc.w	$800+(32*19)+21ra6:	dc.w	$800+(32*20)+21ra6b	dc.w	$800+(32*21)+21** do it...*buildinventory:	phb		lda	#13	pha	plb	lda	#ForcedBlankOn			sta	INIDISP** 6 weapons*	SET16	lda	#IGREEN	sta	coloradd	SET8		stz	temp+6@weaponloop:	ldy	temp+6	lda	weaponcount,y	bne	@hasit@incweaponloop:	inc	temp+6	lda	temp+6	cmp	#6	bcc	@weaponloop	bra	@doremote@hasit:	sta	temp+7				;counter	tya	asl	a	asl	a	sta	temp+5	tay	lda	weapondigits,y	sta	tmp	iny	lda	weapondigits,y	sta	tmp+1	dey	lda	weaponaddress,y	sta	tmp+2	iny	lda	weaponaddress,y	sta	tmp+3		jsr	dumptwochars	jsr	drawdigits	ldy	temp+5	iny	iny	lda	weapondigits,y	sta	tmp	iny	lda	weapondigits,y	sta	tmp+1	dey	lda	weaponaddress,y	sta	tmp+2	iny	lda	weaponaddress,y	sta	tmp+3	jsr	dumptwochars	bra	@incweaponloop** 6 remotes*@doremote:	SET16	lda	#IBLUE	sta	coloradd	SET8	stz	temp+6@remoteloop:	ldy	temp+6	lda	remotecount,y	bne	@hasit3@incremoteloop:	inc	temp+6	lda	temp+6	cmp	#6	bcc	@remoteloop	plb	rtl@hasit3:	sta	temp+7	tya	asl	a	asl	a	sta	temp+5	tay	lda	remotedigits,y	sta	tmp	iny	lda	remotedigits,y	sta	tmp+1	dey	lda	remoteaddress,y	sta	tmp+2	iny	lda	remoteaddress,y	sta	tmp+3		jsr	dumptwochars	jsr	drawdigits		ldy	temp+5	iny	iny	lda	remotedigits,y	sta	tmp	iny	lda	remotedigits,y	sta	tmp+1	dey	lda	remoteaddress,y	sta	tmp+2	iny	lda	remoteaddress,y	sta	tmp+3	jsr	dumptwochars		bra	@incremoteloop** drop chars on inv screen*dumptwochars:	stz	HDMAEN		; turn off h-dma	lda	(tmp+2)		;dest	sta	VMADDL	ldy	#1	lda	(tmp+2),y	sta	VMADDH	lda	tmp			;source	sta	$4302	lda	tmp+1	sta	$4303dumpdigitchars:	lda	#13	sta	$4304			;source page		lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#4	sta	$4305			; # of bytes low	lda	#0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts** draw accompanying digits*drawdigits:** get the digit count*	lda	temp+7	jsr	inumtoascii	SET16	lda	temp	clc		adc	coloradd	sta	temp		lda	temp+2		clc	adc	coloradd	sta	temp+2	SET8		lda	#<temp	sta	$4302	lda	#>temp	sta	$4303** extract new destination spot for digits*	lda	(tmp+2)	sta	tmp+6	ldy	#1	lda	(tmp+2),y	sta	tmp+7	lda	tmp+6	clc	adc	#2	sta	tmp+6	bcc	@noinc	inc	tmp+7@noinc:	lda	tmp+6	sta	VMADDL	lda	tmp+7	sta	VMADDH	jmp	dumpdigitchars** number to 2 digit ascii*		acc has number*		temp/temp+1 set on output*inumtoascii:	ldy	#0			;repeated subtraction@loop:	cmp	#10	bcc	@done	sec		sbc	#10	iny	jmp	@loop@done:	iny	sty	temp	inc	a	sta	temp+2		lda	temp	clc	adc	#127	sta	temp	lda	temp+2		clc	adc	#127	sta	temp+2		stz	temp+1		;clear high	stz	temp+3	rts	** storage box and resulting boom with item*		PIClogic has type*storagebox:	lda	#2				;synch	sta	PICscroll,x		lda	#13				;pics are here..	sta	PICbank,x		lda	#5				;color	sta	PICcolor,x		lda	#3				;size for los	sta	PICsize,x		lda	#1				;box strength	sta	PIChealth,x		stz	PICtype,x		inc	boxcounter	lda	boxcounter	cmp	#4	bcc	@fine	lda	#1	sta	boxcounter@fine:	cmp	#1	bne	@box2	sta	dmabox0			sta	PICanim,x		;and save which box	lda	PIClogic,x		;with this item..	sta	itemin0	bra	@runit@box2:	cmp	#2	bne	@box3	sta	dmabox1			sta	PICanim,x		;and save which box	lda	PIClogic,x		;with this item..	sta	itemin1	bra	@runit	@box3:	sta	dmabox2			sta	PICanim,x		;and save which box	lda	PIClogic,x		;with this item..	sta	itemin2@runit:	stz	PICvomit,x	jsr	drawitem	jsl	TSKsuspend	lda	PICvomit,x	beq	@lookforpickup** else flash for 1/2 second*	lda	#3	sta	PICscroll,x	lda	#7	sta	TSKbank,x	lda	#13	jml	explode	;	inc	PICvomit,x;	lda	PICvomit,x;	cmp	#30;	bcs	@kill;	and	#1;	beq	@turnon;	stz	PICadrLo,x;	stz	PICadrHi,x;	rtl;@turnon:	;	jsr	drawitem;	rtl;@kill:;	lda	#3;	sta	PICscroll,x;	jmp	TSKcancel	** see if bob runs by*@lookforpickup:	jsr	pickupitem	bcc	@notyet	lda	#SFXPICKUP	jsl	soundeffects	jsr	powerupbob@notyet:	rtl** set item type and schedule back item*setupitem:	stz	PICtype,x		;allow bob to pickup and los to ignore	rts	** bob see's if item is below him*pickupitem:	lda	PICxhi,x	ora	PICyhi,x	bne	@noget		lda	PICxlo,x	sec	sbc	#12	cmp	bobxpos	bcs	@noget	clc	adc	#24	cmp	bobxpos	bcc	@noget		lda	PICylo,x	sec	sbc	#28	cmp	bobypos	bcs	@noget	clc	adc	#56	cmp	bobypos	bcc	@noget			inc	PICvomit,x		sec	rts@noget:	clc	rts** power up bob with the item he found*weaponadd:	dc.b 	25,25,50,20,10,3remoteadd:	dc.b	3,3,3,3,3,3remotemax:	dc.b	9,9,9,9,9,9		powerupbob:	lda	PIClogic,x	bne	@others	lda	lives	cmp	#9	beq	@maxlives	inc	a@maxlives:	sta	lives	rts@others:	cmp	#1	bne	@notrepair	lda	#maxstrength	sta	strength	lda	#SFXPOWERUP	jsl	soundeffects	rts@notrepair:	cmp	#8	bcs	@tryutility	sec	sbc	#2	tay	lda	weaponadd,y	sta	temp	lda	weaponcount,y		clc	adc	temp	cmp	#100	bcc	@nowrap	lda	#99@nowrap:	sta	weaponcount,y	cpy	weapon				;change to weapon only if better	bcc	@ok	sty	weapon	@ok:	rts@tryutility:;	cmp	#14;	bcs	@tryremote;	sec	;	sbc	#7;	tay;	lda	utilityadd,y;	sta	temp;	lda	utilitycount,y;	clc;	adc	temp;	bcc	@nowrap2;	lda	#99;@nowrap2:;	sta	utilitycount,y;	rts@tryremote:	sec	sbc	#14	tay	lda	remotecount,y	clc	adc	#3	sta	remotecount,y	sty	remote	@ok2:	lda	remotecount,y	cmp	remotemax,y	bcc	@fine	lda	remotemax,y	sta	remotecount,y@fine:	rts** draw the pickup item with correct pallete*		acc has which one*drawitem:	lda	PIClogic,x	tay	lda	boxpalletes,y	sta	PICcolor,x		lda	PICanim,x	cmp	#1	bne	@try2	jsl	PICput	dw	item0	rts@try2:	cmp	#2	bne	@try3	jsl	PICput	dw	item1	rts@try3:	jsl	PICput	dw	item2	rts	** dma in the proper box contents*boxdest:	dc.w	$4000+(16*16),$4000+(32*16)	dc.w	$4000+(48*16),$4000+(64*16)	dc.w	$4000+(80*16),$4000+(96*16)boxsource:	dc.w	itemobj+(0*32),itemobj+(2*32)		;juice	dc.w	itemobj+(4*32),itemobj+(6*32)		;repair	dc.w	itemobj+(8*32),itemobj+(10*32)		;ammo 1	dc.w	itemobj+(12*32),itemobj+(14*32)		;ammo splitter	dc.w	itemobj+(16*32),itemobj+(18*32)		;flame	dc.w	itemobj+(28*32),itemobj+(30*32)		;missile	dc.w	itemobj+(24*32),itemobj+(26*32)		;beam	dc.w	itemobj+(20*32),itemobj+(22*32)		;sonic	dc.w	itemobj+(32*32),itemobj+(34*32)		;1up	dc.w	itemobj+(36*32),itemobj+(38*32)		;	dc.w	itemobj+(40*32),itemobj+(42*32)		;	dc.w	itemobj+(44*32),itemobj+(46*32)		;	dc.w	itemobj+(48*32),itemobj+(50*32)		;	dc.w	itemobj+(52*32),itemobj+(54*32)		;	dc.w	itemobj+(56*32),itemobj+(58*32)		;light remote	dc.w	itemobj+(60*32),itemobj+(62*32)		;shield remote	dc.w	itemobj+(68*32),itemobj+(70*32)		;parachute remote	dc.w	itemobj+(64*32),itemobj+(66*32)		;spring remote	dc.w	itemobj+(72*32),itemobj+(74*32)		;copter remote	dc.w	itemobj+(76*32),itemobj+(78*32)		;bezerker remote	boxpalletes:	dc.b	2,2					;what color man...	dc.b	7,7,2,7,7,7	dc.b	0,2,7,0,0,0	dc.b	0,0,0,0,0,0	dc.b	2,2,2,2,2,2	boxdma:	phb	lda	#13	pha	plb		lda	dmabox0	beq	@nobox0	ldy	itemin0	jsr	uploaditem	stz	dmabox0@nobox0:	lda	dmabox1	beq	@nobox1	ldy	itemin1	jsr	uploaditem	stz	dmabox1@nobox1:	lda	dmabox2	beq	@nobox2	ldy	itemin2	jsr	uploaditem	stz	dmabox2@nobox2:	plb	rtl	** dma the item...*		acc has 1 2 or 3 for box number*		y has item to upload*uploaditem:	sty	temp	dec	a				;extract destination	asl	a	asl	a	tay	lda	boxdest,y	sta	tmp	lda	boxdest+1,y	sta	tmp+1	lda	boxdest+2,y	sta	tmp+2	lda	boxdest+3,y	sta	tmp+3		lda	temp			;and source	asl	a	asl	a	tay		lda	boxsource,y	sta	tmp+4	lda	boxsource+1,y	sta	tmp+5	lda	boxsource+2,y	sta	tmp+6	lda	boxsource+3,y	sta	tmp+7	** upload top half*	lda tmp				;dest	sta VMADDL	lda tmp+1		sta VMADDH			lda	tmp+4			;source	sta	$4302	lda	tmp+5	sta	$4303		stz	HDMAEN			; turn off h-dma	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#13	sta	$4304			; bank #	lda	#(32*2) 	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN			; turn on dma	** and now the bottom half*	lda tmp+2			;dest	sta VMADDL	lda tmp+3				sta VMADDH			lda	tmp+6			;source	sta	$4302	lda	tmp+7	sta	$4303		stz	HDMAEN			; turn off h-dma	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#13	sta	$4304			; bank #	lda	#(32*2) 	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma			stz	dmabox0@nobox0:	rts	** item frames*item0: dc.b $01 dc.b $48,$C8,$10item1: dc.b $01 dc.b $48,$C8,$30item2: dc.b $01 dc.b $48,$C8,$50