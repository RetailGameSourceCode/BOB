** Default offsets/sizes*REGSIZEX	EQU	12	;bob size and displacementREGSIZEY	EQU	24GUNOFFX		EQU	26	;muzzle locationGUNOFFY		EQU	-6NOGUNOFFX	EQU -1NOGUNOFFY	EQU	-1	;no shootBEAMFACE	EQU	13*2		;angry beam** possible bob sizes*	x,y,xoffset,yoffset* ;bobsizes:;	dc.b	12,24,0,0;	dc.b	12,16,0,8;	dc.b	16,12,0,10;	dc.b	18,8,0,16;	dc.b	24,16,0,0		;scooter - gear down;	dc.b	24,12,0,-4		;scooter - gear up	** possible muzzle positions*	x offset, yoffsetbobmuzzles:	dc.b	#GUNOFFX,#GUNOFFY	dc.b	#GUNOFFX,#GUNOFFY+2	dc.b	#GUNOFFX,#GUNOFFY+16	dc.b	#GUNOFFX,#GUNOFFY+18	dc.b	#GUNOFFX,#GUNOFFY+18	dc.b	#GUNOFFX,#GUNOFFY+18	dc.b	#GUNOFFX+8,#GUNOFFY+8	dc.b	#GUNOFFX,#GUNOFFY+8	dc.b	#GUNOFFX,#GUNOFFY+12	dc.b	#GUNOFFX-2,#GUNOFFY	dc.b	#GUNOFFX,#GUNOFFY+10	dc.b	#GUNOFFX-2,#GUNOFFY+2	dc.b	#GUNOFFX,#GUNOFFY+10	dc.b	#GUNOFFX+3,#GUNOFFY			;ladder	dc.b	#GUNOFFX+16,#GUNOFFY+14	;14 - scooter	dc.b	#0,#48	dc.b	#4,#-40			;16 - shoot up** hurting heads*hurtheads:	dc.w	reghead	dc.w	headpuff	dc.w	headpop	dc.w	headsquishhurttorsos:	dc.w	treghead	dc.w	theadpuff	dc.w	theadpop	dc.w	theadsquish		reghead:	dc.b	6*2,6*2,6*2,6*2	dc.b	6*2,6*2,6*2,6*2,99treghead:	dc.b	35*2,35*2,35*2,35*2	dc.b	35*2,35*2,35*2,35*2headpuff:	dc.b	32*2,32*2,33*2,33*2	dc.b	34*2,34*2,34*2,34*2,34*2,34*2	dc.b	33*2,33*2,32*2,32*2,32*2,32*2,99theadpuff:		dc.b	0,0,35*2,35*2	dc.b	35*2,35*2,35*2,35*2,35*2,35*2	dc.b	0,0,0,0,0,0	headpop:	dc.b	49*2,49*2,50*2,50*2	dc.b	51*2,51*2,51*2,51*2	dc.b	52*2,52*2,49*2,49*2,99theadpop:	dc.b	0,0,35*2,35*2	dc.b	35*2,35*2,35*2,35*2	dc.b	0,0,0,0	headsquish:	dc.b	47*2,47*2,47*2,48*2,48*2,48*2,48*2	dc.b	48*2,48*2,48*2,48*2	dc.b	47*2,47*2,47*2,47*2,99theadsquish:	dc.b	35*2,35*2,35*2,35*2,35*2,35*2,35*2	dc.b	35*2,35*2,35*2,35*2	dc.b	0,0,0,0	** fidget heads*blinktypes:	dc.w	regblink	dc.w	noblink	dc.w	turnblink	dc.w	regblink	dc.w	looknoblink	dc.w	turnblink	;headspin	dc.w	regblink	dc.w	noblink	dc.w	fourway	dc.w	regblink	dc.w	looknoblink	dc.w	noblink	dc.w	regblink	;eyemixup	dc.w	turnblink	dc.w	headspin	dc.w	noblink	dc.w	woah	noblink:	dc.b	6,6,6,6,6,6,6,99	looknoblink:	dc.b	26,26,26,26,26,26,26,99	regblink:	dc.b	6,6,7,7,6,6,7,7,6,6	dc.b	6,6,6,6,7,7,6,6,99	turnblink:	dc.b	6,6,26,26,27,27,27,27,26,26	dc.b	26,27,27,26,26,27,27,27,26,26,99woah:	dc.b	6,6,18,18,32,32,9,9,8,6,99headspin:	dc.b	62,63	dc.b	64,61,62,63	dc.b	64,61,62,63	dc.b	64,61,62,63	dc.b	6,6,6,6,7,7,6,6,99	fourway:	dc.b	6,26	dc.b	44,44,44,44,44,44,44	dc.b	70,70	dc.b	71,71,71,71,71,71,71	dc.b	72,72	dc.b	31,31,31,31,31,31,31	dc.b	30,30	dc.b	6,99	eyemixup:	dc.b	6,7	dc.b	65,65,65,65,65,65	dc.b	27	dc.b	66,66,66,66,66,66	dc.b	27	dc.b	66,66,66,66,66,66	dc.b	67,25,68,69	dc.b	67,25,25,69	dc.b	67,25,68,69	dc.b	27,27,26,26,27,27,26,26,27,27,26,26,6,99	** different torsos to play*punchtorsos:	dc.b	2*2,48*2,49*2,50*2,48*2,2*2ptdelay:	dc.b	3,3,3,3,3,3;throwtorsos:;	dc.b	1*2,11*2,5*2,8*2;ttdelay:;	dc.b	4,5,8,6dpremtorsos:	dc.b	24*2,16*2,17*2,18*2,17*2,16*2,24*2drdelay	dc.b	5,5,5,15,5,5,5;chucktorsos:;	dc.b	23*2,25*2,25*2,26*2,24*2,0*2;chuckdelay:;	dc.b	3,3,7,7,5,5	firingtorsos:	dc.b	0		replacetorsos:	dc.b	14flipwhen:	dc.b	0,1	dc.b	0,1	dc.b	0,1	dc.b	1,0	dc.b	1,0	dc.b	1,0	dc.b	1,0	hohflipwhen	dc.b	0,1	dc.b	0,1	dc.b	1,0	dc.b	1,0bobsturndir:	dc.b	#faceright,#faceleft	dc.b	#faceright,#faceleft	dc.b	#faceleft,#faceright	dc.b	#faceleft,#faceright	** case draw stuff*drawstates:	dc.w	dbobfidget		;dead	dc.w	dbobdying			dc.w	dbobwalk		;walking	dc.w	dbobfidget	dc.w	dbobjump	dc.w	dbobcrouch	dc.w	dbobfalling	dc.w	dbobclimb	dc.w	dbobhandoverhand	dc.w	dbobremote	dc.w	dbobelevator	dc.w	dbobridebubble	dc.w	dbobteleport	dc.w	dbobwindblown	dc.w	dbobscooter	dc.w	dbobspaceship	dc.w	dbobpickup	dc.w	dbobstopping	dc.w	dboblanding	dc.w	dbobbuttsplat	dc.w	dbobwallsplat	dc.w	dbobswitchpull	dc.w	dbobrecoil	dc.w	dbobgiveitem	dc.w	dbobblasted	dc.w	dbobsleep	dc.w	dbobleavegoth	dc.w	dbobwhackhead	dc.w	dbobrideplatform	** Module to handle bob draw...*drawbob:		lda	holdcycles	beq	@noreset		inc	frameticks		lda	frameticks	cmp	holdcycles			bcc	@noreset	stz	frameticks	stz	holdcycles		lda	shootflag	beq	@noreset	inc	shootflag	lda	shootflag	cmp	#3	bcc	@noreset	stz	shootflag@noreset:** execute correct draw code*	lda	#-1					sta	whichtorso	sta	whichhead** special intro animations*	lda	introflag		;intro sets it's own...	bne	@noshield** regular game code*@gamebob:	lda status			;set up offsets based on current state	asl	a	tay	lda	drawstates,y	sta	tmp	iny	lda	drawstates,y	sta	tmp+1	jsr	drawcode			lda	bobshield	beq	@noshield	lda	cputime	and	#1	beq	@nodec	lda	bobshield	dec	a	sta	bobshield@nodec:	lda	bobshield	and	#1	bne	@noshield		;eq		lda	status	cmp	#crouching	beq	@small	lda	#SHIELDOFF	bra	@notsmall@small:	lda	#SHIELDOFF+1@notsmall:	sta	pictureoffset@noshield:	jsr	buildframe		;and build the frame and draw it...		rts			drawcode:	jmp	(tmp)	** bob is teleporting in*happydancemoves:	dc.b	HAPPYDANCE	dc.b	HAPPYDANCE+1	dc.b	HAPPYDANCE	dc.b	HAPPYDANCE+1	dc.b	HAPPYDANCE	dc.b	HAPPYDANCE+1	dc.b	HAPPYDANCE	dc.b	HAPPYDANCE+2	windmilldancer:	dc.b	DANCEOFF	dc.b	DANCEOFF+1	dc.b	DANCEOFF+2	dc.b	DANCEOFF+1	dc.b	DANCEOFF+2	dc.b	DANCEOFF+1	dc.b	DANCEOFF+2	dc.b	DANCEOFF+1	dc.b	DANCEOFF	dc.b	DANCEOFF+3	shouldershrug:	dc.b	DANCEOFF2	dc.b	DANCEOFF2+1	shouldershrug2:	dc.b	DANCEOFF3	dc.b	DANCEOFF3+1moonwalkmoves:	dc.b	10,9,8,7,6,5,4,3		;moon walk** teleport*dbobteleport:	lda	teleportout	beq	@gogadget	lda	pointsgiven	beq	@dance	** else rez out*@gogadget:	lda	bobcount	bne	@rezzing	lda	#141	sta	pictureoffset	rts@rezzing:	lda	#REZOFF-1	clc		adc	bobcount		sta	pictureoffset	rts@dance:	lda	dancetype	bne	@shrugdance** windmill dancer*@windmilldance:	lda	cputime	and	#7	cmp	#7	bne	@nochangewindmill	lda	dancesteps	inc	a	sta	dancesteps	cmp	#10	bcc	@nochangewindmill	stz	dancesteps	lda	dancedir	eor	#1	sta	dancedir@nochangewindmill:	ldy	dancesteps	lda	windmilldancer,y	sta	pictureoffset	lda	dancedir	beq	@windright	lda	#faceleft	sta	walkdir	rts@windright:	lda	#faceright	sta	walkdir	rts** shoulder shrug*@shrugdance:	cmp	#3	bcs	@happydance	lda	cputime	and	#7	cmp	#7	bne	@noshrug	lda	dancesteps	inc	a	sta	dancesteps	cmp	#2	bcc	@noshrug	stz	dancesteps	lda	dancedir	eor	#1	sta	dancedir@noshrug:	ldy	dancesteps	lda	dancetype	and	#1	beq	@useclosed	lda	shouldershrug,y	bra	@setshrug@useclosed:	lda	shouldershrug2,y@setshrug:	sta	pictureoffset	lda	dancedir	beq	@shrugright	lda	#faceleft	sta	walkdir	rts@shrugright:	lda	#faceright	sta	walkdir	rts	** dance fever on way out - happy dancer*@happydance:	cmp	#3	bne	@moonwalk		stz	temp	lda	cputime	and	#7	cmp	#7	bne @nochangehappy	lda	dancesteps	inc	a	and	#15	sta	dancesteps	cmp	#7	beq	@nochangehappy	cmp	#15	beq	@nochangehappy	inc	temp@nochangehappy:	lda	dancesteps	and	#7	tay	lda	happydancemoves,y		;pose	sta	pictureoffset			lda	dancesteps	cmp	#8	bcc	@happyfaceright	lda	temp	eor	#255	inc	a	sta	temp	lda	#faceleft	bra	@sethappyface@happyfaceright:	lda	#faceright@sethappyface:	sta	walkdir	lda	temp	jsl	PICxadd	stz	bobxmove	stz	bobymove	rts	** moon walk*@moonwalk:	lda	cputime	and	#3	cmp	#3	bne	@noincdance2	lda	dancesteps	inc	a	and	#7	sta	dancesteps@noincdance2:	ldy	dancesteps	lda	moonwalkmoves,y	sta	pictureoffset		rts	** draw standing*dbobelevator:dbobwalk:		dbobridebubble:dbobrideplatform:** process turn...*@seeturn:	lda	turncount		;determine when to flip...	beq	@notturning	lda	#TURNOFF-1	jsr	miniturn 	bcc	@notturning	rts** process generic stand*	@notturning:	lda	status	cmp	#ridebubble	bne	@notabubble	lda	bobxmove	bne	@walk2@notabubble:	lda	accelcount	;standing or walking?	cmp	#1	bcs	@walk@nowalk:	lda	punchflag	beq	@seethrow	dec	a	clc	adc	#PUNCHOFF	sta	pictureoffset	rts@seethrow:;	lda	throwflag;	beq	@seedeploy;	dec	a;	clc;	adc	#THROWOFF;	sta	pictureoffset;	rts@seedeploy:	lda	dpremflag	beq	@seechuck	dec	a	clc	adc	#DPREMOFF	sta	pictureoffset	rts@seechuck:;	lda	chuckflag;	beq	@seefire;	dec	a;	clc;	adc	#CHUCKOFF;	sta	pictureoffset;	rts** process gun recoil dynamics*@seefire:	lda	shootinguzi	beq	@grr	lsr	a	bne	@stand@grr:	lda	gundir	beq	@firestraight	lda	shootflag	clc	adc	#SHOOTUPOFF	bra	@stand@firestraight:	lda	shootflag	;either 0 or 1 or 2	bra	@stand** bob is walking...cycle through leg animation*@walk:	lda	bobml	ora	bobmr	bne	@nowalk@walk2:		lda	frameticks	bne	@nowrap	inc	framecount	lda	framecount	cmp	#8	bcc	@nowrap	lda	#0	sta	framecount@nowrap:	lda	framecount	clc	adc	#WALKOFF			@stand:	sta	pictureoffset	rts	** bob dead!*dbobdying:	lda	deathtype	cmp	#2	bne	@notsquish	lda	#SQUISHOFF	clc	adc	deathcount	sta	pictureoffset	rts@notsquish:	cmp	#3	bne	@idontknow	lda	#13	sta	PICbank,x	stz	pictureoffset	rts	@idontknow:	lda	deathtype	beq	@usecrum	lda	#BDEATH2	bra	@setpic@usecrum:	lda	#BDEATH@setpic:	clc	adc	deathcount	sta	pictureoffset		rts	** bob goes hand over hand*dbobhandoverhand:	lda	turncount	beq	@noturn	lda	#HANDTOFF-1	jsr	miniturn	bcc	@noturn	rts@noturn:	lda	bobxmove	beq	@oneframe	lda	cputime	lsr	a	and	#3@oneframe:	clc	adc	#HANDOFF	sta	pictureoffset	rts** bob is climbing up ladder*dbobclimb:	lda	climbcount	cmp	#2	bcc	@drawit	lda	climbframe	and	#3	clc	adc	#4@drawit:	clc	adc	#CLIMBOFF	sta	pictureoffset	rts** bob is attached to remote*dbobremote:	lda	turncount	beq	@noturn	lda	#FALLTOFF-1	jsr	miniturn	bcc	@noturn	rts@noturn:	lda	#6	clc	adc	#JUMPOFF	sta	pictureoffset	rts**	Bob is bored*sleepframes:	dc.b	0,1,1,1,0,0,1,1,1,2,0,0,1,1,1,2,3,4,4	realfidgettype:	dc.b	1,1,2,1,1,3,1,1	dbobfidget:	lda	fidgettype	and	#7	tay	lda	realfidgettype,y	bne	@see2	** do a foottap*	lda	fidgetcount	bne	@tapping	inc	fidgetcount	lda	#BFOOTTAP	sta	pictureoffset	rts@tapping:	lda	frameticks	bne	@same	lda	fidgettoggle	eor	#1	sta	fidgettoggle@same:	lda	#BFOOTTAP+1	clc	adc	fidgettoggle	sta	pictureoffset	lda	cputime	and	#3	cmp	#3	bne	@notapsfx;	lda	#SFXTAP;	jsl	soundeffects@notapsfx	rts	** wave at camera*@see2:	cmp	#1	bne	@see3		lda	fidgetcount	bne	@waving	stz	fidgetticks	inc	fidgetcount	lda	#BSCREENWAVE	sta	pictureoffset	rts@waving:	lda	frameticks	bne	@same2	inc	fidgetticks	lda	fidgetticks	cmp	#15	bcc	@fine	lda	#walking			;waky...	sta	status	stz	fidgetcount	stz	fidgetticks@fine:	lda	fidgettoggle	eor	#1	sta	fidgettoggle@same2:	lda	#BSCREENWAVE+1	clc	adc	fidgettoggle	sta	pictureoffset;	lda	#SFXWAVE;	jsl	soundeffects	rts	**	catch some zzzzzz's**@see3:	lda	fidgetcount	cmp	#18	beq	@snoring	lda	frameticks	bne	@nosinc	inc	fidgetcount@nosinc:	ldy	fidgetcount	lda	sleepframes,y	clc	adc	#BDOZEOFF	sta	pictureoffset	rts@snoring:	lda	cputime	and	#31	cmp	#31	bne	@nosound	lda	#SFXSLEEP	jsl	soundeffects@nosound:	lda	frameticks	bne	@same3	inc	fidgettoggle@same3:	lda	fidgettoggle	and	#3	clc	adc #BDOZEOFF+5	sta	pictureoffset	rts		** bob whacks head on ceiling*dbobwhackhead:	lda	crouchcount	clc	adc	#AHEADWHACK	sta	pictureoffset	rts	** bob manipulates wall switches*dbobswitchpull:dbobpickup:dbobrecoil:	rts	** bob is racing in scooter*dbobscooter:	lda	turncount	beq	@fine	lda	#BSCOOTER+1	sta	pictureoffset	rts@fine:	lda	#BSCOOTER	sta	pictureoffset	rts	** bob flies space ship*dbobspaceship:	rts	** bob is in ship on planet goth*dbobleavegoth:	lda	caryadjust	bne	@wait	lda	#0	;#BSCOOTER	sta	pictureoffset@wait:	rts		** bob goes into crouch mode*dbobcrouch:	lda	crouchcount			;if crouch count is <>7 then	cmp	#6					;bob is going up or down....	beq	@canwalk	clc	adc	#CROUCHOFF	sta	pictureoffset	rts@canwalk:	lda	turncount	beq	@noturn	lda	#CROUCHTOFF-1	jsr	miniturn	bcc	@stay	rts@noturn:	lda	accelflag	bne	@addwalk@stay:	lda	#6+CROUCHOFF	sta	pictureoffset	stz	framecount	rts@addwalk:	lda	walkdir	bmi	@seeleft	lda	bobmr	beq	@dowaddle	bra	@stay@seeleft	lda	bobml	bne	@stay@dowaddle:	lda	frameticks	bne	@leavewaddle	inc	framecount@leavewaddle:	lda	framecount	and	#3	clc	adc	#WADDLEOFF	sta	pictureoffset	rts	** bob leaps*dbobjump:	lda	jumptype			;what kind of jump	beq	@hurdlejump	** trampoline jump*@trampoline:	lda	jumpcount	cmp	#10	bcs	@hurdlejump	lda	#JUMPOFF+2	sta	pictureoffset	rts** hurdle style*@hurdlejump:	lda	turncount	beq	@noturn	lda	#HURDLETOFF-1	jsr	miniturn	bcc	@noturn	rts@noturn:	lda	#HURDLEOFF			;1 of two frames	sta	pictureoffset	lda	buttondown	bne	@inair		lda	jumpcount			;if flying show 2nd	cmp	#4	bcc	@onground@inair:	inc	pictureoffset@onground:	rts** bob is skidding to halt*;deceltable:;	dc.b	2,2,2,2;	dc.b	1,2,1,2;	dc.b	1,1,1,1;	dc.b	1,1,1,0;	dc.b	1,0,99deceldrawtable	dc.b	#STOPOFF,#STOPOFF,#STOPOFF,#STOPOFF+1	dc.b	#STOPOFF+1,#STOPOFF+1,#STOPOFF+1,#STOPOFF+2	dc.b	#STOPOFF+2,#STOPOFF+2,#STOPOFF+2,#STOPOFF+2	dc.b	#STOPOFF+2,#STOPOFF+2,#STOPOFF+2,#STOPOFF+3	dc.b	#STOPOFF+4,#STOPOFF+5,#STOPOFF+6	dbobstopping:	ldy	decelcount	lda	deceldrawtable,y	sta	pictureoffset	rts	** bob is falling*dbobfalling:	lda	turncount	beq	@noturn	lda	#HURDLETOFF-1	jsr	miniturn	bcc	@noturn	rts@noturn:	lda	#HURDLEOFF+1				sta	pictureoffset	rts		lda	turncount	beq	@notturn	lda	#FALLTOFF-1	jsr	miniturn	bcc	@notturn	rts@notturn:	lda	#JUMPOFF+8	sta	pictureoffset	rts** bobo is being ricochet around*dbobwindblown:	lda	#154			;recoil backwards	sta	pictureoffset	rts	** bob has butt splatted*dbobbuttsplat:	lda	#SPLATGOFF	clc	adc	jumpcount	sta	pictureoffset	rts	** bob has wall crashed*dbobwallsplat:	lda	#SPLATWOFF	clc	adc	jumpcount	sta	pictureoffset	rts	** bob is landing*dboblanding:	lda	jumpxspeed	beq	@plant	lda	jumpstyle			;land a running jump	beq	@plant	lda	#HURDLEOFF	;+2	sta	pictureoffset	rts@plant:	lda	jumpcount	clc	adc	#LANDOFF	sta	pictureoffset	rts	** bob is giving item to terminal*dbobgiveitem:	** bob was blasted*dbobblasted:	lda	#SURPRISEOFF	sta	pictureoffset		rts		** bob is in nappy mode*dbobsleep:	lda	crouchdir	bne	@comingout	lda	crouchcount	cmp	#8	bcc	@notinyet;	lda	cputime;	cmp	#60;	bcs	@leftopen;@rightopen:;	lda	#9;	bne	@setit;@leftopen:;	cmp	#120;	bcs	@close;	lda	#10;	bne	@setit;@close:	lda	#8@setit:	clc	adc	#SLEEPOFF 	sta	pictureoffset	rts	@notinyet:	lda	#SLEEPOFF	clc	adc	crouchcount	sta	pictureoffset	rts@comingout:	lda	#8	sec		sbc	crouchcount	clc	adc	#SLEEPOFF	sta	pictureoffset	rts			** finally build the bob frame*	picutreoffset has offsetbuildframe:	phb		lda	#8	pha	plb			lda	pictureoffset	sta	pictureoffset2		lda	status	cmp	#leavegoth	beq	@otherstuff	lda	introflag	beq	@regpieces@otherstuff:	lda	#<framepieces2		;intro has diff table	sta	tmp	lda	#>framepieces2	sta	tmp+1	bra	@addloop	@regpieces:	lda	#<framepieces		;save frame table address	sta	tmp	lda	#>framepieces	sta	tmp+1	@addloop:	lda	pictureoffset	;8 bytes per frame	cmp	#32				;32 per allowed addressing	bcc	@goforit	sec	sbc	#32	sta	pictureoffset		lda	tmp				;after 32, push map pointer	clc	adc	#<256	sta	tmp	bcc	@noinc	inc	tmp+1@noinc:	lda	tmp+1	clc	adc	#>256	sta	tmp+1	bra	@addloop	@goforit:	asl	a				;now get correct offset	asl	a	asl	a	tay	 	lda	(tmp),y	sta	temp			;low adddress of big frame offset	iny	lda	(tmp),y	sta	temp+1			;high address of big frame offset	iny	lda	bobshield		;if shield is on....	beq	@otay	and	#1	bne	@otay	;eq		iny	bra	@pushit@otay	lda	(tmp),y	sta	bodysizeoff		;temp+3 body size offset	iny	lda	(tmp),y		sta	gunlocoff		;temp+4 gun location offset@pushit:	iny	lda	(tmp),y	asl	a	sta	legoff			;leg offset	iny	lda	(tmp),y	asl	a	sta	torsoff			;torso offset	iny	lda	(tmp),y	asl	a	sta	headoff			;head offset	iny	lda	(tmp),y	and	#%01111111	sta	holdcycles		;how long to hold animation		lda	(tmp),y	and	#%10000000	sta	drawdir			;direction to draw	plb	** get body size and gun offsets*	lda	bodysizeoff		;temp+3			;body sizes	clc	adc	#17	sta	temp+5	sta	PICsize,x	asl	a	clc	adc	temp+5	tay	lda	sizetable,y	;bobsizes,y	sta	bobsizex	iny	lda	sizetable,y	;bobsizes,y	sta	bobsizey	iny	lda	sizetable,y	;bobsizes,y	sta	boboffsety;	iny;	lda	bobsizes,y;	sta	boboffsety	lda	gunlocoff	;temp+4 gun locations	bpl	@canshoot	lda	#-1	sta	muzzoffx	sta	muzzoffy	bra	@multifudge@canshoot:	asl	a	tay	lda	bobmuzzles,y	sta	muzzoffx	iny	lda	bobmuzzles,y	sta	muzzoffy	** special fudges for multiple actions *@multifudge:	lda	introflag	bne	@nof	lda	status	cmp	#sleeping	beq	@nof	cmp	#dying	bne	@fudge@nof:	jmp	@buildframe2@fudge:	lda	bobshield			;no fudges during shield	beq	@standthere			;cycle	and	#1	bne	@standthere			;eq 	jmp	@buildframe2	@standthere:	lda	punchflag	beq	@trythrow	dec	a	tay		lda	punchtorsos,y	sta	torsoff	lda	ptdelay,y	sta	holdcycles	bra	@buildframe@trythrow:;	lda	throwflag;	beq	@trydeploy;	dec	a;	tay	;	lda	throwtorsos,y;	sta	torsoff;	lda	ttdelay,y;	sta	holdcycles;	bra	@buildframe@trydeploy:	lda	dpremflag	beq	@trychuck	dec	a	tay	lda	dpremtorsos,y	sta	torsoff	lda	drdelay,y	sta	holdcycles	bra	@buildframe@trychuck:;	lda	chuckflag;	beq	@tryfire;	dec	a;	tay;	lda	chucktorsos,y;	sta	torsoff;	lda	chuckdelay,y;	sta	holdcycles;	bra	@buildframe@tryfire:	lda	gundir	beq	@straightstuff	lda	#53*2	sta	whichhead	lda	#47*2	bne	@settorso	@straightstuff:	lda	shootflag	beq	@buildframe	lda	whichtorso		;don't muck with any non-muckable	cmp	#-1				;torso's	bne	@settorso	lda	status			;no move torso when on ladder	cmp	#climbing	beq	@buildframe	lda	#14*2@settorso:	sta	torsoff** try the head*@buildframe:	lda	whichhead		;if other head is on....ignore	cmp	#-1	beq	@newhead	sta	headoff	bra	@buildframe2@newhead:	lda	hurtpal			;apply hurt stuff	beq	@nothurt		lda	status			;leave alone when on ladder	cmp	#climbing	beq	@nothurt		lda	hurthead	sta	headoff		lda	whichtorso	cmp	#-1	bne	@nothurt	lda	hurttorso	beq	@nothurt	sta	torsoff@nothurt:;	lda	face			;if angry...use only it;	cmp	#BEAMFACE;	beq	@storeface	** blink bob when interacting*;	jsl	doingwhat		;no blinking when in other pose;	bcc	@carryon;	stz	blinkcount;	bra	@buildframe2	@carryon:	lda	blinkcount	beq	@buildframe2	dec	a	sta	temp+2		lda	blinktype	and	#15	asl	a	tay	lda	blinktypes,y	sta	tmp	iny	lda	blinktypes,y	sta	tmp+1		lda	cputime	and	#3	cmp	#3	bne	@noincbl	inc	blinkcount@noincbl:	ldy	temp+2	lda	(tmp),y	cmp	#99	bne	@storeface	stz	blinkcount	stz	interacting	bra	@buildframe2@storeface:	asl	a	sta	headoff** build the frame...*@buildframe2:	lda	lockscreen	bne	@dennissucks		lda	alternate	and	#1	beq	@dennissucks@nobuild:	rts@dennissucks:	phb	lda #bfbank	pha	plb	lda	temp	ldy	temp+1	jsr	set_bigframe_offset	plb		lda	drawdir	beq	@regularxx	jmp	@otherway@regularxx:	lda	introflag	bne	@regdeath		lda	status	cmp	#drivescooter	beq	@regdeath	cmp	#leavegoth	beq	@regdeath		cmp	#dying	bne	@notdead		lda	deathtype			;if getting squished...	cmp	#2	bne	@regdeath			;wait till end	lda	deathcount			;before using squish anim....	cmp	#3	bcc	@notdead	** death frames...*@regdeath:	ldy	headoff				;top off with a head	lda	heads,y	pha	iny	lda	heads,y	tay	pla	jsr	setbigframe			lda #<bobchr_head2		;and copy in the heady pieces	ldy #>bobchr_head2	jsr calc_spec				sta spec_head	sty spec_head+1		ldy	legoff				;start with legs	lda	legs,y	pha	iny	lda	legs,y	tay	pla	jsr	addbigframe		lda #<bobchr_legs2		;copy in new leg characters	ldy #>bobchr_legs2	jsr calc_spec				sta spec_legs	sty spec_legs+1		ldy	torsoff				;add the toros	lda	torsos,y	pha	iny	lda	torsos,y	tay	pla	jsr	addbigframe	lda #<bobchr_torso2		;and copy in new torso characters	ldy #>bobchr_torso2	jsr calc_spec				sta spec_torso	sty spec_torso+1		jmp	@dropbigframe	** torso/head/legs*@notdead:	ldy	headoff				;top off with a head	lda	heads,y	pha	iny	lda	heads,y	tay	pla	jsr	setbigframe			lda #<bobchr_head		;and copy in the heady pieces	ldy #>bobchr_head	jsr calc_spec				sta spec_head	sty spec_head+1		ldy	torsoff				;add the toros	lda	torsos,y	pha	iny	lda	torsos,y	tay	pla	jsr	addbigframe	lda #<bobchr_torso		;and copy in new torso characters	ldy #>bobchr_torso	jsr calc_spec				sta spec_torso	sty spec_torso+1	lda	status	cmp	#drivescooter	beq	@nolegs	cmp	#leavegoth	beq	@nolegs		ldy	legoff				;start with legs	lda	legs,y	pha	iny	lda	legs,y	tay	pla	jsr	addbigframe		lda #<bobchr_legs		;copy in new leg characters	ldy #>bobchr_legs	jsr calc_spec				sta spec_legs	sty spec_legs+1	@nolegs:	bra	@dropbigframe	** legs/torso/head*@otherway:	ldy	headoff				;top off with a head	lda	heads,y	pha	iny	lda	heads,y	tay	pla	jsr	setbigframe			lda #<bobchr_head		;and copy in the heady pieces	ldy #>bobchr_head	jsr calc_spec				sta spec_head	sty spec_head+1		lda	status	cmp	#drivescooter	beq	@nolegs	cmp	#leavegoth	beq	@nolegs		ldy	legoff				;start with legs	lda	legs,y	pha	iny	lda	legs,y	tay	pla	jsr	addbigframe		lda #<bobchr_legs		;copy in new leg characters	ldy #>bobchr_legs	jsr calc_spec				sta spec_legs	sty spec_legs+1	@nolegs2:	ldy	torsoff				;add the toros	lda	torsos,y	pha	iny	lda	torsos,y	tay	pla	jsr	addbigframe	lda #<bobchr_torso		;and copy in new torso characters	ldy #>bobchr_torso	jsr calc_spec				sta spec_torso	sty spec_torso+1	** and draw it*@dropbigframe:		ldx TSKcurrent			lda	introflag	bne	@showbody		lda	status	cmp	#teleported	bne	@trydying		lda	aflashbob		;dennisism	beq	@ignore	jsl	PICput	dw	bobflashpic;	lda	ringypos;	cmp	#96;	bcc	@leave;	lda	#1;	sta	PICcolor,x@leave:	rts@ignore:	lda	bobcount	bmi	@nobody;	cmp	#-1;	beq	@nobody	bra	@showbody@trydying	cmp	#dying	bne	@tryscooter	lda	deathtype		;no body during total blow up...	cmp	#1	beq	@nobody	cmp	#3				;shrapnel....	beq	@nothing	bra	@showbody	@tryscooter:	cmp	#rideship	bne	@showbody	rts@nobody:	lda	#0	sta	PICadrLo,x	sta	PICadrHi,x	rts@showbody:	jsl	PICput				;draw the big guy...	dw	bigframe@nothing:	rts		** process jumping/hanging turnframes*miniturn:	sta	temp		lda	frameticks	bne	@drawturn		inc	turncount	lda	turncount	cmp	#5	bcc	@drawturn		stz	turncount	lda	walkdir	cmp	#faceright	beq	@eoturn	jsl	PICxflip@eoturn	clc	rts@drawturn:	lda	turncount	clc	adc	temp	sta	pictureoffset		lda	turncount	dec	a	asl	a	tay	lda	turnway	;walkdir			;get dir	bpl	@noiny	iny@noiny:	lda	bobsturndir,y	sta	walkdir	lda	hohflipwhen,y	beq	@noflip@fliphim:	jsl	PICxflip@noflip:	sec	rts	** All the pieces.....*torsos:	dc.w	torso0		;regular	dc.w	torso1		;recoil	dc.w	torso2			dc.w	torso3	dc.w	torso4	dc.w	torso5	dc.w	torso6		;punch	dc.w	torso7	dc.w	torso8	dc.w	torso9	dc.w	torso10	dc.w	torso11	dc.w	torso12	dc.w	torso13	dc.w	torso14	dc.w	torso15	dc.w	torso16	dc.w	torso17	dc.w	torso18	dc.w	torso19	dc.w	torso20	dc.w	torso21	dc.w	torso22	dc.w	torso23	dc.w	torso24	dc.w	torso25	dc.w	torso26	dc.w	torso27	dc.w	torso28	dc.w	torso29	dc.w	torso30	dc.w	torso31	dc.w	torso32	dc.w	torso33	dc.w	torso34	dc.w	torso35	dc.w	torso36	dc.w	torso37	dc.w	torso38	dc.w	torso39	dc.w	torso40	dc.w	torso41	dc.w	torso42	dc.w	torso43	dc.w	torso44	dc.w	torso45	dc.w	torso46	dc.w	torso47	dc.w	torso48	dc.w	torso49	dc.w	torso50	dc.w	torso51	dc.w	torso52	dc.w	torso53	dc.w	torso54	dc.w	torso55	dc.w	torso56	dc.w	torso57	dc.w	torso58	dc.w	death20	;+59	dc.w	death21	dc.w	death22	dc.w	death23	dc.w	death24	dc.w	death25	dc.w	death26	dc.w	death27	dc.w	death28	dc.w	death29	dc.w	death210	dc.w	death211	dc.w	death212	dc.w	death213	dc.w	death214	dc.w	death215	dc.w	death216	dc.w	death217	dc.w	death218	dc.w	death219	dc.w	death220	dc.w	death221	dc.w	death222	dc.w	death223	dc.w	death224	dc.w	death225	dc.w	death226	dc.w	death227	dc.w	death228	dc.w	death229	dc.w	death230	dc.w	death231heads:	dc.w	head0	dc.w	head1	dc.w	head2	dc.w	head3		dc.w	head4	dc.w	head5	dc.w	head6	dc.w	head7	dc.w	head8	dc.w	head9	dc.w	head10	dc.w	head11	dc.w	head12	dc.w	head13	dc.w	head14	dc.w	head15	dc.w	head16	dc.w	head17	dc.w	head18		dc.w	head19	dc.w	head20	dc.w	head21	dc.w	head22	dc.w	head23	dc.w	head24	dc.w	head25	dc.w	head26	dc.w	head27	dc.w	head28	dc.w	head29	dc.w	head30	dc.w	head31	dc.w	head32	dc.w	head33	dc.w	head34	dc.w	head35	dc.w	head36	dc.w	head37	dc.w	head38	dc.w	head39	dc.w	head40	dc.w	head41	dc.w	head42	dc.w	head43	dc.w	head44	dc.w	head45	dc.w	head46	dc.w	head47	dc.w	head48	dc.w	head49	dc.w	head50	dc.w	head51	dc.w	head52		dc.w	head53	dc.w	head54	dc.w	head55	dc.w	head56	dc.w	head57	dc.w	head58	dc.w	head59	dc.w	head60	dc.w	head61	dc.w	head62		dc.w	head63	dc.w	head64	dc.w	head65	dc.w	head66	dc.w	head67	dc.w	head68	dc.w	head69	dc.w	head70	dc.w	head71	dc.w	head72		dc.w	head73heads2:	dc.w	death10	;(74)	+61	dc.w	death11	dc.w	death12	dc.w	death13	dc.w	death14	dc.w	death15	dc.w	death16	dc.w	death17	dc.w	death18	dc.w	death19	dc.w	death110	dc.w	death111	dc.w	death112	dc.w	death113	dc.w	death114	dc.w	death115	dc.w	death116	dc.w	death117	dc.w	death118	dc.w	death119	dc.w	death120	dc.w	death121	dc.w	death122	dc.w	death123	dc.w	death124	dc.w	death125	dc.w	death126	dc.w	death127	dc.w	death128	dc.w	death129	dc.w	death130	dc.w	death131	dc.w	death132	dc.w	death133	dc.w	death134	dc.w	death135legs:	dc.w	legs0		;legs stand	dc.w	legs1		;walk 0	dc.w	legs2	dc.w	legs3	dc.w	legs4	dc.w	legs5	dc.w	legs6	dc.w	legs7	dc.w	legs8		;walk 7	dc.w	legs9	dc.w	legs10	dc.w	legs11	dc.w	legs12	dc.w	legs13	dc.w	legs14	dc.w	legs15	dc.w	legs16	dc.w	legs17	dc.w	legs18	dc.w	legs19	dc.w	legs20	dc.w	legs21	dc.w	legs22	dc.w	legs23	dc.w	legs24	dc.w	legs25	dc.w	legs26	dc.w	legs27	dc.w	legs28	dc.w	legs29	dc.w	legs30	dc.w	legs31	dc.w	legs32	dc.w	legs33	dc.w	legs34	dc.w	legs35	dc.w	legs36	dc.w	legs37	dc.w	legs38	dc.w	legs39	dc.w	legs40	dc.w	legs41	dc.w	legs42	dc.w	legs43	dc.w	legs44	dc.w	legs45	dc.w	legs46	dc.w	death30	;+47	dc.w	death31	dc.w	death32	dc.w	death33	dc.w	death34	dc.w	death35	dc.w	death36	dc.w	death37	dc.w	death38	dc.w	death39	dc.w	death310	dc.w	death311	dc.w	death312	dc.w	death313	dc.w	death314	dc.w	death315	dc.w	death316	dc.w	death317	dc.w	death318	dc.w	death319	dc.w	death320						