CLOUDTOP		EQU	16WINDOWTOP		EQU	2CLOUDBOTTOM		EQU	60WINDOWBOTTOM	EQU	190DOORTOP			EQU	10	DOORBOTTOM		EQU	167thecolors:	dc.b	$80,$40,$20	** Main Vertical Blank routine*	(Includes IRQ)*vblank	PROC	SET16	phb	pha	phx 	phy	SET8		 ** Spaghettini...*	lda	#0	pha	plb		lda	RDNMI			;clear interrupt	inc vblankcount** handle music volume control*;	lda	cputime;	and	#7;	cmp	#7;	bne	@noadjust;	lda	volumedir;	beq	@noadjust;	bpl	@up;	lda	volume;	cmp	#$e6;	bne	@keepdeccing;	lda	#tune_off;	sta	APU_PORT0;	bra	@killdir;@keepdeccing:;	dec	a;	dec	a;	dec	a;	dec	a;	cmp	#$e6;	bcs	@bartlow;	lda	#$e6;@bartlow;	sta	volume;	jsl	soundeffects;	bra	@noadjust;@up:;	lda	volume;	cmp	#$ff;	beq	@killdir;	inc	a;	sta	volume;	jsl	soundeffects;	bra	@noadjust;@killdir:;	stz	volumedir	** always move world level parallax*@noadjust:	lda	funnyhead	beq @moveplanet	lda	maptype	cmp	#worldlevel	bcc	@notworld	cmp	#worldlevel+3	bcs	@notworld	lda	cputime	and	#3	cmp	#3	bne	@notworld@moveplanet:	inc	Hpos2@notworld:** goto/return from inventory....*	lda	invengoto	beq	@tryreturn	dec	a	sta	invengoto	bne	@seebulb	jsr	endblack1@tryreturn:	lda	invenreturn	beq	@seebulb	dec	a	sta	invenreturn	bne	@seebulb	jsr	endblack2** flash bulb*@seebulb:	lda	enemyblind	beq	@trytele	lda	colordir	beq	@goingup@goingdown:	lda	colorstrength	dec	a	sta	colorstrength	cmp	startcolor	bne	@nochange	lda	colorval		;change colors...	inc	a	cmp	#3	bcc	@nostop	lda	#0@nostop	sta	colorval		stz	colordir@nochange:	bra	@nochange2@goingup:	lda	colorstrength	inc	a	sta	colorstrength	cmp	endcolor	bcc	@nochange2	inc	colordir@nochange2:	lda	#%00000001		;screen 1 only	sta	CGADSUB		lda	#%00000000		;color add/sub on	sta	CGSWSEL		lda	#$e0			;clear previous value!?!	sta	COLDATA	ldy colorval	lda	thecolors,y	clc	adc	colorstrength	sta	COLDATA			;intensity	jmp	@arrr2** handle teleport colors*@trytele:	lda	status	cmp	#teleported	beq	@isporting	jmp	@white2@isporting:	lda	fade	bne	@white2		;wait a bit		lda	teleportout	beq	@notout		lda	pointsgiven	beq	@white2	@notout:	lda	dimlights	beq	@dimmer		lda	sdmaflag	;if removing dmachars	cmp	#40	bne	@norest	jsr	restorepal3	;restore pallete@norest:	lda	#%00000000	sta	COLDATA	lda	#%00000010	sta	CGSWSEL	lda	#%00010000	sta	CGADSUB	lda	#BG1Subon+BG2SubOn+BG3SubOff+ObjSubOff	sta	TS			;sub on/off	bra	@eotel	** dim lights prior to teleport*@dimmer:	jsr	copy7to3	lda	cputime	and	#1	beq	@doit	lda	hotdata	bra	@noreset@doit:	lda	hotdir	beq	@hotup@hotdown:		lda	hotdata	dec a	cmp	#0	bne	@noreset	inc	dimlights	bra	@resetdir@hotup:	lda	hotdata	inc	a	cmp	#31	bne	@noreset@resetdir:	pha	lda	hotdir	eor	#1	sta hotdir	pla@noreset:	sta	hotdata	clc	adc	#$e0	sta	COLDATA	lda	#%00000000	sta	CGSWSEL	lda	#%10000001	sta	CGADSUB	lda	#BG1SubOn+BG2SubOff+BG3SubOff+ObjSubOff	sta	TS			;sub on/off@eotel:	bra	@arrr2	** ancient clouds???*@white2:@white3:	lda	#%00000000	sta	CGADSUB	sta	CGSWSEL@arrr2:** go white hot...*	lda	screenstate	beq	@arrr@flash:	lda	cputime	and	#1	bne	@noinc	inc	screenstate@noinc:	lda	screenstate	cmp	#$0	bne	@setcol	lda	#%00000000	sta	CGADSUB	sta	CGSWSEL		bra	@arrr@setcol	sta	COLDATA	lda	#%00000001	sta	CGADSUB	lda	#%00000000	sta	CGSWSEL@arrr:** music interrupt*	inc	frame	jsl	refreshsoundeffect	lda	dontallow	beq	@cando	jmp	@overshow	@cando:** process fade/mosaic*	@nowindowstuff:	lda	cputime			;half speed	and	#1	bne	@wind	jmp	@overshow@wind:	lda	fade	beq	@nofadeend	stz	fadecomplete	lda	fadecounter	clc	adc	fade	sta	fadecounter	sta	INIDISP	cmp	#0	beq	@fadeoutend	lda	maptype	cmp	#worldlevel	bcc	@scr3onz	lda	#BG1MainOn+BG2MainOn+BG3MainOff+ObjMainOn	bra	@settmz@scr3onz:	lda	#BG1MainOn+BG2MainOn+BG3MainOn+ObjMainOn@settmz:	sta	TM	 		;main/sub designation		lda	fadecounter	cmp	#15	bne	@nofadeend@fadeinend:	stz	fade	bra	@nofadeend@fadeoutend:	lda	#BG1MainOff+BG2MainOff+BG3MainOff+ObjMainOff	sta	TM	 		;main/sub designation		stz	fade@nofadeend:	lda	xmosaic	beq	@nobother	;nomosaic	lda	mosaiccounter	clc	adc	xmosaic	sta	mosaiccounter	cmp	#0	beq	@mosaicend	cmp	#15	bne	@nomosaicend@mosaicend:	stz	xmosaic@nomosaicend:	lda	mosaiccounter	asl	a	asl	a	asl	a	asl	a	ora	#7	sta	MOSAIC@nomosaic:	lda	pauseflag	;pause sets up its own screens	bne	@nobother@fading:	lda	fadecounter	bne	@show	lda	#BG1MainOff+BG2MainOff+BG3MainOff+ObjMainOff	sta	TM	 		;main/sub designation	bra	@overshow@show:	lda	maptype	cmp	#worldlevel	bcc	@scr3on	lda	#BG1MainOn+BG2MainOn+BG3MainOff+ObjMainOn	bra	@settm@scr3on:	lda	#BG1MainOn+BG2MainOn+BG3MainOn+ObjMainOn@settm:	sta	TM	 		;main/sub designation	@nobother:** process rest*@overshow:	lda	dontallow	beq	@dovb	jmp	@endvb	** update system timer*@dovb:	lda	pauseflag		;only count down when game is on	bne	@noswitch	lda	countdown	beq	@noswitch		lda	ticks			;do countdown...	beq	@switch	dec	ticks	bra	@noswitch@switch:	lda	seconds	beq	@decminute	dec	seconds	bra	@setticks	@decminute:	lda	minutes	beq	@noswitch	dec	minutes	lda	#59	sta	seconds@setticks:	lda	#59	sta	ticks@noswitch:	lda	ticks			;if all digits are 0..	ora	seconds	ora	minutes	bne	@alive	lda	status	cmp	#leavegoth	beq	@alive	cmp	#teleported	beq	@alive	lda	pauseflag	bne	@alive	lda	cputime	and	#1	jsr	justdrainstrength	;begin drain...@alive:** rest - o - crap*	jsr	dumpsprites		;draw sprites every cycle	lda	gamestart	bne	@doingit	jmp	@skip2@doingit:	cmp	#2	bne	@reggame	lda	status	cmp	#onworld	beq	@nosprchange	lda	alternate	and	#1	bne	@sprites@nosprchange:	jsr	DMAdownload		;intro stuff only	jmp	@skip2@sprites:	jsr	changesprites@nil:	jmp	@skip2	@reggame:	lda	mapnumber	cmp	#52	bne	@notdeath	jsr	cycledeath@notdeath:	lda	mapnumber	cmp	#3	bne	@nottonge	jsr	cycletonge@nottonge:	lda	maptype			;borg only	ora	pauseflag	bne	@nocycle		lda	gamestart		;when game on	beq	@nocycle		lda	world	cmp	#2	beq	@nocycle	jsr	monitorcolor	;give door monitors the right colors@nocycle:	lda alternate	and #1	bne @skipstuff@noskip:	lda	lockscreen	bne	@skipstuff@justdma:	lda	status	cmp	#dying	beq	@nohose	jsr DMAdownload		;always dump screen@nohose:	jmp @skip2@skipstuff:	lda	status	cmp	#onworld	beq	@preskip2		jsr	changesprites@anotherskip:	jsr	DMAdownloadtext	;control panels		lda	status	cmp	#teleported	beq	@fuckoff		lda	bobready	beq	@skip2		lda	status	cmp	#dying	bne	@nodeath3	lda	deathtype	cmp	#3	bne	@nodeath3	jsr	dmadeath3	bra	@pastdeath3@nodeath3:	jsr	dmaweapons	jsl	boxdma			;and any boxes@pastdeath3:** special animation...etc*	lda	pauseflag		;but not while paused!!!!	beq	@fuckoff@preskip2	bra	@skip2@fuckoff:	jsl spritedma		;generic sprite DMA routine - NEW!!!		@gohere:;	lda	lockscreen;	bne	@skip2		lda	mapnumber		;no anim for door lifter	cmp	#40	bne	@animstuff	jsr	movedoor	bra	@skip2@animstuff:	lda	maptype	cmp	#ultralevel	bne	@tryborg	jsl	animateultra	;in passsprite	bra	@skip2@tryborg:	cmp	#borglevel	bne	@trybug	jsl	animatezap	jsl	animatezap2	bra	@skip2@trybug:	cmp	#lavalevel	bne	@trybuggs2	jsr	animatefirelava	bra	@skip2@trybuggs2:	cmp	#buglevel	bne	@nobugs	lda	bosslevel		;diff anim for queen	beq	@regbug	jsl	animatequeenbug	bra	@skip2@regbug	jsr	animatelava	bra	@skip2@nobugs:	cmp	#ancientlevel	bne	@skip2	jsr	animateancientlava2@skip2:** update scroll stuff*	lda #0	pha	plb		lda shakescreen		;shake the screen?	beq @shake		dec shakescreen		;reduce count@shake:	lda shakescreen	lsr a	tay	lda shaketable,y	sta tempvbl		;	lda introflag		;chris intro hack fix;	beq @notanintro	;	;	lda	#8;	sta	tempvbl;	;@notanintro:	lda Vpos	clc	adc tempvbl	sta newVpos		lda	HPos			; set scroll position	sta	BG1HOFS	stz	BG1HOFS	lda newVpos	sta BG1VOFS	stz BG1VOFS** parallax/inventory screen*;	lda	pauseflag;	beq	@parallax;	cmp	#6;	beq	@parallax;	lda	#4;	sta	BG2HOFS;	stz	BG2HOFS;	lda	#4+24;	sta	BG2VOFS;	stz	BG2VOFS;	jmp	@pausedone	@parallax:		lda VPos2	sta BG2VOFS	stz BG2VOFS		lda	Hpos3		;screen 3	sta	BG3HOFS	stz	BG3HOFS		lda	mapnumber		;ultra force parallax	cmp	#54				;keep centred...	bne	@notuf	lda	enterpassword	bne	@notuf	lda	#4	sta	BG2HOFS	stz	BG2HOFS	lda	#56	sta	BG2VOFS	stz	BG2VOFS	bra	@dohdma@notuf;	cmp	#40				;ignore for screen lifter;	beq	@dohdma	lda	Hpos2			;regular	sta	BG2HOFS	stz	BG2HOFS	lda	Vpos2			;regular	sta	BG2VOFS	stz	BG2VOFS** hdma *@dohdma:	stz	HDMAEN		; clear H-dma	lda bobready	beq @skipthis	;	jsl paralax_hdma	@skipthis:	lda enemyblind	beq @nohdma		lda	#%00000000	sta	$4300			; hdma mode		lda	#<hdmadata				sta	$4302			; data table address low		lda	#>hdmadata						sta	$4303			; data address high	lda #0	sta $4304			;data bank	lda	#$0d				sta	$4301			; b-bus addr - fuck with hscroll values		lda #100		;200	sta $430a			;number of lines to transfer to screen			lda	#1	sta	HDMAEN		; turn on H-dma@nohdma:	lda fuckscreen	beq @nohdma2		lda	#%00000000	sta	$4300			; hdma mode		lda	#<hdmadata				sta	$4302			; data table address low		lda	#>hdmadata						sta	$4303			; data address high	lda #0	sta $4304			;data bank	lda	#$0d				sta	$4301			; b-bus addr - fuck with vscroll and hscroll values		lda	#1	sta	HDMAEN		; turn on H-dma	@nohdma2:; special hdma test over*******************************************@pausedone:	dec	vbip		lda	#1	sta	happened@endvb:	SET16	ply	plx	pla	plb	rti	SET8** IRQ Routine*IRQblank	proc	SET16	phb	phy	phx	pha	SET8		lda	#0	pha	plb		lda	TIMEUP	;clear the interrupt	** game is paused*	lda	pauseflag	beq	@notpaused		lda	#8@windsor6a:	nop		dec	a	bne	@windsor6a		lda	IRQnum	inc	a	and	#1	sta	IRQnum	bne	@pint1@pint0:	lda	#4	sta	BG2HOFS	stz	BG2HOFS	lda	#4+24	sta	BG2VOFS	stz	BG2VOFS	lda	#WINDOWBOTTOM	sta	VTIMEL	lda timeup	lda	#%01110111	sta	W12SEL		;open hole in screen	lda	#%00000011					sta	WOBJSEL		jmp	exitint@pint1:	lda	#WINDOWTOP	sta	VTIMEL	lda	timeup	lda	#%11111111	sta	W12SEL		;cover back up	lda	#%00001111					sta	WOBJSEL			jmp	exitint	** process interrupt*	@notpaused:@notuf:	lda	gamestart	beq	@notlifter	lda	mapnumber	cmp	#40				;screen lifter	bne	@notlifter	jmp	@screenlifter** regular interuupt*@notlifter:@bugint:	lda	#10@windsor6:	nop		dec	a	bne	@windsor6		lda	IRQnum	inc	a	and	#1	sta	IRQnum	bne	@bint1@bint1a:	lda	#%01110111	sta	W12SEL		;open hole in screen	lda	#%00000011					sta	WOBJSEL		lda	#WINDOWBOTTOM	sta	VTIMEL	lda	timeup	jmp	exitint@bint1:	lda	#WINDOWTOP	sta	VTIMEL	lda	timeup	lda	introflag	bne	@nowindow	lda	maptype	cmp	#worldlevel	bcs	@nowindow	lda	#%11111111	sta	W12SEL		;cover back up	lda	#%00001111					sta	WOBJSEL		@nowindow:	jmp	exitint** screen lift interrupt code map #40*@screenlifter:** open hole in window and set where door bottom is*@doitt:		lda	IRQnum			;set next interrupt line	bne	@see1	lda	backdoor	cmp	#DOORBOTTOM	beq	@regularxx		lda	#9@windsorx:	nop		dec	a	bne	@windsorx		lda	#%01110111	sta	W12SEL		;open hole in screen	lda	#%00000011					sta	WOBJSEL					lda	#DOORBOTTOM	sec		sbc	backdoor	sta	doortemp	lda	Vpos	clc	adc	doortemp	sta	BG1VOFS	stz	BG1VOFS	lda	backdoor	sta	VTIMEL	lda	timeup	lda	#2	sta	IRQnum		jmp	exitint@regularxx:	lda	#10@windsor:	nop		dec	a	bne	@windsor	lda	#%01110111	sta	W12SEL			lda	#%00000011					sta	WOBJSEL				lda	backdoor	sta	VTIMEL	lda	timeup	lda	#2	sta	IRQnum	jmp	exitint		** turn window mask on*@see1:	cmp	#1	bne	@see2		lda	#%11111111	sta	W12SEL		;cover screens 1 and 2	lda	#%00001111					sta	WOBJSEL		;cover objects	lda	#WINDOWTOP	sta	VTIMEL	lda	timeup	stz	IRQnum	jmp	exitint	** turn screen off for open door*@see2:	cmp	#2	bne	@see3		lda	#5@windsor2a:	nop		dec	a	bne	@windsor2a		lda	#3	sta	IRQnum	lda	#DOORBOTTOM+1		;where floor starts				sta	VTIMEL	lda	timeup	lda	backdoor	cmp	#DOORBOTTOM	beq	@noline		lda	#BG1MainOff+BG2MainOn+BG3MainOn+ObjMainOn	sta	TM@noline:	jmp	exitint	** turn screen on for floor*@see3	lda	#5@windsor2b:	nop		dec	a	bne	@windsor2b		lda	#WINDOWBOTTOM	sta	VTIMEL	lda	timeup	lda	#1	sta	IRQnum	lda	lockscreen	beq	exitint			lda	#BG1MainOn+BG2MainOn+BG3MainOn+ObjMainOn	sta	TM	lda	Vpos	sta	BG1VOFS	stz	BG1VOFS	** exit point*exitint:	SET16	pla	plx	ply	plb	rti	SET8;---------------------------shaketable:		;table of shakescreen values	dc.b  0,1,2,0,3,0,4,0,5,0,6,0,7,0,8,0,8,0;----------------------------------------------------------------------------	hdma:			;special hdma stuff	lda enemyblind	beq @noeffect		phx		ldy #0		lda TSKclock	lsr a	clc	adc vpos	and #15	tax	@hdma:	lda hpos	clc	adc wackyoffset,x	sta hdmadata+1,y		inx	txa	and #15	tax		iny		cpy #200	bcc @hdma			lda #128+127	sta hdmadata	lda #128+65	sta hdmadata+128		plx	@noeffect:	lda fuckscreen	bne @vscroll_hdma		rts	@vscroll_hdma:			;effect - use with bomb?	dec fuckscreen		phx		ldy #0		lda fuckscreen	sta temp		lda TSKclock	eor fuckscreen	and #15	tax	@hdma2:	tya	and #1	bne @line2		lda hpos	adc bombblastoffset,x	adc temp	bra @nextline	@line2:	lda hpos	adc bombblastoffset,x	sbc temp	@nextline:	sta hdmadata+1,y		inx	txa	and #15	tax		iny		cpy #200	bcc @hdma2			lda #128+127	sta hdmadata	lda #128+65	sta hdmadata+128		plx	rts	wackyoffset:	dc.b	-3,-2,0,2,3,4,4,4,3,2,0,-2,-3,-4,-4,-4	;	dc.b	1,2,4,6,7,8,8,8,7,6,4,2,1,0,0,0	bombblastoffset:;	dc.b	-8,16,4,20,5,-10,3,6,0,13,-10,-6,2,-4,12,-7	dc.b	-8,6,4,2,5,-1,3,-6,0,3,-4,-6,2,-4,3,-7;--------------------------------------------------------------------** move screen lifters door*movedoor:	lda	doorknob	;see if door moving up or down!	beq	@still	bmi	@goingup@goingdown:	lda	backdoor	inc	a	inc	a	inc	a	inc	a	inc	a	cmp	#DOORBOTTOM	bcc	@stillcomingdown	stz	doorknob	lda	#DOORBOTTOM@stillcomingdown:	sta	backdoor	bra	@still@goingup:	lda doorspeed	lsr a	lsr a	sta temp	lda	backdoor	sec	sbc temp	cmp	#DOORTOP	bcs	@stillgoingup	stz	doorknob@stillgoingup:	sta	backdoor@still:	rts