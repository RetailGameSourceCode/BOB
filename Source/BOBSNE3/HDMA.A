paralaxfade:	phx					;fade from light to dark, 1/2 screen for skies		ldy #200	@blank	lda #0	sta hdmadata,y	dey	bne @blank			ldy #0	ldx #116@hdma3:	txa	lsr a	lsr a	lsr a	and #%00011111	ora #128		;blue 	sta hdmadata+1,y		iny		cpx #0				;stop at blackness	beq @skipdec	dex @skipdec:	cpy #200	bcc @hdma3			lda #128+127	sta hdmadata	lda #128+65	sta hdmadata+128		plx	rtlparalaxfade2:	phx					;add fog to screen (fade from black to white at bottom)		ldy #80	@blank	lda #128+64+32	sta hdmadata,y	dey	bne @blank		ldy #80	@hdma3:	tya	sbc #80	lsr a	lsr a	lsr a	and #%00011111	ora #%10100000					;white fade	sta hdmadata+1,y		iny		cpy #200	bcc @hdma3			lda #128+127	sta hdmadata	lda #128+65	sta hdmadata+128		plx	rtlparalaxfade3:	phx					;fade from dark to light, start 60 pixels down screen		ldy #60	@blank	lda #32	sta hdmadata,y	dey	bne @blank		ldy #60	@hdma3:	tya	sbc #60	lsr a	lsr a	lsr a	and #%00011111	ora #32			;128+64+32				;white fade	sta hdmadata+1,y		iny		cpy #200	bcc @hdma3			lda #128+127	sta hdmadata	lda #128+65	sta hdmadata+128		plx	rtl	;--------------------------------------------------------------------------paralax_hdma:	;this does the paralax pallette		lda	#%00000010		;affect paralax only	sta	CGADSUB		lda	#%00000000		;color add/sub on	sta	CGSWSEL		lda	#%00000000	sta	$4300			; hdma mode		lda	#<hdmadata				sta	$4302			; data table address low		lda	#>hdmadata						sta	$4303			; data address high	lda #0	sta $4304			;data bank	lda	#$32				sta	$4301			; b-bus addr - change paralax colours		lda #100		;200	sta $430a			;number of lines to transfer to screen			lda	#1	sta	HDMAEN		; turn on H-dma	rtl;------------------------------------------------mode7:		;special mode 7 code	lda TSKclock	lsr a	lsr a	and #15	tay;	lda zoomout,y	rts	;------------------------------------------------------------------------** crushing walls*crushingwall:		jsl	PICput			;draw dummy	dw	crushwall0		lda	#2	sta	PICbank,x		lda	#5	sta	PICcolor,x		lda	#2	sta	PICscroll,x		lda	#1	sta	PICprior,x		lda	#type_wall	sta	PICtype,x		jsl	TSKsuspend		lda	PIClogic,x	bne	@use2		lda	walldir1	cmp	#1	bne	@nosound	lda	wallcount1	cmp	#7	bne	@nosound	lda	walldelay1	cmp	#29	bcc	@nosound	lda	#SFXEXPLODE2	jsl	soundeffects@nosound:	lda	wallcount1	ldy	walldir1	bra	@setcount@use2:	lda	walldir2	cmp	#1	bne	@nosound2	lda	wallcount2	cmp	#7	bne	@nosound2	lda	walldelay2	cmp	#29	bcc	@nosound2	lda	#SFXEXPLODE2	jsl	soundeffects@nosound2:	lda	wallcount2	ldy	walldir2@setcount:	sta	PICcount,x	clc	adc	#25	sta	PICsize,x	tya	sta	PICdirv,x		lda	PICcount,x	asl	a	tay	lda	wallframes,y	sta	tmp	lda	wallframes+1,y	sta	tmp+1	jsl	PICput2	rtl	** global wall move routine*movewall1:	lda	enemyblind	beq	@continue	lda	walldir1	bne	@continue	lda	wallcount1	bne	@continue	rtl@continue:	lda	walldelay1	beq	@movingwall@waiting:	dec	walldelay1	rtl@movingwall:	lda	walldir1	bne	@comingup@goingdown:	lda	wallcount1	inc	a	sta	wallcount1	cmp	#7	bcc	@drawwall	lda	#30	sta	walldelay1	lda	#1	sta	walldir1	bra	@drawwall@comingup:	lda	wallcount1	dec	a	sta	wallcount1	bne	@drawwall	lda	#60	sta	walldelay1	stz	walldir1	lda	#1	sta	makewallsound1@drawwall:	rtl** global wall move routine*movewall2:	lda	enemyblind	beq	@continue	lda	walldir2	bne	@continue	lda	wallcount2	bne	@continue	rtl@continue:	lda	walldelay2	beq	@movingwall@waiting:	dec	walldelay2	rtl@movingwall:	lda	walldir2	bne	@comingup@goingdown:	lda	wallcount2	inc	a	sta	wallcount2	cmp	#7	bcc	@drawwall	lda	#30	sta	walldelay2	lda	#1	sta	walldir2	bra	@drawwall@comingup:	lda	wallcount2	dec	a	sta	wallcount2	bne	@drawwall	lda	#60	sta	walldelay2	stz	walldir2@drawwall:	rtl	wallframes:	dc.w	crushwall0	dc.w	crushwall1	dc.w	crushwall2	dc.w	crushwall3	dc.w	crushwall4	dc.w	crushwall5	dc.w	crushwall6	dc.w	crushwall7	crushwall0: dc.b $04 dc.b $88,$60,$B7 dc.b $80,$60,$B6 dc.b $C8,$60,$B5 dc.b $D0,$60,$B4crushwall1: dc.b $02 dc.b $80,$E0,$A6 dc.b $D0,$E0,$A4crushwall2: dc.b $06 dc.b $88,$60,$A7 dc.b $80,$60,$A6 dc.b $C8,$60,$A5 dc.b $D0,$60,$A4 dc.b $80,$D8,$A6 dc.b $D0,$D8,$A4crushwall3: dc.b $04 dc.b $80,$D0,$A6 dc.b $D0,$D0,$A4 dc.b $80,$E0,$96 dc.b $D0,$E0,$94crushwall4: dc.b $08 dc.b $88,$60,$A7 dc.b $80,$60,$A6 dc.b $C8,$60,$A5 dc.b $D0,$60,$A4 dc.b $80,$C8,$A6 dc.b $D0,$C8,$A4 dc.b $80,$D8,$96 dc.b $D0,$D8,$94crushwall5: dc.b $06 dc.b $80,$80,$A6 dc.b $D0,$80,$A4 dc.b $80,$D0,$96 dc.b $80,$E0,$96 dc.b $D0,$D0,$94 dc.b $D0,$E0,$94crushwall6: dc.b $08 dc.b $D0,$E0,$94 dc.b $80,$E0,$96 dc.b $80,$90,$A6 dc.b $D0,$90,$A4 dc.b $80,$80,$96 dc.b $80,$D0,$96 dc.b $D0,$80,$94 dc.b $D0,$D0,$94crushwall7: dc.b $0A dc.b $80,$E0,$96 dc.b $D0,$E0,$94 dc.b $80,$A0,$A6 dc.b $D0,$A0,$A4 dc.b $80,$90,$96 dc.b $80,$D0,$96 dc.b $80,$80,$96 dc.b $D0,$90,$94 dc.b $D0,$D0,$94 dc.b $D0,$80,$94