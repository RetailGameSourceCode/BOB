** Main Bob module...*** Bob code jump points*cheat		equ	0			;0=no cheat mode set, 1=cheat mode set (stoke allowed)jumplabels:	dc.w	bobfidget	;dead	dc.w	bobdying		dc.w	bobwalk			dc.w	bobfidget	dc.w	bobjump	dc.w	bobcrouch	dc.w	bobfalling	dc.w	bobclimb	dc.w	bobhandoverhand	dc.w	bobremote	dc.w	bobelevator	dc.w	bobridebubble  	dc.w	bobteleport	dc.w	bobwindblown		dc.w	bobscooter	dc.w	bobspaceship	dc.w	bobpickup	dc.w	bobstopping	dc.w	boblanding	dc.w	bobbuttsplat	dc.w	bobwallsplat	dc.w	bobswitchpull	dc.w	bobrecoil	dc.w	bobgiveitem	dc.w	bobblasted	dc.w	bobsleep	dc.w	bobleavegoth	dc.w	bobwhackhead	dc.w	bobrideplatform		CentreY		equ		176-32-48+24-16CentreX		equ		$80MAXleft		equ		20MAXright	equ		240SPLATD		equ		200LANDD		equ		120LADDERREACH equ		-2HANDREACH	equ		4deathsounds:	dc.b	SFXCRUMBLEDEATH	dc.b 	0	dc.b	0	dc.b	SFXEXPLODE2	dc.b	SFXMELTDEATH	** shortt calls elongated*startjump2l:	jsr	startjump2	rtl	justdrainstrengthl:	jsr	justdrainstrength	rtl	drainstrengthl:	jsr	drainstrength	rtl		** Bob task...*loadbobtask:	stz	bobready			;kill screen	jsr	dofadeout@wait:	jsl	TSKsuspend	lda	fade	beq	@done	rtl@done:** bobo won...get next level*	lda	winflag2	bpl	@loser		jsr	extractworld	inc	mapsequence		;next map please		lda	mapsequence	cmp	temp	bcc	@fine	stz	mapsequence	inc	world	lda	world	cmp	#3	bcc	@playon	stz	world@playon:	jsr	extractworld	stz	mapsequence@fine:	jsr	extractworld	ldy	mapsequence	lda	(tmp),y	sta	mapnumber	bra	@loser2** else just reset variables*@loser:	lda	#type_bob	jsl	TSKschedule	dw	weapondribble	stz	weapon				;gun	lda	#3	sta	remote				;and springs	lda	#maxstrength	sta	strength@loser2:	stz	winflag2	stz	winflag	stz	bobready	jsr	loadwholekit	jsl	restartgame	stz	bobready	** entry point from map select*bobtask:	lda bossbehind	bne @other	lda #%00100000		;clear all task & pic variables 	bne @setbehind@other:	lda #%00010000@setbehind:	sta PICbehind1,x;	lda	#8;	jsr	rightscroll;	jsr	mainscroll		lda	demoflag			;demo power up	beq	@ignore	lda	#8	jsr	rightscroll	lda	#20	sta	strength@ignore:	lda	passwordcheat	beq	@regular	stz	passwordcheat	jsl	startmaxgamestuff	bra	@stoked@regular:	ldy	#0					;always start level with	lda	weaponcount,y		;at least 25 bullets	cmp	#25	bcs	@stoked	lda	#25	sta	weaponcount,y@stoked:	lda	#CentreX	sta	PICxlo,x	sta	bobxpos	lda	#CentreY	sta	PICylo,x	sta	bobypos	stz	fallcount	stz	jumpyspeed 	stz	holdcycles	stz	framecount	stz	frameticks		stz	accelcount	stz	decelcount		stz	bobmd			;direction allowed to move	stz	bobmu	stz	bobml	stz	bobmr		stz	interacting	stz	blinkcount	lda	#12	sta	bobsizex	asl	a	sta	bobsizey	stz	boboffsetx	stz	boboffsety		stz	takeoff** loop starts here*startbob:	jsl	TSKsuspend		;top of the loop		stz	PICbank,x	** has he won...wait for landing*	jsr hdma				;chris added this call!!!!!	lda	waitforwin	beq	@nowait	lda	status	cmp	#falling	beq	@nowait	cmp	#jumping	beq	@nowait	jsr	setupwin@nowait:** upon init....wait for bob to get positioned*	lda	bobready		;has level started	bne	@gameison	lda	status			;no...but allow to fall	cmp	#falling		;till in position	beq	@gameison		@nosleep:	jsr	dofadein@notready:	inc	bobready	lda	status			;teleport	cmp	#rideship	beq	@gameison	lda	doteleport	beq	@gameison	** init teleport stuff*	stz	doteleport		jsl	initteleport	lda	#teleported	sta	status	stz	PICadrLo,x	stz	PICadrHi,x	@notyet:	rtl** damage check*	@gameison:	lda	#1	sta	gamestart		;signal timer...	sta	countdown		lda	#0	sta	PICattr,x	sta	PICcolor,x	lda	status	cmp	#dying	beq	@borgzsuck		lda	hurtpal			;is bob in middle of hurt?	beq @lookforit	dec	a	sta	temp	lda	hurttype		;get type	and	#3	asl	a	tay		lda	hurtheads,y		;extract head	sta	tmp	lda	hurttorsos,y	;and torsos to show pain	sta	tmp+2	iny	lda	hurtheads,y	sta	tmp+1	lda	hurttorsos,y	sta	tmp+3		ldy	temp	lda	(tmp),y			;end ?	cmp	#99	bne	@stillhurt	stz	hurtpal	;	stz	bobhurt	bra	@borgzsuck@stillhurt:	sta	hurthead		;save head		lda	(tmp+2),y	sta	hurttorso		;and torso	inc	hurtpal			;next entry	bra	@borgzsuck@lookforit:	** damage bob*@hurt:;	lda	bobhurt			;if external hurt is set....;	beq	@borgzsuck;@dechealth:;	lda	#5;	jsr	drainstrength	** kill bob in needed*@borgzsuck:	lda	strength	bne	@alive	lda	status			;ignore if set	cmp	#dying	beq	@alive	lda	squished	beq	@notapancake	lda	status			;if crouching...continue	cmp	#crouching		;to flatten	bne	@nope	lda	#2					sta	deathcount@nope:	lda	#2	bra	@setdeath@notapancake:	lda	status	cmp	#walking	beq	@crumble	cmp	#crouching	bne	@blowup@crumble:	jsr	bobonsolid	bcc	@blowup		lda	mustmelt		;always melt when a bg drain	beq	@crummy	lda	#4	bra	@setdeath		;melt@crummy:	lda	#0				;crumble death	bra	@setdeath@blowup:	stz	deathcount	lda	#3				;shrapnel@setdeath:	sta	deathtype	tay	lda	deathsounds,y	beq	@nosound	jsl soundeffects@nosound:	lda	#dying	sta	status	jsr	clearscroll2	jsr	clear_halfscroll	jsr	removeweapontasks** keep remote attached to head*@alive:	lda	remoteonhead	beq	@noremote	tay	lda	turncount	beq	@trystr	lda	#0	beq	@add@trystr:	lda	walkdir	bmi	@sub	lda	#4	bne	@add@sub:	lda	#-4@add	clc	adc	bobxpos	sta	PICxlo,y	lda	bobypos	sec	sbc	bobsizey	clc	adc	boboffsety	sec		sbc	#8	sta	PICylo,y	lda	PIClogic,y	cmp	#2	bne	@noremote	tyx	lda	#-6	jsl	PICyadd	ldx	TSKcurrent@noremote:	** init some variables*	stz	accelflag	stz	bobxmove		;speed moved	stz	bobymove		lda	punchflag		;torso action	ora	dpremflag;	ora	chuckflag;	ora	throwflag	sta	bodyflag		stz	enoughdrain	stz	islooking		;magic scroll	stz	bobinjured		;	** remote general*	lda	enemydie	beq	@notover	dec	enemydie** check to see if Bob should blink*@notover:	lda	blinkcount			;if bob is doing a funny head move....	beq	@startheadfidget	;then see if should be aborted	lda	gundir	bne	@killblink	lda	bobshield	bne	@killblink	lda	status	cmp	#walking	beq	@seefidget	cmp	#jumping	beq	@seefidget	cmp	#crouching	beq	@seefidget	cmp	#handmove	beq	@seefidget@killblink:	stz	blinktimer	stz	blinkcount	bra	@seefidget	@startheadfidget:	lda	status				;ok...so bob's head is normal	cmp	#walking			;then lets do something funny!!!	beq	@trystart	cmp	#jumping	beq	@trystart	cmp	#crouching	beq	@trystart	cmp	#handmove	bne	@seefidget@trystart:	lda	cputime	and	#3	cmp	#3	bne	@seefidget	lda	blinktimer	inc	a	sta	blinktimer	cmp	#100	bcc	@seefidget	inc	blinkcount	inc	blinktype	stz	blinktimer	** check to see if Bob should fidget*@seefidget:	lda	status			;Bob can only fidget when	cmp	#fidgeting	beq	@endfidget	cmp	#walking		;in walk mode	bne	@clearfidget		lda	bobshield	bne	@clearfidget		lda	hurtpal			;not if getting hurt	bne	@clearfidget		lda	Joy1Data			;If any joystick activity is	and	#$f0				;detected....clear all fidget	bne	@clearfidget		;counters	lda	Joy1Data+1	and	#$ff	bne	@clearfidget	inc	fidgetticks		;else continue counting.	lda	fidgetticks	cmp	#60	bcc	@endfidget	stz	fidgetticks	inc	fidgetcount	lda	fidgetcount		;and at 10 seconds put Bob	cmp	#7				;in fidget mode	bcc	@endfidget	lda	#fidgeting	sta	status	inc	fidgettype	stz	fidgettoggle@clearfidget:	stz	fidgetcount	stz	fidgetticks@endfidget:	** Weapon Firing Delays*	lda	weapondelay		;countdown all delays...	beq	@see1	dec	weapondelay@see1:	lda	remotedelay	beq	@see3	dec	remotedelay@see3:** synch up external platfroms and walls*	jsl	movewall1	jsl	movewall2** see if bob is punching...*	lda	punchflag		;if punching, continue 	beq	@seedeploy		;with in betweens	lda	frameticks	bne	@docode	inc	punchflag	lda	punchflag	cmp	#6	bcc	@docode	stz	punchflag** or deploying remotes*@seedeploy	lda	dpremflag		;remotes..	beq	@docode	lda	frameticks	bne	@docode	inc	dpremflag	lda	dpremflag	cmp	#7	bcc	@docode	stz	dpremflag	** now execute Bob's code based on his status*	@docode:	lda	laddercatch	beq	@cool	dec	laddercatch@cool:	lda	centrescroll	bne	@codedone	lda	status			;ignore joystick if	cmp	#walking		;dying....	bcc	@nostick	jsr	processjoystick	;else debounce it!@nostick:		lda	status			;now execute code based	asl	a				;on Bob's status	tay	lda	jumplabels,y	sta	tmp	iny	lda	jumplabels,y	sta	tmp+1		jsr	jsrcode			;jmp to jsr call** now process repurcussions*@codedone:	lda	status	cmp	#drivescooter	beq	@noneed	jsr	accelbob		;process any speedups@noneed:** process all collisions*@norev:	lda	status			;scooter checks for other scooters	cmp	#dying	bne	@others	jmp	@nomove			;donothing@others:	cmp	#drivescooter	bne	@regsprites	jsr	backcollide	jsr	scooterfix		;check centre of scooter	bra	@ignoresprites@regsprites:@walksprites:	jsr	bobfix	jsr	backcollide		;walls man	** platform code*@nocoll:	lda	lockscreen	bne	@ignoresprites		lda	#24	ldy	#28	jsl	platformstand	;hard code platforms@ignoresprites:	jsr	checkfist		;punch anyone	jsr	spritedrain		;touching anyone...@nostuff:** make look down*		lda	islooking	beq	@recentre	lda	lookbelow	cmp	#40	beq	@leavescroll	cmp	#16	bcc	@gayadam	inc	bobymove	inc	bobymove	lda	#-2	jsl	PICyadd	lda	whichplatform	beq	@gayadam	tax	lda	#-2	jsl	PICyadd	lda #-2	sta	PICmovev,x	ldx	TSKcurrent@gayadam:	inc	lookbelow	bra	@leavescroll@recentre:	lda	status			;readjust when on ladder	cmp	#climbing	beq	@robrecen	lda	bobmd	beq	@leavescroll@robrecen:	lda	lookbelow	beq	@leavescroll	cmp	#17	bcc	@gayadam2	inc	PICylo,x	inc	PICylo,x	dec	bobymove	dec	bobymove	lda	whichplatform	beq	@gayadam2	tax	lda	#2	jsl	PICyadd	lda #2	sta	PICmovev,x	ldx	TSKcurrent@gayadam2:	dec	lookbelow@leavescroll:** move and scroll*	lda PICylo,x	sta	bobypos		lda	PICxlo,x			sta	bobxpos;	lda	gundir;	bne	@nomove	jsr	movevert		;process y movement	jsr	movehoriz		;and x movement@nomove:	jsr	mainscroll 		;background update@donothing:	lda	turncount		;turning handles flipping on its own	bne	@noflip	lda walkdir			;make him face the correct direction	cmp #faceright	beq @noflip@yesflip:	jsl	PICxflip@noflip:		jsr	drawbob			;update frames and draw bob	lda PICylo,x	sta	bobypos		lda	PICxlo,x			sta	bobxpos	** put dribble on gun...*	lda	status	cmp	#dying	bne	@keepon	lda	deathtype	cmp	#3	beq	@nokeepon@keepon:	jsr	keepdribbleongun@nokeepon:	jsl	activatedead	;if bob has picked a new item up...see if systems need restart	lda	cputime	and	#1	bne	@nopanel	jsl	updatepanel@nopanel	rtljsrcode:	jmp	(tmp)** bob is toast*bobdying:	lda	deathtype	beq	@acrum	cmp	#4				;melt	bne	@nocrumble@acrum	jmp	@crumble@nocrumble:	cmp	#1	beq	@blowup	cmp	#3	beq	@shrapnel** pancake man*@getsquished	lda	deathcount	cmp	#4	bcc	@carryonx	inc	deathdelay	lda	deathdelay	cmp	#90	bcc	@notdeadyetx	lda	fade	bne	@notdeadyetx	jsr	dofadeout	lda	#-1	sta	winflag	rts@carryonx	lda	frameticks	bne	@notdeadyetx	stz	deathdelay	inc	deathcount@notdeadyetx:	rts** shrapnel parts (plays with weapon dribble)*@shrapnel:	lda	deathcount	cmp	#17	bcc	@carryonxj	lda	#4				;drop the head off the bottom	jsl	PICyadd	lda	PICylo,x	cmp	#230	bcc	@notdeadyetxj;	inc	deathdelay;	lda	deathdelay;	cmp	#90;	bcc	@notdeadyetxj	lda	fade	bne	@notdeadyetxj	stz	deathtype	stz	deathcount	jsr	dofadeout	lda	#-1	sta	winflag	rts@carryonxj:	lda	cputime	and	#1	bne	@notdeadyetxj	stz	deathdelay	inc	deathcount@notdeadyetxj:	lda	deathcount	asl	a	tay	lda	shrapneldeath0,y	sta	tmp	lda	shrapneldeath0+1,y	sta	tmp+1	jsl	PICput2	rts	** lots of pieces*@blowup:;	inc	deathtimer		;blow up bob;	lda	deathtimer;	cmp	#120;	bcs	@over;	and	#7;	cmp	#7;	beq	@doexpl;	rts;@doexpl:;	lda	#type_enemy;	jsl	TSKschedule;	dw	blowupbob2;	rts;@over:;	cmp	#190;	bcc	@notover	lda	fade	bne	@notover	jsr	dofadeout	lda	#-1	sta	winflag@notover:	rts** crumble to dust or melt..*@crumble:	lda	deathcount	cmp	#13	bcc	@carryon		lda	sdmaflag	and	#1	beq	@await		lda	#1	sta	bobtalks		inc	deathdelay	lda	deathdelay	cmp	#90	bcc	@notdeadyet	lda	fade	bne	@notdeadyet	jsr	dofadeout	lda	#-1	sta	winflag@await:	rts@carryon	lda	frameticks	bne	@notdeadyet	stz	deathdelay	inc	deathcount	lda	deathcount	cmp	#12	bcc	@notdeadyet	lda	#48				;get some text...when bob dies	sta	sdmaflag@notdeadyet:	rts	** bob is just standing*bobstopping: 	lda	bobmd			;if no ground below...	bne	@keepskid	lda	#2	jsr	setfall	rts@keepskid:	jsr	preventskid		;if hit wall...stop..	bcs	@makewalk	lda	decelcount	cmp	#MAXDECEL	beq	@enddecel		lda	Joy1Data+1		;allow crouching while stopping	and	#JoyDown	beq	@tryturn	jsr	setcrouch	bcc	@tryturn	rts@tryturn:	lda	walkdir			;allow to turn while skidding	bmi	@left	lda	Joy1Data+1	and	#JoyLeft	bne	@turnhim	rts@left:	lda	Joy1Data+1	and	#JoyRight	bne	@turnhim	rts@turnhim:	jsl	doingwhat			bcc	@enddecel	jsr	startturn	bcc	@enddecel@makewalk:	lda	#walking	sta	status@enddecel:	rts** Bob is in his most common position (walking)*bobwalk:	lda	bobmd			;if no ground below...	bne	@onground	lda	#2	jsr	setfall	rts** turning bob*@onground:	lda	turncount		;check turning flag	beq	@notturning@cannotturn:	rts**	Bob is not turning,  he then must be walking*@notturning:	lda	Joy1Data+1				;if not hitting move stick...	and	#JoyRight+JoyLeft	bne	@moving	lda	accelcount				;if not started moving...		bne	@makemove	jmp	@seedown@makemove:	lda	accelcount				;and if not stopped	beq	@moving	cmp	#24						;or moving slow...	bcc	@slowmoving		lda	#SFXSKID	jsl	soundeffects	lda	#stopping				;then skid to halt	sta status	stz	decelcount	rts@slowmoving:	lda	#0	sta	accelcount	@moving:	lda	Joy1Data+1		;pushing right?	and	#JoyRight	beq	@seeleft	lda	walkdir		;if facing right	cmp	#faceright	bne	@turnright		lda	bobmr		;if has hit wall...	beq	@cango	lda	bodypoints	;with whole body	cmp	#5	bcc	@no	lda	accelcount	;while full out	cmp	#MAXACCEL	bne	@no	jsr	setsplat@no:	jsr	fullstop	rts	@cango:	lda	#1	sta	accelflag	jmp	@seedown@turnright:	jsr	startturn	;check left move@seeleft:	lda	Joy1Data+1		;pushing left?	and	#JoyLeft	beq	@seedown	lda	walkdir		;if facing left	cmp	#faceleft	bne	@turnleft		lda	bobml		;if has hit wall...	beq	@cango2	lda	bodypoints	;with whole body	cmp	#5	bcc	@no2	lda	accelcount	;while full out	cmp	#MAXACCEL	bne	@no2		jsr	setsplat@no2:	jsr	fullstop	rts	@cango2:	lda	#1	sta	accelflag	jmp	@seedown@turnleft:	jsr	startturn	** is user pushing down ?*@seedown:	lda	Joy1Data+1	and	#JoyDown	beq	@seeup		jsr	setcrouch**	is user pushing up*@seeup:	lda	Joy1Data+1	and	#JoyUp	beq	@endofstick	lda	status				;bug fix?	cmp	#sleeping	beq	@endofstick	jsr	gotosleep	jsr	wantsladder@endofstick:	rts ** Bob is bored and in the middle of fidgeting *bobfidget:	lda	bobshield	bne	@nomorefidget** wait for fidget to end*@notgonnadoit:	lda	Joy1Data			;If any joystick activity is	and	#$f0				;detected....clear all fidget	bne	@nomorefidget		;counters	lda	Joy1Data+1	and	#$ff	bne	@nomorefidget	rts@nomorefidget:	lda	#walking			;revert back to walking	sta	status	stz	fidgetcount	rts** Bob is in crouch mode *bobcrouch:	lda	crouchcount		;still dropping?	cmp	#6	bcs	@bobisdown	lda	frameticks		;dee-lay			bne	@waitasec	inc	crouchcount		;keep dropping	stz	fallcount	lda	#2	sta	jumpyspeed		;initial drop speed@waitasec:	rts	** ok bob is falling in crouch mode...*@bobisdown:	lda	crouchcount		;if rising up...continue	cmp	#6	beq @trystandup@riseup:	lda	frameticks		;till fully erect...	bne	@movebob	inc	crouchcount	lda	crouchcount	cmp	#13	bcc	@movebob		lda	bobmd			;ok..if falling....	bne	@walk;	lda	#2;	jsr	setfall	lda	#falling		;continue	sta	status;	stz	whichplatform	jmp	bobfalling@walk:	lda	#walking		;else walk	sta	status	jsr	fullstop	stz	crouchcount	rts	** read stick to get up*@trystandup:@standup:	lda	#8				;no standing unless clear	ldy	#-24	jsr	bgcoll	jsr findwall	bcs	@movebob	lda	#-8					ldy	#-24	jsr	bgcoll	jsr findwall	bcs	@movebob;	stz	canrise@canrise:	lda	Joy1Data+1		;user must pushing up	and	#JoyUp			;down to stay in crouch mode.	beq	@movebob2		lda	turncount	bne	@movebob		lda	#7	sta	crouchcount	stz	frameticks	jsr	fullstop		;bug fix	bra	@movebob2** process other move dynamics*@movebob:;	lda	#1				;no getting up;	sta	canrise@movebob2:	lda	bobmd			;if no ground below...	bne	@keepcrawl** drop...*	lda	cputime			;increment fall speed to 7 pixels max	and	#7	cmp	#7	bne	@noincspeed	lda	jumpyspeed	cmp	#7	bcs	@noincspeed	inc	jumpyspeed@noincspeed:	lda	jumpyspeed		;put in move variable	sta	bobymove	clc	adc	fallcount		;and count distance bob has fallen	cmp	#SPLATD	bcc	@fine	lda	#SPLATD			;at 100 is butt splat!@fine:	sta	fallcount	rts	** bob is on solid ground...*@keepcrawl:	lda	jumpyspeed		;if has fallen	cmp	#7	bcc	@nohurt	lda	#10	jsr	drainstrength@nohurt:	lda	#2				;clear any fall vars	sta	jumpyspeed	stz	fallcount	lda	bosslevel		;not on boss/exit/scooter levels	ora	canlookdown	bne	@solookup		lda	Joy1Data+1		;magic scroll	and	#JoyDown	beq	@solookup	lda	lockscreen	bne	@solookup	inc	islooking		;demo fix remove...@solookup:** process stick actions*	lda	turncount	beq	@readstick@noturn:	rts@readstick:	lda	Joy1Data+1	and	#JoyLeft	beq	@right	lda	walkdir			;allow to turn while skidding	bmi	@move	jsr	startturn	rts@move:	lda	#1	sta	accelflag	lda	#3	sta	accelcount	;lda	#-2	;sta	bobxmove	rts@right:	lda	Joy1Data+1	and	#JoyRight	bne	@tryright	rts@tryright:	lda	walkdir	bpl	@move2	jsr	startturn	rts@move2:	lda	#1	sta	accelflag		lda	#3	sta	accelcount	;lda	#2	;sta	bobxmove	rts** bob picks up item*bobpickup:	rts		** did bob crack his head while jumping*hithead:	lda	bobmu				;if bob hits head...make fall	beq	@noroof	lda	jumpyspeed	bpl	@makefall			;if coming down...turn to fall@slowly:	lda	#1	sta	jumpyspeed@makefall:	lda	#falling	sta	status	stz	fallcount	stz	jumptype	sec	rts@noroof:	clc	rts	** or did he land*hitground:	lda	bobmd				;if hit ground...land	beq	@nofloor	lda	#landing	sta	status	stz	jumpcount	sec	rts@nofloor:	clc	rts	** bob has whacked his head*bobwhackhead:	lda	frameticks	bne	@stillwhack	inc	crouchcount	lda	crouchcount	cmp	#3	bcc	@stillwhack	lda	#1	jsr	setfall@stillwhack:		rts	** Bob is in his jump trajectory*trajectory1:		dc.b  -2,-2,-1,-1,0,0,0						;hurdle jump	dc.b  1,1,1,1,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4	dc.b  99trajectory3:	dc.b	-1,-1,-1,-1,-2,-2,-2,-2,-2,-2,-3,-3				;opening tramp	dc.b	-3,-3,-4,-4,-4,-5,-5,-5,-5,-6,-6,-6,-6,-7	dc.b	-7,-7,-7,-7,-7,-7,-7,-6,-6,-6,-6,-6,-6,-5,-5,-5,-5,-5,-4,-4,-4,-4,-3,-3,-3,-3	dc.b	-2,-2,-2,-2,-1,-1,-1,-1,-1,0	dc.b	0,1,1,1,2,2,2	dc.b	3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7	dc.b	7,7,7,7,7,7,7,7,7,7,7,7,7,7,99	** wall collisions for all kinds of jumps*bobjump:	lda	jumpyspeed				;but notwhile going up...	beq	@nostop	bmi	@nostop	lda	jumpxspeed				;zero speed if hits wall	beq	@nostop	bmi	@left	lda	bobmr	bne	@killspeed	bra	@nostop@left:	lda	bobml	beq	@nostop@killspeed:	jsr	fullstop	stz	jumpxspeed@nostop:	lda	bobmu	beq	@what	lda	jumpyspeed	cmp	#-5	beq	@whack	cmp	#-6	beq	@whack	cmp	#-7	bne	@what@whack:	lda	#SFXCRASH1	jsl	soundeffects	lda	#headwhack	sta	status	stz	holdcycles	stz	frameticks	stz	crouchcount	stz	laddercatch	rts	** what type of jump*@what:	lda	jumptype	beq	@hurdleman	jmp	@remotejump** jumping off ladder....*@hurdleman:	lda	jumpup				;always jump off ladder	beq	@stickcontrol	inc	jumpup	cmp	#4					;for fixed time	bcc	@forcemove	stz	jumpup@forcemove:	lda	walkdir	sta	jumpdir	bmi	@forceleft	lda	#2	bra	@setmove@forceleft:	lda	#-2	bra	@setmove	** else total stick control*@stickcontrol:	lda	jumpxspeed	beq	@straightup	** running jump...*	lda	turncount			;if not turning go forward at 2	beq	@guideforward	stz	jumpxspeed			;else once turn made....jump is now guidable	bra	@nomovement@guideforward:		lda	jumpdir		bmi	@neg	lda	#2	bra	@setspeed@neg:	lda	#-2@setspeed:	sta	bobxmove	bra	@nomovement		** started to jump straight up...allow much guidance*@straightup:	lda	Joy1Data+1			;move the direction he is going	and	#JoyLeft+JoyRight	beq	@nomovement@movement:	lda	Joy1Data+1	and	#JoyLeft	beq	@moveright	lda	#-2	bne	@setmove@moveright:	lda	#2@setmove:	sta	bobxmove	stz	accelcount	;???** process turns/climbs/etc*@nomovement:	lda	turncount	bne	@alreadyturn		jsr	turninair2			;see if bob wants to fire behind@alreadyturn:	jsr	hithead				;hit head ?	bcc	@seeground			;then is falling	rts@seeground:	jsr	wantsoverhand	bcc	@nooverhand	rts@nooverhand:	jsr	wantsladder			;grab a ladder	bcc	@noladder2				rts** move up at fixed speed while button is held*@noladder2:	lda	buttondown	bne	@continuetraj		lda	Joy1Data+1			;go up while button is held	and	#joyB	bne	@stillheld@starttraj:	inc	buttondown			;now signal for trajectory to take over	stz	jumpcount						lda	#-3						sta	bobymove	sta	jumpyspeed 	rts@stillheld:	lda	buttondown					bne	@continuetraj	lda	#-3					;move at -3	sta	bobymove	sta	jumpyspeed	inc	jumpcount	lda	jumpcount	cmp	#22					;for 22 cycles...	bcs	@starttraj	rts** then continue along y-trajectory*@continuetraj:	lda	jumpyspeed			;only look for landing when 	bmi	@noland				;coming down...	lda	bobmd	bne	@landed	@noland:	ldy	jumpcount	lda	trajectory1,y	cmp	#99	beq	@makefall	sta	bobymove	sta	jumpyspeed		inc	jumpcount	rts@makefall:	stz	laddercatch	lda	#falling					;till make fall	sta	status	lda	jumpyspeed	sta	bobymove	stz	fallcount	rts@landed:	stz	laddercatch	lda	#walking					;walk him	sta	status	jsr	setlandspeed				;see if he wants to land fast...	rts** heavy plant jump...*@remotejump:	lda	jumpcount	cmp	#8	bcc	@nohit		lda	bobmd	beq	@nohit	jmp	@landed@nohit:	ldy	jumpcount	lda	trajectory3,y	cmp	#99	bne	@stillup	jmp	@makefall@stillup:	sta	bobymove	sta	jumpyspeed		inc	jumpcount	lda	jumpcount		;no turning till off trampoline	cmp	#10	bcc	@alreadyturn2** process general dynamics*@moveonjump2:	lda	Joy1Data+1			;move the direction he is going	and	#JoyLeft+JoyRight	beq	@nomovement2@movement2:	lda	Joy1Data+1	and	#JoyLeft	beq	@moveright2	lda	#-2	bne	@setmove2@moveright2:	lda	#2@setmove2:	sta	bobxmove@nomovement2:	lda	turncount	bne	@alreadyturn2		jsr	turninair2			;see if bob wants to fire behind@alreadyturn2:	jsr	hithead				;hit head ?	bcc	@seeground2			;then is falling	rts@seeground2:	jsr	wantsoverhand	bcc	@nohandover	rts@nohandover:	jsr	wantsladder			;grab a ladder	rts** Bob lands after jump/fall*boblanding:	lda	turncount		;temp fix - cheep	beq	@notturning	stz	turncount@notturning:	lda	jumpstyle		;what kind of jump	beq	@plant	lda	jumpxspeed	beq	@plant		lda	#MAXACCEL		;hurdle...keep going	sta	accelcount		lda	walkdir			;if has turned while landing	bmi	@negcheck	lda	bobml	bne	@sameway	lda	jumpxspeed	bpl	@sameway	bra	@skidhim@negcheck:	lda	bobmr	bne	@sameway	lda	jumpxspeed	bmi	@sameway	@skidhim:	lda	#SFXSKID	jsl	soundeffects	lda	#stopping		;make skid	sta	status	lda	jumpxspeed	sta	deceldir	lda	#1	sta	decelflag	stz	decelcount		rts@sameway	inc	accelflag	lda	frameticks	bne	@noinc	lda	#4	sta	framecount	lda	#5	sta	holdcycles	lda	#walking	sta	status	rts		@plant:	lda	frameticks	bne	@noinc	inc	jumpcount	lda	jumpcount	cmp	#3	bcc	@noinc	lda	#walking		;no speed	sta	status	@noinc:	rts	** bob splats on butt*bobbuttsplat:	lda	bobmd	bne	@solid	lda	#1	jsr	setfall	rts@solid:	lda	frameticks	bne	@noinc	inc	jumpcount	lda	jumpcount	cmp	#15	bcc	@noinc	lda	#walking	sta	status	stz	jumpcount@noinc:	rts	** bob splats into wall*splatoff:	dc.b	0,0,-2,-3,-3,-2,0	bobwallsplat:	lda	bobmd	bne	@use5	lda	#4	bne	@setuser@use5:	lda	#5@setuser:	sta	temp		lda	frameticks	bne	@noinc	lda	jumpcount	cmp	temp	;#5	beq	@endosplat	inc	jumpcount	ldy	jumpcount	lda	splatoff,y	ldy	walkdir	cpy	#1	beq	@noneg	eor	#255	clc	adc	#1@noneg:	sta	bobxmove@noinc:	rts@endosplat:	jsr	fullstop	stz	jumpcount	stz	jumpyspeed	stz	fallcount	lda	bobmd	bne	@walk	lda	#1	jsr	setfall	rts@walk:	lda	#walking	sta	status	rts	** Bob climbs up a ladder *bobclimb:	lda	#1	sta	nocrouch			;no crouch!		lda	climbcount			;2 frames to adjust bob...	cmp	#4	bcs	@climbing	lda	frameticks	beq	@next	rts*	* adjust bob on ladder*@next:	lda	leftover	cmp	#2	bcs	@larger	lda	leftover	stz	leftover	bra	@addit@larger:	dec	leftover	dec	leftover	lda	#2@addit:	sta	temp	lda	ladderhalf		cmp	#ladderright	beq	@right@left:	lda	temp	sta	bobxmove	bra	@notyet		@right:	lda temp	eor	#255	clc	adc	#1	sta	bobxmove@notyet:	inc	climbcount	rts	@climbing:	lda	Joy1Data+1	and	#JoyDown+JoyUp	bne	@moving	stz	climbframe@moving	lda	Joy1Data+1			;if pushing down...go till ground	and	#JoyDown	beq	@seeup	lda	#LADDERREACH;-12	jsr	stillonladder	bcs	@hangingon	lda	#1	jsr	setfall	rts@hangingon:	lda	bobmd	beq	@godown	lda	#walking	sta	status	rts@godown	lda	frameticks	bne	@nonext2	dec	climbframe@nonext2:	lda	#2	sta	bobymove	lda	cputime	and	#7	cmp	#7	bne	@seeup	lda	#SFXCLIMB	jsl	soundeffects@seeup:	lda	Joy1Data+1			;if pushing up....go till end of ladder 	and	#JoyUp	beq	@seeleft	lda	#LADDERREACH+4	;0	jsr	stillonladder	bcc	@seeleft	lda	frameticks	bne	@nonext	inc	climbframe@nonext:	lda	#-2	sta	bobymove	lda	cputime	and	#7	cmp	#7	bne	@seeleft	lda	#SFXCLIMB	jsl	soundeffects@seeleft:	lda	Joy1Data+1			;and allow body turning	and	#JoyLeft	beq	@seeright	lda	walkdir	cmp	#faceleft	beq	@seejump	lda	#faceleft	sta	walkdir	rts@seeright:	lda	Joy1Data+1				and	#JoyRight	beq	@seejump	lda	walkdir	cmp	#faceright	beq	@seejump	lda	#faceright	sta	walkdir	rts@seejump:	lda	debounce+1			;jump to get off	and	#JoyB	beq	@eoclimb		lda	#0					;temp...use a different traj...	sta	jumpcount	stz	buttondown	stz	anticipate	lda	walkdir	sta	jumpxspeed	lda	#1					;signal to move off ladder	sta	jumpup	stz	jumptype	lda	#jumping	sta	status	lda	#10	sta	laddercatch@eoclimb:	rts** Bob shimmies hand over hand*bobhandoverhand:	lda	climbframe				;adjust on wire...	bne	@adjusted	lda	leftover				;push down till fingers wrap...	cmp	#2	bcc	@lasttime	dec	leftover	dec	leftover	lda	#2	bra	@movedown@lasttime:	inc	climbframe	lda	leftover	stz	leftover@movedown	sta	bobymove		@adjusted:	lda	turncount			;turn till done	beq	@noturn	rts	@noturn:	lda	#4	sta	temp	jsr	lookoverhead			;must still be attached...	lda	chartype	cmp	#overhand	bne	@falling	lda	Joy1Data+1			;down means instant get off	and	#JoyDown	beq	@seeleft	lda	Joy1Data+1			;but not accidently	and	#JoyLeft+JoyRight	bne	@seeleft@falling:	lda	#1	jsr	setfall	rts@seeleft:	lda	Joy1Data+1			;shimmy left/right	and	#JoyLeft	beq	@seeright	lda	walkdir				;turn if needed	cmp	#faceleft	beq	@moveright	jsr	turninair2;	inc	turncount;	stz	frameticks;	lda	#3;	sta	holdcycles	rts@moveright:	lda	#-2	sta	bobxmove	lda	bobml	bne	@nosfx1	lda	cputime	and	#7	cmp	#7	bne	@nosfx1	lda	#SFXFINGER	jsl	soundeffects@nosfx1:	rts@seeright:	lda	Joy1Data+1	and	#JoyRight	beq	@eoshimmy	lda	walkdir	cmp	#faceright	beq	@moveleft	jsr	turninair2	;	inc	turncount;	stz	frameticks;	lda	#3;	sta	holdcycles	rts@moveleft:	lda	#2	sta	bobxmove	lda	bobmr	bne	@eoshimmy	lda	cputime	and	#7	cmp	#7	bne	@eoshimmy	lda	#SFXFINGER	jsl	soundeffects@eoshimmy:	rts** Bob is attached to copter remote*bobremote:	lda	pickupcount	cmp	#15	bcs	@incontrol	lda	#-1	sta	bobymove	inc	pickupcount	rts	@incontrol:	lda	turncount	beq	@noturnx	rts@noturnx:	jsr	turninair2			;see if bob wants to fire behind@alreadyturn:	lda	Joy1Data+1	and	#JoyDown	beq	@seeup	lda	#3	sta	bobymove	rts@seeup:	lda	Joy1Data+1	and	#JoyUp	beq	@seeright	lda	#-3	sta	bobymove	rts@seeright:	lda	Joy1Data+1	and	#JoyRight	beq	@seeleft	lda	#1	sta	accelflag	rts@seeleft:	lda	Joy1Data+1	and	#JoyLeft	beq	@noturn	lda	#1	sta	accelflag@noturn:	rts** Bob powers the elevator*bobelevator:	ldy	whichelevator	lda	PICstatus,y	cmp	#parked	bne	@moving** elevator is waiting for stick move*	lda	alternate			;synch with 30 hertz sprites	and	#1	bne	@noway	lda	Joy1Data+1			;debounce+1	and	#JoyB	beq	@walkie	jsr	elevatorjump	rts@walkie:		lda	Joy1Data+1			;l/r gets him off	and	#JoyRight	beq	@seeleft	lda	#faceright	bra	@getoff@seeleft:	lda	Joy1Data+1	and	#JoyLeft	beq	@trymoving			;else see if wants to move vertically....	lda	#faceleft@getoff:	sta	walkdir	lda	#walking	sta	status@noway:	rts		@trymoving:	lda	Joy1Data+1				and	#JoyUp	beq	@trydown	lda	#-32	jsl	canliftgo	bcs	@no	lda	#rising	sta	PICstatus,y	stz	eleactive	stz	eledistance@no:		rts@trydown:	lda	Joy1Data+1				and	#JoyDown	beq	@no2	lda	#32	jsl	canliftgo	bcs	@no2	lda	#dropping	sta	PICstatus,y	stz	eleactive	stz	eledistance@no2:	rts	** elevator is in motion*@moving:	cmp	#rising				;ok...move the elevator	bne	@goingdown@goingup:	lda	#-4	bra	@checkforstop@goingdown:	lda	#4@checkforstop	sta	bobymove;	lda	#SFXELEVATOR;	jsl	soundeffects	inc	eledistance		lda	eleactive			;dont check for new floor	cmp	#3					;for a few cycles	bcs	@readytostop	inc	a	sta	eleactive	rts@readytostop:	jsr	floorstop			;now see if passing a floor	bcc	@nostop		ldy	whichelevator	lda	#parked	sta	PICstatus,y@nostop:** try turn on elevator platform*	lda	turncount	bne	@leavealone	lda	walkdir	bpl	@tryright	lda	Joy1Data+1	and	#JoyRight	beq	@leavealone	jsr	startturn	rts	@tryright:	lda	Joy1Data+1	and	#JoyLeft	beq	@leavealone	jsr	startturn@leavealone:	rts	** can elevator move...*canliftgo:	tay	lda	#0	jsr	bgcoll	lda world	beq	@regular	cmp	#1	beq	@regular		jsr	charactertype	lda	chartype	cmp	#elevatorshaft	beq	@yes	jsr	xm	jsr	xm	lda	chartype	cmp	#elevatorshaft	bne	@no		bra	@yes	@regular:	lda	whichchar		;world 1	cmp	#113	beq	@yes	cmp	#114	beq	@yes	jsr	xm	jsr	xm	lda	whichchar	cmp	#113	beq	@yes	cmp	#114	bne	@no	@yes:	ldy	whichelevator	clc	rtl@no:	ldy	whichelevator	sec	rtl	** Bob activates wall machinery*bobswitchpull:	rts** bob recoils after heavy pulse shot*bobrecoil:	lda	frameticks	bne	@noinc	inc	jumpcount	lda	jumpcount	cmp	#8	bcc	@noinc	lda	#walking	sta	status	jsr	fullstop	rts@noinc:	tay	lda	recoilmove,y	beq	@noip	ldy	walkdir	cpy	#1	bne @noflip	eor	#255	clc	adc	#1@noflip:		sta	bobxmove@noip:	rts	recoilmove:	dc.b	0,2,2,1,1,0,0,0,0,0,0,0	** bob gives item to a terminal*bobgiveitem:	rts	** bob was blasted by landmine*blasttraj:	dc.b	-4,-4,-3,-3,-2,-2,-1,-1,0,1,2,2,3,3,4,4,4,4,4,99bobblasted: 	lda	#MAXACCEL	sta	accelcount	inc	accelflag	lda	jumpcount	beq	@go	lda	bobmd	beq	@go	jsr	fullstop	lda	#walking	sta	status	rts@go:	ldy	jumpcount	lda	blasttraj,y	cmp	#99	bne	@drop	lda	#falling	sta	status	stz	fallcount	rts@drop:	sta	bobymove	inc	jumpcount	rts	** Bob hides in  sleeper guy's house*bobsleep:	lda	crouchdir			;what dir?	beq	@gettingin** wait to get out...*@in:;	lda	bobready			;first time through....;	bne	@continue;	inc	bobready			;bob is sleeping...;	jsr	dofadein;	rts@continue:	jsr	fullstop	lda	cputime	and	#1	cmp	#1	bne	@leave	lda	strength	cmp	#maxstrength	bcs	@leave	inc	a	sta	strength@leave:	lda	crouchcount	bne	@comingout	lda	Joy1Data+1	and	#Joydown	beq	@notry	inc	crouchcount@notry:	rts** continue coming out*@comingout:	lda	frameticks	bne	@noinc2	inc	crouchcount	lda	crouchcount	cmp	#8	bcc	@noinc2	lda	#walking	sta	status	stz	crouchcount	stz	crouchdir	rts@noinc2:	rts** slide bob into sleep chamber*@gettingin:	lda	frameticks	bne	@notin	lda	leftover		;center in box	cmp	#2	bcs	@larger	lda	leftover	stz	leftover	bra	@addit@larger:	dec	leftover	dec	leftover	lda	#2@addit:	sta	temp	lda	ladderhalf		cmp	#sleepright	beq	@right@left:	lda	temp	sta	bobxmove	bra	@notyet		@right:	lda temp	eor	#255	clc	adc	#1	sta	bobxmove@notyet:	lda	crouchcount	cmp	#8	bcc	@keepcount	inc	crouchdir			;signal as in	stz	crouchcount	rts@keepcount	inc	crouchcount@notin:	rts	** Bob is blown around by Ultra Force wind *bobwindblown:	lda	lockscreen	bne	@fast	lda	startblowing	beq	@fast	lda	#1	bra	@setspeed@fast:	lda	#6@setspeed:	sta	temp		lda	blowdir	cmp	#3	bne @notdown	lda	bobmd	beq	@shootdown	lda	#buttsplat	sta	status	stz	bobfloat	stz	jumpcount			;and stop all other movement	stz	jumpxspeed	jsr	fullstop	rts	@shootdown:	lda	#7	sta	bobymove	rts@notdown:	cmp	#0	bne	@leftandright	lda	bobmu	beq	@fly	lda	#SFXCRASH1	jsl	soundeffects	lda	#headwhack	sta	status	stz	holdcycles	stz	frameticks	stz	crouchcount	stz	laddercatch	rts@fly:	lda	#-7	sta	bobymove	rts@leftandright:	cmp	#1	beq	@left@right:	lda	bobmr	beq	@carryon	jsr	setsplat	rts@carryon:	lda	temp	sta	bobxmove	rts	@left:	lda	bobml	beq	@carryon2	jsr	setsplat	rts@carryon2:	lda	temp	eor	#255	inc a	sta	bobxmove	rts** bob rides one of the many platforms in the game*bobrideplatform:	lda	whichplatform	bne	@ridethesnake	lda	#1	jsr	setfall	rts@ridethesnake:	lda	#1	sta	bobxmove		lda	Joy1Data+1				;if not hitting move stick...	and	#JoyRight	beq	@notright	;ldx	whichplatform	;lda	#1	;jsl	PICxadd	inc	bobxmove	ldx	TSKcurrent@notright:		lda	Joy1Data+1				;if not hitting move stick...	and	#JoyLeft	beq	@notleft	dec	bobxmove	;ldx	whichplatform	;lda	#-1	;jsl	PICxadd	ldx	TSKcurrent@notleft:	rts		** Bob rides Ultra Force gas bubble*bobridebubble:	lda	#-1						;always rise...	sta	bobymove	lda	turncount	beq	@move	rts	@move:	lda	Joy1Data+1				;hamster wheel movement	and	#JoyRight	beq	@notright	lda	walkdir	cmp	#faceright	beq	@fine	jsr	startturn	rts@fine:;	inc	accelflag	lda	#2	sta	bobxmove	rts@notright:	lda	Joy1Data+1				;if not hitting move stick...	and	#JoyLeft	beq	@notleft	lda	walkdir	cmp	#faceleft	beq	@fine2	jsr	startturn	rts@fine2:;	inc	accelflag	lda	#-2	sta	bobxmove@notleft:	rts** bob is being teleported in*beambuildtable:	dc.b	0,0,1,1,2,2,3,3,4,5,6,7,8,9,99beamkilltable:	dc.b	9,9,8,8,7,7,7,6,6,5,5,4,3,2,1,2,1,0,0,-1beamflicker:	dc.b	9,8,9,8,9,8,9,9,8,9,9,9,9,9,8,9	dc.b	8,9,8,9,8,9,9,8,9,8,8,9,8,9,8,9,8	bobrezframes:	dc.b	7,6,5,4,3,2,1,0bobrezframes2:	dc.b	1,2,3,4,5,6,7,-1		bobflashpic: dc.b $0A dc.b $80,$8F,$68 dc.b $D0,$8F,$48 dc.b $09,$D1,$E4 dc.b $47,$D1,$E2 dc.b $57,$D1,$E0 dc.b $80,$E1,$28 dc.b $D0,$E1,$08 dc.b $89,$C1,$E4 dc.b $D7,$C1,$E0 dc.b $C7,$C1,$E2 ** Bob drives the teleport *bobteleport:	stz	countdown	lda	teleportout	bne	@telout	jmp	@teleportin** bob teleports out*@telout:	lda	sdmaflag			;first download in the text characters	and	#1	bne	@donesomething	rts@donesomething:	lda	talkdma	bne	@try50	lda	#48	sta	sdmaflag	inc	talkdma	rts@try50:;	cmp	#1;	bne	@dancing;	lda	#50;	sta	sdmaflag;	inc	talkdma;	rts** ok dance....if needed*@dancing:	lda	pointsgiven			;add points for time left	bne	@pointsgiven		lda	#1	sta	bobtalks		lda	cputime	and	#1	cmp	#1	bne	@waitplease	lda	seconds	ora	minutes	bne	@stillgiving	lda	shstrength			;wait for juice	cmp	strength	bne	@waitplease	lda	#42					;and dma in the teleport effect	sta	sdmaflag	inc	pointsgiven	stz	bobtalks	bra	@pointsgiven@stillgiving:	lda	seconds	beq	@decmin	dec	seconds	bra	@addscore@decmin:	dec	minutes	lda	#59	sta	seconds@addscore:	lda	#0	jsl	addscore	lda	cputime	and	#7	cmp	#7	bne	@waitplease	lda	#SFXSWITCH	jsl	soundeffects@waitplease:	stz	PICcolor,x	rts	** dim lights*@pointsgiven:	lda	#3	sta	PICcolor,x		lda	rezstatus	bne	@try1a		lda	dimlights		;wait for lights to finish	beq	@carryon	inc	rezstatus	stz	tablecount	lda	#SFXTELEPORT	jsl	soundeffects@carryon:	stz	PICcolor,x	rts** build the beam*@try1a:	cmp	#1	bne	@try2a	ldy	tablecount	lda	beambuildtable,y	cmp	#99	bne	@build2	inc	rezstatus	lda	#104	sta	ringypos	inc	ringflag	stz	tablecount	rts@build2:	sta	beamcount	inc	tablecount@nobeam2:	rts** flicker beam, and drop rings in and phase out bob*@try2a:	cmp	#8	bcs	@try6a		lda	cputime			;flicker beam	and	#31	tay	lda	beamflicker,y	sta	beamcount		lda	ringypos	sec	sbc	#8	sta	ringypos		lda	ringypos	cmp	#88	bcc	@nobob2		lda	#1	sta	aflashbob	sta	PICcolor,x		lda	rezstatus	sec	sbc	#2	tay	lda	bobrezframes2,y	sta	bobcount	rts@nobob2:	stz	aflashbob	cmp	#0	bne	@noreset2	inc	rezstatus		;continue through the rest of rez in...	lda	#104	sta	ringypos	lda	rezstatus	cmp	#8	bne	@noreset2	stz	ringflag	stz	tablecount@noreset2:	rts	** and now rest of bobs animation*@try6a:	lda	#-1	sta	bobcount	ldy	tablecount			;first kill beam	lda	beamkilltable,y	sta	beamcount	cmp	#-1	bne	@notover2	lda	fade	bne	@waiting	lda	#-1	sta	bobcount	lda	#4	sta	killbeam	inc	winflag	stz	hotdir	stz	hotdata	jsr	dofadeout@waiting:	rts@notover2:	inc	tablecount	rts		** bob teleports in...*@teleportin:	lda	#3	sta	PICcolor,x	lda	fade	beq	@doit	rts@doit:	lda	rezstatus	bne	@try1** wait for lights to flicker*	lda	dimlights	beq	@notyet	inc	rezstatus	stz	tablecount	lda	#SFXTELEPORT	jsl	soundeffects@notyet:	rts		** build the beam*@try1:	cmp	#1	bne	@try2		ldy	tablecount	lda	beambuildtable,y	cmp	#99	bne	@build	inc	rezstatus	stz	ringypos	inc	ringflag	rts@build:	sta	beamcount;	lda	cputime;	and	#1;	bne	@nobeam	inc	tablecount@nobeam:	rts	** flicker beam, and drop rings in and phase in bob*@try2:	cmp	#8	bcs	@try6		lda	cputime			;flicker beam	and	#31	tay	lda	beamflicker,y	sta	beamcount		lda	ringypos	clc	adc	#8	sta	ringypos		lda	ringypos	cmp	#88	bne	@nobob		lda	#1	sta	aflashbob		lda	rezstatus	sec	sbc	#2	tay	lda	bobrezframes,y	sta	bobcount	rts@nobob:	cmp	#104	bne	@noreset	stz	aflashbob	inc	rezstatus		;continue through the rest of rez in...	stz	ringypos	lda	rezstatus	cmp	#8	bne	@noreset	stz	ringflag@noreset:	rts	** and rest of bob's animation*@try6:	lda	#0	sta	PICcolor,x	sta	bobcount		lda	beamcount			;if beam is done...	cmp	#-1					;make bob mutter something	bne	@kill**  ok get bob to start talking*	lda	bobtalks		;wait for both halves to be down loaded	bne	@started	lda	sdmaflag	and	#1	bne	@donedmaing	rts@donedmaing:	lda	talkdma	cmp	#1	beq	@andtalk	cmp	#3	beq	@finished	inc	talkdma	lda	#50				;replace remotes	sta	sdmaflag	rts	@andtalk:	lda	#1	sta	bobtalks	lda	#90	sta	talktime	rts@started:	lda	talktime		;when finished talking...dma in the bad sprites	dec	a	sta	talktime	bne	@ahchoo	inc	talkdma	stz	bobtalks	lda	#4	sta	killbeam	lda	#40	sta	sdmaflag	@ahchoo:	rts@finished:** and wait for all bad sprites to be reloaded*	lda	sdmaflag	and	#1	beq	@noway	stz	blinkcount	stz	blinktimer	lda	#walking 	sta	status	stz	invensdma	stz	bobtalks	stz	talkdma@noway:	rts	** meanwhile...go through all beams*@kill:	ldy	tablecount			;first kill beam	inc	tablecount	lda	beamkilltable,y	sta	beamcount	cmp	#-1	bne	@notover	** when beam is finished...dma in talking text*	lda	#48				;down load talking first half	sta	sdmaflag	lda	#1	sta	talkdma	stz	sdmacount@notover:	rts** Bob drives the fortress bashing tank*;bobscooter:	include	scooter.a;	rts** module to handle space ship*SHIPMAXUP		EQU	-3SHIPMAXDOWN		EQU	3SHIPMAXLEFT		EQU	-4SHIPMAXRIGHT	EQU	4SHIPYDECEL		EQU	3SHIPXDECEL		EQU	3SHIPYACCEL		EQU	3SHIPXACCEL		EQU	3SHIPXLEFT		EQU	-16SHIPXRIGHT		EQU	16SHIPYTOP		EQU	-24SHIPYBOTTOM		EQU	24TAKEOFFTIME		EQU	60** boob climbs in car and leaves*bobleavegoth:	lda	caryadjust	beq	@ydone	dec	a	dec	a	sta	caryadjust	lda	#2	sta	bobymove	stz	bobxmove	rts@ydone:	ldy	whichbigship	lda	#0	sta	PICscroll,y	lda	takeoff			;give engines time to rev up	cmp	#TAKEOFFTIME	bcs	@fly	inc	takeoff			;pad delay time	stz	PICtemp1,x		;ship speed	stz	PICtemp2,x		;ship flight time	stz	PICcount,x	stz	PICcount2,x	bra	@notfast** ship takes off*@fly:	lda	PICcount,x	cmp	#7	bcs	@screamoff		lda	cputime	and	#15	cmp	#15	bne	@noinc	inc	PICcount,x	inc	PICtemp2,x@noinc:	lda	PICtemp2,x	sta	bobxmove	bra	@notfast@screamoff:	lda	PICcount2,x	cmp	#60	bcs	@driveoff	inc	a	sta	PICcount2,x	lda	#7	sta	bobxmove	bra	@notfast@driveoff:	lda	cputime	and	#15	cmp	#15	bne	@noinc2	dec	PICtemp2,x@noinc2:	lda	PICtemp2,x	sta	bobxmove	lda	#7	jsl	PICxadd	lda	PICtemp1,x	inc	a	sta	PICtemp1,x	cmp	#80	bcc	@notfast	lda	winflag	bne	@notfast	jsr	dofadeout	inc	winflag@notfast:	ldy	whichbigship	lda	PICxlo,x	sta	PICxlo,y	lda	PICylo,x	sta	PICylo,y		lda	PICxhi,x	sta	PICxhi,y	lda	PICyhi,x	sta	PICyhi,y	rts			** bob is falling...*bobfalling:	lda	bobmd				;if he touches solid...walk	beq	@stillfalling	** do a landing type*	lda	lockscreen	ora	bobfloat	bne	@softest			lda	fallcount	cmp	#SPLATD	bcc	@nice	lda	#10	jsr	justdrainstrength	lda	#SFXBOBSPLAT2	jsl	soundeffects	lda	#buttsplat			;too fast...ouch	bra	@setother@nice:	cmp	#LANDD	bcc	@softest	lda	#landing			;land heavy	bra	@setother@softest:	lda	#walking			;walking...	sta	status					jsr	setlandspeed 		;see if wants to continue moving...	rts@setother:	sta	status	stz	bobfloat	stz	jumpcount			;and stop all other movement	stz	jumpxspeed	jsr	fullstop	rts** else continue dropping*@stillfalling:	jsr	moveinair			;allow guiding		lda	turncount	bne	@notturn	jsr	turninair2		;turn ?@notturn:	lda	bobfloat	beq	@plummet	lda	#1	sta	jumpyspeed	stz	fallcount	bra	@noincspeed@plummet:	lda	cputime			;increment fall speed to 7 pixels max	and	#7	cmp	#7	bne	@noincspeed	lda	jumpyspeed	cmp	#7	bcs	@noincspeed	inc	jumpyspeed@noincspeed:	lda	jumpyspeed		;put in move variable	sta	bobymove	clc	adc	fallcount		;and count distance bob has fallen	cmp	#SPLATD	bcc	@fine	lda	#SPLATD			;at 100 is butt splat!@fine:	sta	fallcount		jsr	wantsoverhand	bcc	@tryladd	rts@tryladd	jsr	wantsladder		;try grab ladder/overhand	rts** Begin Bob's turning animation*startturn:	lda	cputime			;alternate	and	#1	bne	@turning	lda	turncount	ora	gundir			;new one!!!	bne	@turning	lda	dpremflag	bne	@turning	lda	status	cmp	#crouching	bne	@doit	lda	crouchcount	cmp	#6	bne	@turning@doit:	lda	walkdir	sta	turnway	lda	#1	sta	turncount		;start the turning phase	stz	frameticks	sec	rts@turning:	clc	rts	** start a jump...*startjump:	lda	status			;must be walking...	cmp	#walking	beq	@fine	cmp	#stopping	beq	@fine@nostart:	rts@fine:elevatorjump:		lda	turncount	beq	@gogo	rts@gogo:	stz	jumptype		;hurdle or plantstartjump2:	stz	jumpcount		;init counter	stz	jumpyspeed		;y speed	stz	jumpup			;ladder jump	stz	buttondown		;0 while button held	stz	anticipate				lda	#jumping		;put in jump mode	sta	status	stz	jumpxspeed		;assume straight up		lda	bodyflag	ora	interacting	bne	@nointeract	lda	#1	sta	interacting		@nointeract:	lda	walkdir	sta	jumpdir			;save direction to jump	bmi	@tryleft@tryright:	lda	Joy1Data+1	and	#JoyRight	bne	@withspeed	rts@tryleft:	lda	Joy1Data+1	and	#JoyLeft	beq	@nospeed@withspeed:	lda	walkdir	sta	jumpxspeed@nospeed:	rts		** bob's vertical movement*movevert:	lda	centrescroll	beq	@go	rts@go:	lda	lockscreen	beq	@scroll	lda	bobymove	jsl	PICyadd	lda	PICylo,x	cmp	#40	bcs	@cool	lda	#40	sta	PICylo,x	lda	#1	jsr	setfall@cool:	rts@scroll:	lda	bobymove		;trying to move?	bne	@seedir	rts@seedir:	bmi	@tryup2	sta	temp	jsr	upscroll		lda	temp	eor	#255	clc	adc	#1	sta	vmove@nomove:	rts@tryup2:	eor	#255	clc	adc	#1	sta	temp	lda	edmapcountv	bne	@canmove	stz	bobymove	rts@canmove:	lda temp	jsr	downscroll		lda	temp	sta	vmove	rts** move bob based on x/y motion variables*scrollypos	equ	184movehoriz:		lda	lockscreen	ora	centrescroll	bne	@incenter	jmp	@scroll	** centre the screen for boss fight*@incenter:	lda	centrescroll	bne	@mustcentre	jmp	@nocenter@mustcentre:	lda	centrescrx	beq	@tryy	dec	a	sta	centrescrx@gregmouth:	lda	#1	jsr	leftscroll	lda	#-1	sta	PICmoveh,x	lda	#1	jsl	PICxsub@tryy:	ldy	whichbigship	lda	PICyhi,y	bne	@up	lda	PICylo,y	cmp	#scrollypos	beq	@doneyet	bcs	@up@godown:	ldx	whichbigship	jsl	PICyinc	ldx	TSKcurrent	lda	#1	jsr	downscroll	lda	#1 	sta	PICmovev,x	jsl	PICyadd	bra	@doneyet@up:	ldx	whichbigship	jsl	PICydec	ldx	TSKcurrent	lda	#1	jsr	upscroll	lda	PICylo,x	cmp	#42	beq	@doneyet		lda	#-1 	sta	PICmovev,x	jsl	PICyadd@doneyet:	lda	centrescrx	bne	@nocenter2	ldy	whichbigship	lda	PICyhi,y	bne	@nocenter2	lda	PICylo,y	cmp	#scrollypos	bne	@nocenter2	lda	#1	sta	lockscreen	stz	centrescroll	stz	alternate		;make sure build frame is drawn	stz	PICscroll,x@nocenter2:		stz	bobxmove	stz	bobymove	rts	** lock screen*@nocenter:	lda	bobxmove		;splat back...	bne	@try1a	rts@try1a	bmi	@leftcheck@rightcheck:	lda	PICxlo,x	cmp	#220	bcc	@canmove	lda	#1	sta	bobmr	bra	@nocanmove@leftcheck:	lda	PICxlo,x	cmp	#35	bcs	@canmove@nocanmove:	lda	#1	sta	bobml@fullstop:	jsr	fullstop		lda	status	cmp	#stopping	bne	@nokid	lda	#walking	sta	status@nokid:	rts	@canmove:	lda	bobxmove	jsl	PICxadd	rts	** scroll screen*@scroll:	lda	status			;wall splat goes other dir...	cmp	#wallsplat	bne	@regular	lda	bobxmove		;splat back...	bne	@try1	rts@try1:	bpl	@tryright	bra	@tryleft	@regular:	lda	bobxmove		;moves forward...	bne	@try2@try2:	bmi	@tryleft	** scroll right*@tryright:	jsr	leftscroll	rts	** scroll left*@tryleft:	eor	#255			;make positive	inc	a	jsr	rightscroll	rts	** Accelerate Bob from standing to full-flight*acceltable:	dc.b	0,1,0,0	dc.b	1,0,1,0	dc.b	1,0,1,1	dc.b	1,1,1,1	dc.b	1,2,1,1	dc.b	2,1,2,1	dc.b	2,2,1,2	dc.b	2,2,2,2accelbob:	lda	decelflag		;if decelearating...do till stop	beq	@notslowing	jmp	decelbob@notslowing:	lda	accelflag		;else accelarating	bne	@move		lda	status			;stop if walking	cmp	#walking	beq	@stopping	cmp	#crouching	beq	@stopping	cmp	#carried	beq	@stopping	cmp	#stopping	bne	@stopped		@stopping:	lda	decelcount		;if not full stopped then signal to...	cmp	#MAXDECEL	beq	@stopped	stz	decelcount	lda	#1	sta	decelflag	lda	walkdir			;and in the same direction	sta	deceldir@stopped:	rts	** and apply how much speed*@move:	lda	status			;jumping has own direction	cmp	#jumping	bne	@usewalk	lda	jumpxspeed	bra	@setdir@usewalk:	lda	walkdir@setdir:	sta	temp		bmi	@seeleft	lda	bobmr	beq	@look	jsr	fullstop	rts@seeleft:	lda	bobml	beq	@look	jsr	fullstop	rts@look:	lda	accelcount		;if at max speed	cmp	#MAXACCEL	bne	@faster	stz	decelcount		;reset next deceleration counter	lda	#2				;and move 2 pixels	bra	@speedset@faster:	inc	frameticks		;feetcyclespeed;	lda	accelcount;	cmp	#MAXACCEL/2;	bcs	@slow;	inc	frameticks;@slow:	inc	accelcount		;else get table value	ldy	accelcount	lda	acceltable,y@speedset:	ldy	temp			;negate if necessary	cpy	#1	beq	@noneg	eor	#255	clc	adc	#1@noneg:	sta bobxmove		;and put in desired move...	rts** skid bob to stop*deceltable:	dc.b	2,2,2,1,2,1,2,1,2,1,1,0,1,0,99	decelbob:	lda	deceldir			;no move if stuck against wall		bmi	@seeleft	lda	bobmr	beq	@look	bra	@fullstop@seeleft:	lda	bobml	beq	@look	bra	@fullstop@look:	lda	decelcount			;if stopped...then no more decel	cmp	#MAXDECEL	bne	@set@fullstop:	lda	status				;if skid...make walk...	cmp	#stopping	bne	@leave	lda	#walking	sta	status	stz	frameticks@leave:	stz	decelflag			;clear all vars...	stz	accelflag	stz	accelcount	rts	@set:	inc	decelcount			;get slowing down speed	ldy	decelcount	lda	deceltable,y	ldy	deceldir	cpy	#1	beq	@noneg	eor	#255	clc	adc	#1@noneg:	sta	bobxmove	rts	** try change direction in the air*	turninair2:	lda	cputime	;alternate	and	#1	bne	@noturn	lda	walkdir	bmi	@seeright	lda	Joy1Data+1			and	#JoyLeft	beq	@noturn	lda	walkdir	sta	turnway	inc	turncount	rts@seeright:	lda	Joy1Data+1	and	#JoyRight	beq	@noturn	inc	turncount	lda	walkdir	sta	turnway@noturn:	rts	** try to go to crouch*setcrouch:	lda	bodyflag	ora	nocrouch	ora	standonelevator	bne	@notallowed	jsr	fullstop		stz	holdcycles	stz	frameticks		stz	crouchcount	lda	#0			sta	crouchdir	lda	#crouching	sta	status	lda	#SFXCROUCH	jsl	soundeffects;	lda	#1;	sta	canrise	sec	rts@notallowed:	clc	rts** wants to catch over hand*wantsoverhand:	lda	Joy1Data+1			;try to grab something...	and	#JoyUP	beq	@notlooking	lda	#HANDREACH	jsr	grabhandrail	rts@notlooking:	clc	rts	** is he reaching up for a ladder*wantsladder:	lda	laddercatch	bne	@notlooking		lda	Joy1Data+1			;try to grab something...	and	#JoyUP	beq	@notlooking	lda	#LADDERREACH	jsr	grabladder	rts@notlooking:	clc	rts	** reverse direction*reversedir:	lda	walkdir	cmp	#faceright	beq	@turnleft	lda	#faceright	sta	walkdir	sta	jumpdir	rts@turnleft:	lda	#faceleft	sta	walkdir	sta	jumpdir	rts** no skid*preventskid:	lda	walkdir	bmi	@seeleft	lda	bobmr	beq	@nostop@dostop:	jsr	fullstop	sec	rts@seeleft:	lda	bobml	bne	@dostop@nostop:	clc	rts	** set splat status*setsplat:	lda	#SFXBOBSPLAT1	jsl	soundeffects	lda	#wallsplat	;then splat into wall	sta	status	stz	jumpcount	lda	#1	sta	frameticks	lda	#7	sta	holdcycles	rts	** is bob about to enter a sleep chamber*gotosleep:	jsr	sleepingarea	bcc	@nothere	jsr	fullstop	lda	#sleeping	sta	status	stz	gundir	stz	crouchcount	stz	crouchdir@nothere:	rts** mario guide while in air routine*moveinair:	lda	walkdir	bmi	@xleft2	lda	Joy1Data+1	and	#JoyRight	beq	@stopped2	lda	#1	sta	jumpxspeed	bra	@moveonjump@xleft2:	lda	Joy1Data+1	and	#JoyLeft	beq	@stopped2	lda	#-1	sta	jumpxspeed@moveonjump:	lda	#MAXACCEL	;-3			;else go at max speed	sta	accelcount	inc	accelflag			@stopped2:	rts** put bob in falling motion*	acc has speed to fall*setfall:	sta	jumpyspeed	lda	#falling		;falling....	sta	status	stz	fallcount	rts		** see if bob should keep going full out after a fall or * a terminated landing*setlandspeed:	lda	walkdir				;if pushing stick in direction of walk	bmi	@goleft	lda	Joy1Data+1			;then continue speed	and	#Joyright	beq	@killspeed	bra	@movefast	@goleft:	lda	Joy1Data+1	and	#JoyLeft	beq	@killspeed@movefast:	lda	#MAXACCEL	sta	accelcount	lda	#1	sta	accelflag			;hit the ground running	rts@killspeed:	stz	jumpcount			;and stop all other movement	stz	jumpxspeed	jsr	fullstop	rts** hurt bobbo...*	acc has how much*drainstrength:	sta	strtemp	lda	status	cmp	#dying	bne	@hurt	rts	@hurt:	lda	hurtpal	bne	@hurting	inc	hurttype	inc	hurtpal	lda	#SFXBOBHIT1	jsl	soundeffects@hurting:	lda	strtempjustdrainstrength:	sta	strtemp	lda	status	cmp	#dying	bne	@hurt	rts	@hurt:		lda	#1	sta	bobinjured		lda	bobshield		;nothing if shielded	beq	@hurthim	stz	hurtpal	stz	hurttype	rts@hurthim:	lda	strtemp	cmp	#1	bne	@notbg	inc	drainbysprite	lda	drainbysprite	and	#3	cmp	#3	beq	@notbg	rts@notbg:	lda	strength	sec	sbc	strtemp	cmp	#0	beq	@hasdied	bpl	@fine@hasdied:	lda	strtemp	cmp	#1	bne	@notbg2	inc	mustmelt@notbg2:	lda	#0@fine:	sta	strength	rts** make bob flash*makebobflash2:	lda	status	cmp	#dying	beq	@safe2		lda	bobshield	bne	@safe2	lda	PICcolorhit,x	beq	@colorize	rts@colorize:	lda #8	sta PICcolorhit,x		;save off current color@safe2:	rts	** add score*	acc has digit amount*	y has digit position*scoreamount	dc.b	1,10		;100	dc.b	2,10		;200	dc.b	5,10		;500	dc.b	1,8			;1000	dc.b	5,8			;5000addscore:	sta	temp	phb	lda	#0	pha	plb	lda	temp	asl	a	tay	lda	scoreamount,y	sta	temp	lda	scoreamount+1,y	tay		lda	scorebuffer,y	clc	adc	temp	cmp	#224+10	bcs	@wrapper	sta	scorebuffer,y	plb	rtl@wrapper:	sec	sbc	#10	sta	scorebuffer,y@incloop:	cpy	#0	beq	@done	dey	dey	lda	scorebuffer,y	inc	a	cmp	#224+10	;26	bcs	@wrapper2	sta	scorebuffer,y		cpy	#4			;if roll	(4 is for every 100,000), 6 for 10,000)	bne	@nolives	and	#1			;and only on 1,3,5,7,9	beq	@nolives	lda	lives	cmp	#99	beq	@maxlives	inc	a@maxlives:	sta	lives	lda	#SFXPICKUP	jsl	soundeffects@nolives:	plb	rtl@wrapper2:	lda	#224	;16	sta	scorebuffer,y				bra	@incloop@done:	plb	rtl	** dummy bob explode*blowupbob:	rtsblowupbob2:	jml	bobexplode	;; IMAGEXCEL 65816 Decompression; COPYRIGHT (C) 1992; Written by Kevin Hoare;; tmp.w   =source                       (16 bit); tmp+6.b =source bank                  (8 bit); tmp+7.b =destination bank             (8 bit); tmp+2.w =end of source                (16 bit points to byte after last); tmp+4.w =destination                  ($7e or $7f); tmp+4.w =end of destination returndecomp:        SET16A        lda     tmpd+2        sec        sbc     tmpd        sta     tmpd+2        SET8A        phb        lda     tmpd+6        pha        plb                             ; Source bank        lda     tmpd+4                   ; Setup bank $7f destination        sta     WMADDL        lda     tmpd+5        sta     WMADDM        lda     tmpd+7        and     #1        sta     WMADDH        SET16I        ldx     #0        ldy     #0@decompl:        lda     #8        sta     tempd+4	        lda     (tmpd),y        iny@encoded:        rol     a        bcc     @unencode        pha        iny        lda     (tmpd),y                     ; Read length offset        dey        sta     tempd+1        lsr     a        lsr     a        lsr     a                               ; eor #31 +3 = bytes to xfer        clc        adc     #3                              ; # of bytes to copy        sta     tempd+2        stz     tempd+3        SET16A        lda     (tmpd),y                         ; Get offset        iny        iny        phy		and		#$7ff		dec		a		and		#$7ff		inc		a        eor     #-1        inc     a        phx                                     ; Save destination        clc        adc     1,s        tay                                     ; New source        SET8A        plx; Start of new!        SET16A        tya        clc        adc     tmpd+4        tay        SET8A@xferlp:        phb        pla        xba        lda     tmpd+7        pha        plb        xba        pha        lda     0,y        iny        plb        sta     WMDATA        inx        dec     tempd+2        bne     @xferlp        ply        bra     @cont@unencode:        pha        lda     (tmpd),y        iny        sta     WMDATA        inx@cont:        cpy     tmpd+2        bcs     @contz        dec     tempd+4	;temp2+4        lda     tempd+4	;temp2+4        ora     #0        beq     @contz        pla        jmp     @encoded@contz:        pla        cpy     tmpd+2        bcs     @okgo        jmp     @decompl@okgo:        stx     tmpd+4        SET8I        plb        rtl** Joystick read and process routine*readjoystick:	proc	** get joystick data (called from nmi)*		lda	JOY1L			;get current joystick data	sta	tmp	lda	JOY1H	sta	tmp+1		lda	Joy1Data		and	#$f0	and	tmp	eor	tmp	sta	debounce	lda	Joy1Data+1	and	#$f0	and	tmp+1	eor	tmp+1	sta	debounce+1	lda	tmp	sta	Joy1Data	lda	tmp+1	sta	Joy1Data+1		rts** Bob's joystick interpretation*processjoystick:	proc	lda	fade	bne	@nomove	lda	status	cmp	#teleported	beq	@nomove	lda	bobready	bne	@changestuff@nomove:	lda	demoflag	beq	@notouch@notouch:	stz	Joy1Data	stz	Joy1Data+1	stz	debounce	stz	debounce+1	rts** demo?*@changestuff:	lda	demoflag	beq	@playgame	phb	lda	#13	pha		plb		lda	fade	bne	@noabort	lda	debounce+1	ora	debounce	beq @noabortxxx	lda	#1	sta	gettitlemusic	bra	@doabort@noabortxxx:	lda	demoaddress	sta	tmp	lda	demoaddress+1	sta	tmp+1		inc	demoticks		ldy #2	lda	(tmp),y	cmp	#255	beq	@doabort	cmp	demoticks	bne	@continue		inc	democount		lda	demoaddress	clc	adc	#4	bcc	@finexxx	inc	demoaddress+1@finexxx	sta	demoaddress	stz	demoticks@continue:	dey	dey	lda	(tmp),y	sta	debounce	sta	Joy1Data	iny	lda	(tmp),y	sta	debounce+1	sta	Joy1Data+1	plb	bra	@playgame@doabort:	jsr	dofadeout	lda	#-1	sta	winflag	stz	democount	lda	#1			;ed logic	sta	lives	@noabort:	plb	rts** change weapons/remotes*@playgame:	lda debounce			and #JoyTR	beq	@l1	jsr	changeremote@l1:	lda	cleanchange	bne	@fuckadam	lda	debounce			and	#JoyTL	beq	@l2	inc	cleanchange@fuckadam:	lda	cputime	and	#1	bne	@l2	jsr	changeweapon	stz	cleanchange@l2:	** Fire Weapon ?*@fireweapon:	jsr	trypointup		;try raise gun up	lda	debounce+1			and	#joyY	beq	@fireutility	jsr	fireweapon		** Punch with utility arm *@fireutility:	lda	debounce	and	#JoyA	beq	@deployremote;	jsl	makepowerup		jsl	doingwhat	bcc	@nopunch	lda	punchflag		bne	@nopunch		lda	#SFXPUNCH	jsl	soundeffects	stz	onepunch	inc	punchflag@nopunch:** Deploy Remote ?*@deployremote:	lda	debounce	and	#JoyX	beq	@tryjump	jsl	deployremote*	* Try to jump*@tryjump:	lda	debounce+1	and	#JoyB	beq	@trypause		jsr	startjump** play sound effects*@trypause:	lda	debounce+1	and	#JoySelect	beq	@trypause2;	jsr	setupwin	;dance!!!			if cheat			inc	stoked		;max power	lda	stoked	cmp	#3	bcc	@trypause2	stz	stoked	jsl	startmaxgamestuff			endif		** Pausing the game*@trypause2:	lda	pausehold	beq	@fuckyou	dec	pausehold	bra	readstick	@fuckyou:	lda	debounce+1	and	#joyStart	bne	@inv	jmp	readstick@inv:;; chris fudge for final boss	lda virusbossflag	bne readstick			;avoid pause if this is the final boss		lda	pauseflag	bne	readstick	lda	pausehold	beq	@pauseit	dec	pausehold	bra	readstick	@pauseit:	jsl	createallinv	jsr	cutblack	lda	#1	sta	pauseflag		jsr	clearscroll2	jsr	clear_halfscroll	** process joypad entries*readstick:	lda	nocrouch			;after climbing on ladder....	beq	@fine	lda	Joy1Data+1			;no crouch when come down on ground	and	#JoyDown	bne	@fine@clearcrouch:	stz	nocrouch@fine:	lda	Joy1Data+1			;signal left/right stick action	and	#JoyLeft+JoyRight	beq	@nostickaction	inc	bobhmove	rts@nostickaction:	stz	bobhmove	stz framecount		;walk cycle	rts** change the current weapon*changeweaponl:	jsr	changeweapon	rtl	changeweapon:	lda	weapon	cmp	#-1	bne	@ok	rts@ok:	sta	temp@lookloop:	lda	temp	inc	a	cmp	#6	bcc	@fine	lda	#0@fine:		sta	temp	cmp	weapon	beq	@nochange	tay	lda	weaponcount,y	beq	@lookloop	lda	temp	sta	weapon	lda	#SFXSWITCH	jsl	soundeffects	stz	dribbleframe@nochange:	rts	** change remote*changeremotel:	jsr	changeremote	rtl		changeremote:	lda	remote	cmp	#-1	bne	@ok	rts@ok:	sta	temp@lookloop:	lda	temp	inc	a	cmp	#6	bcc	@fine	lda	#0@fine:		sta	temp	cmp	remote	beq	@nochange	tay	lda	remotecount,y	beq	@lookloop@useit:	lda	temp	sta	remote	lda	#SFXSWITCH	jsl	soundeffects@nochange:	rts	** can bob point gun up...*trypointup:	lda	bobshield		;if shield is on....	beq	@otay	and	#1	bne	@otay			rts	@otay:	lda	cputime		;alternate	and	#1	beq	@canchange				rts@canchange:	lda	Joy1Data+1			;try raise gun in air	and	#JoyUp	beq	@noup	lda	Joy1Data+1	and	#JoyLeft+JoyRight	bne	@noup	lda	turncount	bne	@leave	lda	status	cmp	#stopping	beq	@tryup	cmp	#walking	bne	@noup@tryup:	lda	accelcount	ora	standonelevator	bne	@noup@yesup:	lda	gundir	bne	@leave	lda	#1	sta	gundir;	lda	#4;	sta	muzzoffx;	lda	#-40;	sta	muzzoffy	lda	#1				;how long gun must stay up	sta	gunuphold	rts@noup:	lda	gundir	beq	@leave	lda	gunuphold	dec	a	sta	gunuphold	bne	@leave	stz	gundir;	lda	#GUNOFFX;	sta	muzzoffx;	lda	#GUNOFFY;	sta	muzzoffy@leave:	rts	** Not too many things at once*doingwhat:	lda	bodyflag	bne	@noway		lda	status	cmp	#climbing	beq	@noway	cmp	#handmove	beq	@noway	cmp	#sleeping	beq	@noway	cmp	#drivescooter	beq	@noway	cmp	#leavegoth	beq	@noway		lda	turncount	bne	@noway	@way:	sec	rtl@noway:	clc	rtl	doingwhat2:	lda	bodyflag	bne	@noway		lda	status	cmp	#climbing	beq	@noway	cmp	#sleeping	beq	@noway	cmp	#drivescooter	beq	@noway		lda	turncount	bne	@noway	@way:	sec	rtl@noway:	clc	rtl	** pass x/y and dir to new task*passxy:	tay	lda	PICxhi,x	sta	PICxhi,y		lda	PICyhi,x	sta	PICyhi,y	lda	PICdir,x	sta	PICdir,y		lda	PICxlo,x	sta	PICxlo,y		lda	PICylo,x	sta	PICylo,y		ldx	TSKcurrent	rts	** shrapnel death animation*shrapneldeath0:	dc.w	bobshrapnel7	dc.w	bobshrapnel8	dc.w	bobshrapnel9	dc.w	bobshrapnel10	dc.w	bobshrapnel11	dc.w	bobshrapnel12	dc.w	bobshrapnel13	dc.w	bobshrapnel14	dc.w	bobshrapnel15	dc.w	bobshrapnel16	dc.w	bobshrapnel17	dc.w	bobshrapnel18	dc.w	bobshrapnel19	dc.w	bobshrapnel20	dc.w	bobshrapnel21	dc.w	bobshrapnel22	dc.w	bobshrapnel23	dc.w	bobshrapnel24	** remove all weapon tasks*removeweapontasks:	ldy	#21@loop:	lda	#0	sta	TSKflags,y	sta	PICadrLo,y	sta	PICadrHi,y	iny	cpy	#24	bcc	@loop	rts	dummy	jsl	TSKsuspend	jmp	TSKcancel		** scroll lock guy*bossguy:	lda	status	cmp	#stopping	bne	@fine	jsr	fullstop	lda	#walking	sta	status@fine:	lda	#1	sta	centrescroll	lda	#64+12			;distance to scroll left	sta	centrescrx		stx	whichbigship	;pass id to movehoriz		jsl	TSKsuspend	lda	lockscreen	bne	@jobdone	rtl@jobdone:	jml	TSKcancel	** bob is in spaceship on goth*bobspaceship:	;section deleted - boring...	** set up the win...*setupwin:	stz	dpremflag	stz	punchflag	jsr	fullstop	stz	waitforwin	lda	#teleported	sta	status	lda	#maxstrength	sta	strength		inc	teleportout	jsl	initteleport	stz	bobcount	lda	dancetype	inc	a	cmp	#5	bcc	@ripper	lda	#0@ripper:	sta	dancetype	stz	dancesteps	rts			