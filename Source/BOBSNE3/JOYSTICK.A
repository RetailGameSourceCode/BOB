** Joystick read and process routine*readjoystick:	proc	** get joystick data (called from nmi)*		lda	JOY1L			;get current joystick data	sta	tmp	lda	JOY1H	sta	tmp+1		lda	Joy1Data		and	#$f0	and	tmp	eor	tmp	sta	debounce	lda	Joy1Data+1	and	#$f0	and	tmp+1	eor	tmp+1	sta	debounce+1	lda	tmp	sta	Joy1Data	lda	tmp+1	sta	Joy1Data+1		rts** Bob's joystick interpretation*processjoystick:	proc	lda	status	cmp	#teleported	beq	@nomove	lda	bobready	bne	@changestuff@nomove:	lda	demoflag	beq	@notouch@notouch:	stz	Joy1Data	stz	Joy1Data+1	stz	debounce	stz	debounce+1	rts** demo?*@changestuff:	lda	demoflag	beq	@playgame	phb	lda	#13	pha		plb		lda	fade	bne	@noabort	lda	debounce+1	ora	debounce	bne @doabort	lda	demoaddress	sta	tmp	lda	demoaddress+1	sta	tmp+1		inc	demoticks		ldy #2	lda	(tmp),y	cmp	#255	beq	@doabort	cmp	demoticks	bne	@continue		inc	democount		lda	demoaddress	clc	adc	#4	bcc	@finexxx	inc	demoaddress+1@finexxx	sta	demoaddress	stz	demoticks@continue:	dey	dey	lda	(tmp),y	sta	debounce	sta	Joy1Data	iny	lda	(tmp),y	sta	debounce+1	sta	Joy1Data+1	plb	bra	@playgame@doabort:	jsr	dofadeout	lda	#-1	sta	winflag	stz	democount	lda	#1			;ed logic	sta	lives	@noabort:	plb	rts** change weapons/remotes*@playgame:	lda debounce			and #JoyTR	beq	@l1	jsr	changeremote@l1:	lda	debounce			and	#JoyTL	beq	@l2	jsr	changeweapon;	lda	gravity;	eor	#1;	sta	gravity@l2:	** Fire Weapon ?*@fireweapon:	lda	debounce+1			and	#joyY	beq	@fireutility	jsr	fireweapon		** Punch with utility arm *@fireutility:	lda	debounce	and	#JoyA	beq	@deployremote	jsl	doingwhat	bcc	@nopunch		lda	punchflag		ora	throwflag	ora	chuckflag	bne	@nopunch	;	inc	teleportout		;win;	jsr	initteleport;	lda	#42;	sta	sdmaflag;	stz	sdmacount	;	stz	bobcount		lda	#SFXPUNCH	jsl	soundeffects	stz	onepunch	inc	punchflag@nopunch:** Deploy Remote ?*@deployremote:	lda	debounce	and	#JoyX	beq	@tryjump	jsl	deployremote*	* Try to jump*@tryjump:	lda	debounce+1	and	#JoyB	beq	@trypause		jsr	startjump** play sound effects*@trypause:	lda	debounce+1	and	#JoySelect	beq	@trypause2	inc	stoked		;max power	lda	stoked	cmp	#3	bcc	@trypause2	stz	stoked	inc squished	stz strength	;	jsl	startmaxgamestuff	;	lda	soundnumber;	jsl	soundeffects;	lda	soundnumber;	inc	a;	cmp	#$99;	bne	@setnumber;	lda	#$82;@setnumber;	sta	soundnumber	** Pausing the game*@trypause2:	lda	debounce+1	and	#joyStart	bne	@inv	jmp	readstick@inv:	lda	pauseflag	beq	@pauseit	jmp	readstick	@pauseit:;	lda	lockscreen;	bne	readstick	jsr	createallinv	lda	#1	sta	pauseflag		jsr	clearscroll2	jsr	clear_halfscroll	** process joypad entries*readstick:	lda	Joy1Data+1			;try raise gun in air	and	#JoyUp	beq	@gunstraight	jsr	trypointup	bra	@otherpad@gunstraight:	stz	gundir	@otherpad: 	lda	nocrouch			;after climbing on ladder....	beq	@fine	lda	Joy1Data+1			;no crouch when come down on ground	and	#JoyDown	bne	@fine@clearcrouch:	stz	nocrouch@fine:	lda	Joy1Data+1			;signal left/right stick action	and	#JoyLeft+JoyRight	beq	@nostickaction	inc	bobhmove	rts@nostickaction:	stz	bobhmove	stz framecount		;walk cycle	rts** change the current weapon*changeweapon:	lda	weapon	cmp	#-1	bne	@ok	rts@ok:	sta	temp@lookloop:	lda	temp	inc	a	cmp	#6	bcc	@fine	lda	#0@fine:		sta	temp	cmp	weapon	beq	@nochange	tay	lda	weaponcount,y	beq	@lookloop	lda	temp	sta	weapon	lda	#SFXSWITCH	jsl	soundeffects@nochange:	rts	** change remote*changeremote:	lda	remote	cmp	#-1	bne	@ok	rts@ok:	sta	temp@lookloop:	lda	temp	inc	a	cmp	#6	bcc	@fine	lda	#0@fine:		sta	temp	cmp	remote	beq	@nochange	tay	lda	remotecount,y	beq	@lookloop@useit:	lda	temp	sta	remote	lda	#SFXSWITCH	jsl	soundeffects@nochange:	rts		** create inventory stuff*createallinv:		lda	#type_inven	jsl	TSKschedule	dw	inventask		;weapons	lda	#type_inven	jsl	TSKschedule	dw	inventask2		;remotes		lda	#type_inven	jsl	TSKschedule	dw	inventask3		;picture of bob	ldy	#0				;build ram frame@loop:	lda	invenpic,y	sta	invsprites,y	sta	invsprites2,y	iny	cpy	#13	bcc	@loop		jsr	cutblack		rts	** can bob point gun up...*trypointup:	lda	alternate	and	#1	beq	@canchange	rts@canchange:	lda	status	cmp	#stopping	beq	@tryup	cmp	#walking	bne	@noup@tryup:	lda	accelcount	bne	@noup@yesup:	lda	#1	sta	gundir	rts@noup:	stz	gundir	rts	** Not too many things at once*doingwhat:	lda	bodyflag	bne	@noway		lda	status	cmp	#climbing	beq	@noway	cmp	#handmove	beq	@noway	cmp	#sleeping	beq	@noway	cmp	#drivescooter	beq	@noway		lda	turncount	bne	@noway	@way:	sec	rtl@noway:	clc	rtl** pass x/y and dir to new task*passxy:	tay	lda	PICxhi,x	sta	PICxhi,y		lda	PICyhi,x	sta	PICyhi,y	lda	PICdir,x	sta	PICdir,y		lda	PICxlo,x	sta	PICxlo,y		lda	PICylo,x	sta	PICylo,y		ldx	TSKcurrent	rts		