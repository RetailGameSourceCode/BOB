** Module to handle Bob line of sight and weapons*		gun*		uzi*		flame *		water*		energy*		missiles*MISSILESPEED	EQU	8** Weapon characteristics*weaponmax:	dc.b	4	;gun	dc.b	1	;uzi	dc.b	1	;flame	dc.b	4	;missile	dc.b	3	;beam	dc.b	2	;sonicweapondelays:	dc.b	4	;gun	dc.b	8	;uzi	dc.b	16	;flame	dc.b	8	;missile	dc.b	24	;beam	dc.b	32	;sonic** routine to fire Bob's weapon*fireweapon:	jsr	canwefire		;make sure conditions permit firing	bcs	@yes	rts@yes:	** shoot 1 bullet*@notgun:		lda	weapon	bne	@see1		lda	#type_weapon	jsl	TSKschedule	dw	processgun		bcc	@noroom0	stz	bulletphase	jsr	setweaponstart	lda	#SFXGUN	jsl	soundeffects@noroom0:	rts*	** fire uzi*@see1:	cmp	#1	bne	@see2	lda	#type_weapon	jsl	TSKschedule	dw	processuzi		bcc	@noroom1	jsr	setweaponstart	stz	bulletphase	lda	#SFXUZI	jsl	soundeffects@noroom1:	rts** flame thrower*	@see2:	cmp	#2	bne	@see3		lda	#type_weapon	jsl	TSKschedule	dw	processflames	bcc	@noroom2	jsr	setweaponstart@noroom2:	rts	** missile*@see3:	cmp	#3	bne	@see4	lda	#type_weapon	jsl	TSKschedule	dw	processmissile	bcc	@noroom3	jsr	setweaponstart	lda	#SFXMISSILE	jsl	soundeffects@noroom3:	rts** energy beam*@see4:	cmp	#4	bne	@see5	lda	#type_weapon	jsl	TSKschedule	dw	processenergy		bcc	@noroom4	jsr	setweaponstart	lda	#SFXBEAM	jsl	soundeffects@noroom4:	rts** sonic*@see5:;	cmp	#5;	bne	@see6	lda	#type_weapon	jsl	TSKschedule	dw	sonicweapon	bcc	@noroom5	jsr	setweaponstart	lda	#SFXSONIC	jsl	soundeffects@noroom5:	rts** single bullet*processgun:	lda	#0	sta	PICattr,x	lda	#7	sta	PICcolor,x		lda	#1	sta	PICscroll,x	lda	#4	sta	PICsize,x		lda	PICdir,x	bpl	@noflipx	jsl	PICxflip@noflipx:	lda	PICdirv,x	beq	@horiza	jsl	PICput	dw	gunup0	bra	@drawn@horiza:	jsl	PICput	dw	gunstr0@drawn:	lda	shootflag	bne	@nope	inc	shootflag@nope:		jsl	TSKsuspend	;	lda	#12;	jsr	movebullet	** off screen check*@movedone:	lda	#hitbybullet	ldy	#12	jmp	weaponcollide	;	lda	#type_enemy;	jsr	checkhit;	bcs	@killbullet;	;	lda	PICxhi,x;	ora	PICyhi,x;	bne	@dokillbullet;@nohit:;	rtl;@killbullet:;	lda	PICtype,y;	beq	@nohit;	lda	PIChealth,y;	beq	@nohit;	dec	a;	sta	PIChealth,y;@dokillbullet:;	jmp killweapon			** the uzi...*uzibulletsup:	dc.w	uziup0	dc.w	uziup1	dc.w	uziup2	dc.w	uziup3	dc.w	uziup4	dc.w	uziup5		dc.w	uziup6	dc.w	uziup62uzibulletsstr:	dc.w	uzistr0	dc.w	uzistr1	dc.w	uzistr2	dc.w	uzistr3	dc.w	uzistr4	dc.w	uzistr5		dc.w	uzistr6	dc.w	uzistr62	uzisizeh:	dc.b	0,1,1,10,10,10,16uzisizev:	dc.b	0,7,8,11,11,12,12	processuzi:	lda	#3	sta	PIChealth,x		;strength of shot		lda	#1	sta	PICscroll,x	lda	#0	sta	PICsize,x		;40x16		lda	#7	sta	PICcolor,x	lda	PICdir,x	bpl	@noflipx	jsl	PICxflip@noflipx:	lda	shootflag	bne	@nope	inc	shootflag@nope:		jsl	TSKsuspend	** draw the current uzi frame*	lda	PICanim,x	tay	lda	PICdirv,x	beq	@shootstraight	lda	uzisizev,y	sta	PICsize,x	lda	#<uzibulletsup	ldy	#>uzibulletsup	bra	@setpicdir@shootstraight:	lda	uzisizeh,y	sta	PICsize,x	lda	#<uzibulletsstr	ldy	#>uzibulletsstr@setpicdir:	sta	tmp+2	sty	tmp+3		lda	PIChealth,x	cmp	#3				;if max...spread it out	beq	@reganim	cmp	#2	bne	@use1	lda	#9	sta	PICsize,x	lda	#7				;or 2	bne	@myanim@use1:	lda	#10	sta	PICsize,x	lda	#0				;or 1	beq	@myanim@reganim:	lda	PICanim,x@myanim:	asl	a	tay	lda	(tmp+2),y	sta	tmp	iny	lda	(tmp+2),y	sta	tmp+1	jsl	PICput2		lda	PICanim,x	cmp	#6	bcs	@fine	inc	PIcanim,x@fine:		lda	PICanim,x	cmp	#4	bcc	@nomove	ldy	#12	bra	@ismove;	lda	#12;	jsr	movebullet@nomove:	ldy	#0@ismove:	lda	#hitbyuzi	jmp	weaponcollide		** flame thrower*		processflames:	lda	#6	sta	PICcolor,x	lda	#2	sta	PICanim,x		lda	#2	sta	PICthingy,x	stz	PICvomit,x		lda	#6				;make sure sound is heard	sta	PICcount2,x		jsl	TSKsuspend	lda	PICcount2,x	inc	a	and	#7	sta	PICcount2,x	cmp	#7	bne	@shhh	lda	#SFXFLAME	jsl	soundeffects@shhh:	lda	muzzoffx	cmp	#5	bcs	@str	lda	#1	bra	@setdir@str:	lda	#0@setdir	sta	PICdirv,x		stz	tmp		lda	#6	ldy	#12	jsr	lengthallowed	lda	weaponlength	beq	@endjet@nocheck:		inc	PICvomit,x	;animation counter	lda	PICvomit,x	cmp	#1	bcc	@noreset	stz	PICvomit,x@noreset:	lda	#0	sta	PICattr,x** can jet still be active*	lda	weapon			;reduce jet if weapon changed	cmp	PIClogic,x	bne	@endjet		ldy	PIClogic,x		;kill if out of fuel	lda	weaponcount,y	beq	@endjet		lda	Joy1Data+1	and	#joyY	beq	@endjet	** grow the flame*@flamegrow:	lda	PICcount,x		;size of 0 to 7	cmp	#7	bcs	@setpoint	lda	PICvomit,x		;animation delay	bne	@setpoint		inc	tmp		inc	PICcount,x	lda	PICcount,x	cmp	#7	bne	@nozero@decstuff	stz	PICanim,x		;zero timer@nozero: 	jmp	@setpoint	** reduce the flame*@endjet:	jmp	killweapon		;the weenie and his partner						;made me take it out!** set point for flame thrower*@setpoint:	lda	muzzoffx	bmi	@lengthfine	lda	weaponlength	cmp	PICcount,x	bcs	@lengthfine	sta	PICcount,x@lengthfine:	jsr	drawflame	jsr	checkflame	** adjust cannister vars*@adjust:	lda	PICadrLo,x	;only count down if visible	ora	PICadrHi,x	beq	@nodec		lda	flameticks	inc	a	sta	flameticks	and	#1	cmp	#1	bne	@nodec	ldy	PIClogic,x		;then the ammo count	lda	weaponcount,y	dec	a	sta	weaponcount,y@nodec:		rtl	** energy beam*processenergy:	lda	#7	sta	PICcolor,x		lda	#1	sta	PICscroll,x		lda	PICdirv,x		;gun adjustment	beq	@xadjust	lda	#50	jsl	PICyadd	bra	@move@xadjust:	lda	PICdir,x	bmi	@left	lda	#-50	bne	@xyadd@left:	lda	#50@xyadd:	jsl	PICxadd@move:	lda	shootflag	bne	@nope	inc	shootflag@nope:		jsl	TSKsuspend	jsr	drawpulse;	lda	#16;	jsr	movebullet		lda	PICanim,x	cmp	#5	bcs	@maxedout	inc	PICanim,x@maxedout:	lda	#hitbybeam	ldy	#16	jmp	weaponcollide** process missile*processmissile:	lda	#4				;8x8	sta	PICsize,x			lda	#2	sta	PICcolor,x	lda	#0	sta	PICanim,x		lda	PICdirv,x	beq	@strmiss** process vertical missile*	jsl	PICput	dw	missileup0		jsl	TSKsuspend		jsl	PICyunflip	lda	cputime	and	#2	bne	@otherframe3	jsl	PICput	dw	missileup1	bra	@goon3@otherframe3	jsl	PICput	dw	missileup2@goon3:		lda	PICanim,x	bne @aiyyay	jmp @seelock@aiyyay:	tay	lda	PICxlo,x	cmp	PICxlo,y	bcc	@fine1a	sec	sbc	PICxlo,y	cmp	#MISSILESPEED	bcs	@toomucha	lda	PICxlo,y	sta	PICxlo,x	bra	@yset@toomucha:	lda	#MISSILESPEED	jsl	PICxsub	jsl	PICxflip			;fix	jsr	drawdiagmiss	bra	@yset@fine1a:	beq	@yset	lda	PICxlo,x	sec	sbc	PICxlo,y	cmp	#MISSILESPEED	bcs	@toomuch2aa	lda	PICxlo,y	sta	PICxlo,x	bra	@yset@toomuch2aa:	lda	#MISSILESPEED	jsl	PICxadd	jsl	PICxunflip		;fix	jsr	drawdiagmiss@yset:	jmp	@movemissile** process straight missile*@strmiss:	jsl	PICput	dw	missilestr0		lda	PICdir,x	bpl	@noflipa	jsl	PICxflip@noflipa:	lda	shootflag	bne	@nope	inc	shootflag@nope:		jsl	TSKsuspend	lda	#0	sta	PICattr,x	lda	PICdir,x	bpl	@noflip	jsl	PICxflip@noflip:	lda	cputime	and	#2	bne	@otherframe	jsl	PICput	dw	missilestr1	bra	@goon@otherframe	jsl	PICput	dw	missilestr2@goon:	lda	PICanim,x	beq	@seelock	tay	lda	PICylo,x	cmp	PICylo,y	bcc	@fine1	sec	sbc	PICylo,y	cmp	#MISSILESPEED	bcs	@toomuch	lda	PICylo,y	sta	PICylo,x	bra	@xset@toomuch:	lda	#MISSILESPEED	jsl	PICysub	jsr	drawdiagmiss	bra	@xset@fine1:	beq	@xset	lda	PICylo,x	sec	sbc	PICylo,y	cmp	#MISSILESPEED	bcs	@toomuch2	lda	PICylo,y	sta	PICylo,x	bra	@xset@toomuch2:	lda	#MISSILESPEED	jsl	PICyadd	jsr	drawdiagmiss	jsl	PICyflip@xset:	jmp	@movemissile	;@checkit	** common missile logic*@seelock:	jsr	missilelock@movemissile:	lda	#1	sta	PICscroll,x@flying:** finally move it*@getspeed:	lda	PICdirv,x	beq	@movelr	lda	#MISSILESPEED	;PICstatus,x	jsl	PICysub	bra	@checkit@movelr:	lda	#MISSILESPEED	;PICstatus,x@fastenough:	ldy	PICdir,x	cpy	#0	bpl	@norevert	eor	#255	clc	adc	#1@norevert	jsl	PICxadd@checkit:	;	lda	PICdir,x;	bmi	@smoothleft;	lda	#MISSILESPEED;	bra	@setmoveh;@smoothleft:;	lda	#-MISSILESPEED;@setmoveh:;	sta	PICmoveh,x			lda	#hitbymissile	ldy	#0	jmp	weaponcollide** diagonal missile*drawdiagmiss:		lda	cputime	and	#2	bne	@otherframe	jsl	PICput	dw	missiled0	bra	@goon@otherframe	jsl	PICput	dw	missiled0	;1@goon:	rts	** sonic weapon*sonicstrframes:	dc.w	sonicstr0	dc.w	sonicstr1	dc.w	sonicstr2	dc.w	sonicstr3	dc.w	sonicstr4sonicupframes:	dc.w	sonicup0	dc.w	sonicup1	dc.w	sonicup2	dc.w	sonicup3	dc.w	sonicup4sonicweapon:	lda	#25	sta	PIChealth,x		lda	#7	sta	PICcolor,x	lda	#0	sta	PICattr,x	lda	#1	sta	PICscroll,x		lda	#33	sta	PICsize,x		;40x40		lda	shootflag	bne	@nope	inc	shootflag@nope:			jsl	TSKsuspend	** draw the sonic frame*	lda	PICdirv,x	beq	@lrflip@udflip:		lda	TSKclock	and	#1	bne	@noxflip	jsl	PICxflip	bra	@ugghh@noxflip:	jsl	PICyunflip	bra	@ugghh@lrflip:		lda	TSKclock	and	#1	bne	@noyflip	jsl	PICyflip	bra	@ugghh@noyflip:	jsl	PICyunflip@ugghh:	lda	PICdirv,x	beq	@shootstraight	lda	#<sonicupframes	ldy	#>sonicupframes	bra	@setpicdir@shootstraight:	lda	#<sonicstrframes	ldy	#>sonicstrframes@setpicdir:	sta	tmp+2	sty	tmp+3		lda	PICanim,x@myanim:	asl	a	tay	lda	(tmp+2),y	sta	tmp	iny	lda	(tmp+2),y	sta	tmp+1	jsl	PICput2	** process movement*	lda	PICanim,x	cmp	#4	bcs	@fine	inc	PICanim,x@fine:;	lda	#12;	jsr	movebullet	;	lda	PICxhi,x;	ora	PICyhi,x;	beq	@notoff;	jmp	killweapon@notoff:	lda	#hitbysonic	ldy	#12	jmp	weaponcollide** see if weapon can be fired*canwefire:	ldy	weaponcanwefire2:	tya		bmi	@noshot	sty	temp		cpy	#2			;turn count fix....	beq	@canshoot	lda	muzzoffx	cmp	#NOGUNOFFX	bne	@canshoot@noshot:	clc	rts@canshoot:	lda	weapondelay		;no overload allowed	beq	@nodelay	clc	rts@nodelay:	ldy	temp	lda	weaponmax,y	;and keep under max limit	sta	temp	lda	activeweapons,y	cmp	temp	bcc	@stillspace	clc	rts@stillspace:	lda	weaponcount,y	;and have ammo	bne	@fireweapon	clc	rts@fireweapon:	sec	rts	** adjust firing vars* adjustweapons:	ldy	weaponadjustweapons2:	lda	activeweapons,y	inc	a				;increment active ammo	sta	activeweapons,y		lda	weapondelays,y	;and start delay counter	sta	weapondelay** decrement weapons counter*	cpy	#shootfire		;these two do it on their own...	beq	@nodec		lda	weaponcount,y	;lower weapon count	dec	a	sta	weaponcount,y@nodec:	rts*	* offscreen, remove bullet and decrement counters*		y has typekillweapon:	ldy	PIClogic,x	lda	activeweapons,y	dec	a	sta	activeweapons,y	jmp	TSKcancel		** pass bob's x/y and dir to new task*setweaponstart:	tay	lda	#%00110000	sta	PICbehind1,y	lda	weapon	sta	PIClogic,y	jsr	placeongun	jsr	adjustweapons	rts	setweaponstart2:		;uzi fires regular bullets	tay	lda	#0			sta	PIClogic,y	jsr	placeongun	ldy	#0	jsr	adjustweapons2	rts	** put weapon start on tip of gun*placeongun:;	lda	gundir			;gundir fix;	beq	@regular;	lda	#4;	sta	temp;	lda	#-40;	sta	temp+1;	bra	@setit@regular:	lda	muzzoffx	sta	temp	lda	muzzoffy	sta	temp+1@setit:	lda	walkdir	bpl	@noflip	lda	temp	eor	#255	clc	adc	#1	sta	temp@noflip:		lda	bobxpos	clc	adc	temp	sta	PICxlo,y		lda	bobypos	clc	adc temp+1	sta	PICylo,y		lda	walkdir	sta	PICdir,y		lda	#4	sta	PICbank,y	sta	PICprior,y	;	lda	gundir		lda	muzzoffx	cmp	#5	bcs	@str	lda	#1	bra	@setdir@str:	lda	#0@setdir	sta	PICdirv,y		rts	** draw energy beam*pulsestrframes:	dc.w	energystr0	dc.w	energystr1	dc.w	energystr2	dc.w	energystr4	dc.w	energystr5	dc.w	energystr6pulseupframes:	dc.w	energyup0	dc.w	energyup1	dc.w	energyup2	dc.w	energyup4	dc.w	energyup5	dc.w	energyup6drawpulse:	lda	PICdirv,x	beq	@shootstraight	lda	#<pulseupframes	ldy	#>pulseupframes	bra	@setpicdir@shootstraight:	lda	#<pulsestrframes	ldy	#>pulsestrframes@setpicdir:	sta	tmp+2	sty	tmp+3		lda	PICdir	lda	PICanim,x	asl	a	tay	lda	(tmp+2),y	sta	tmp	iny	lda	(tmp+2),y	sta	tmp+1	jsl	PICput2	rts	** Draw flame thrower*flamecycles:	dc.b	0,0,0,0	dc.b	0,1,0,1	dc.b	0,1,2,1	dc.b	0,1,2,3	dc.b	1,2,3,4	dc.b	2,3,4,5	dc.b	3,4,5,6	dc.b	4,5,6,7	flamestrframes:	dc.w	flamestr0	dc.w	flamestr1	dc.w	flamestr2	dc.w	flamestr3	dc.w	flamestr4	dc.w	flamestr5	dc.w	flamestr6	dc.w	flamestr7flameupframes:	dc.w	flameup0	dc.w	flameup1	dc.w	flameup2	dc.w	flameup3	dc.w	flameup4	dc.w	flameup5	dc.w	flameup6	dc.w	flameup7	drawflame:		lda	PICvomit,x			;flame cycle animation	bne	@noinc				;pointer	inc	PICthingy,x	lda	PICthingy,x	cmp	#4	bcc	@noinc	stz	PICthingy,x@noinc:	lda	tmp					;is flame growing?	bne	@shortanim	lda	PICcount,x	bra	@fuckoff@shortanim:	lda	PICcount,x			;flame animates from	asl	a	asl	a	sta	temp	clc	adc	PICthingy,x	tay	lda	flamecycles,y@fuckoff:	sta	temp+2	tay		lda	weaponlength	cmp	#-1	beq	@nullframe		lda	muzzoffx	cmp	#NOGUNOFFX	bne	@canflame@nullframe:	lda	#0	sta	PICadrLo,x	sta	PICadrHi,x	rts@canflame:	sta	temp+1	lda	PICdirv,x	beq	@str1	lda	#0	sta	temp	lda	#48	sta	temp+3	bra	@offset@str1:		stz	temp+3	lda	#44		sta	temp@offset:	lda	walkdir	bpl	@noneg		jsl	PICxflip	lda	temp+1	eor	#255	clc	adc	#1	sta	temp+1	lda	temp	eor	#255	clc	adc	#1	sta	temp@noneg:	stz	PICxhi,x	lda	bobxpos	sta	PICxlo,x		lda	temp	jsl	PICxadd		lda	temp+1	jsl	PICxadd	;	clc;	adc	temp;	clc;	adc	temp+1;	sta	PICxlo,x	lda	bobypos	sta	PICylo,x	lda	muzzoffy	jsl	PICyadd	lda	temp+3	jsl	PICysub	;	clc;	adc	muzzoffy;	sec;	sbc	temp+3;	sta	PICylo,x		lda	PICdirv,x	beq	@shootstraight	lda	#<flameupframes	ldy	#>flameupframes	bra	@setpicdir@shootstraight:	lda	#<flamestrframes	ldy	#>flamestrframes@setpicdir:	sta	tmp+2	sty	tmp+3		lda	temp+2	asl	a	tay	lda	(tmp+2),y	sta	tmp	iny	lda	(tmp+2),y	sta	tmp+1	jsl	PICput2	rts** collide and die...*shotbywhat:	dc.w	shotbygun	dc.w	shotbyuzi	dc.w	0			;flame	dc.w	shotbybeam	dc.w	shotbymissile	dc.w	shotbysonic	weaponcollide:	sta	edtemp		;save type of weapon	sty	edtemp+2		;speed		lda	PIClogic,x	;remove if weapon switched	cmp	weapon	bne	@killweapon	lda	PICxhi,x	;remove when off screen	beq	@xon	lda	PICdir,x	bpl	@right@left:	lda	PICxlo,x	cmp	#230	bcc	@killweapon	bra	@onscreen@right:	lda	PICxlo,x	cmp	#32	bcs	@killweapon	bra	@onscreen	@xon	lda	PICyhi,x	beq	@onscreen@killweapon:	lda	edtemp	cmp	#hitbymissile	bne	@nolock	lda	PICanim,x	beq	@nolock	tay	lda	PIClocked,y	dec	a	sta	PIClocked,y@nolock:	jmp	killweapon@onscreen:	lda	#type_enemy	;scan enemy lists	jsr	checkhit2	bcs	@bullethit@nothit:	lda	edtemp+2	jsr	movebullet	rtl@bullethit:	lda	PICtype,y	;must be of enemy type	beq	@nothit	lda	PIChealth,y	;with some strength	beq	@nothit		lda	edtemp	sta	PIChit,y	;set hitflag		phy		dec	a	asl	a	tay	lda	shotbywhat,y	sta	tmp	lda	shotbywhat+1,y	sta	tmp+1	ply	jmp	(tmp)		;and do appropriate handling	** shot by single bullet*shotbygun:	lda	PIChealth,y	dec	a	sta	PIChealth,y	jmp killweapon** shot by tri-uzi*shotbyuzi:	lda	PIChealth,x		;my bullet strength	sta	temp		lda	PIChealth,y	cmp	temp	bne	@nokill	lda	#0				;kill enemy and bullet	sta	PIChealth,y	jmp	@killbullet@nokill:	bcc	@bulletalive@bulletdead:	sec	sbc	temp	sta	PIChealth,y	jmp	killweapon@bulletalive:	lda	PIChealth,y	sta	temp+1	lda	temp	sec	sbc	temp+1	sta	PIChealth,x		;weaken bullet	lda	#0	sta	PIChealth,y		;kill enemy@nohit:		rtl@killbullet:	jmp killweapon		** shot by missile*shotbymissile:	lda	PICanim,x	beq	@nolock	lda	PIClocked,y	dec	a	sta	PIClocked,y@nolock:	lda	PIChealth,y	cmp	#3	bcs	@larger	lda	#0	sta	PIChealth,y	jmp	killweapon@larger:	sec	sbc	#2	sta	PIChealth,y@nope:	jmp	killweapon	** shot by partical beam*shotbybeam:	lda	PIChealth,y	cmp	#11	bcs	@larger	lda	#0	sta	PIChealth,y	jmp	killweapon@larger:	sec	sbc	#10	sta	PIChealth,y	jmp	killweapon** shot by ultimate blast*shotbysonic:	lda	PIChealth,x		;my bullet strength	sta	temp		lda	PIChealth,y	cmp	temp	bne	@nokill	lda	#0				;kill enemy and bullet	sta	PIChealth,y	jmp	@killbullet@nokill:	bcc	@bulletalive@bulletdead:	sec	sbc	temp	sta	PIChealth,y	jmp	killweapon@bulletalive:	lda	PIChealth,y	sta	temp+1	lda	temp	sec	sbc	temp+1	sta	PIChealth,x		;weaken bullet	lda	#0	sta	PIChealth,y		;kill enemy@nohit:		rtl@killbullet:	jmp killweapon** Length of flame/water allowed*		Acc has max length*lengthallowed:	sta	temp+7	sty	temp+6		lda	PICxlo,x	sta	PICtemp1,x		lda	bobxpos	sta	PICxlo,x		lda	#-1	sta	weaponlength	lda	turncount	beq	@noturn	lda	PICtemp1,x	sta	PICxlo,x	rts	@noturn:	lda	walkdir	bmi	@negway		** going right*@posway:	lda	muzzoffx	clc	adc	temp+6	jsl	PICxadd		stz	weaponlength	;	lda	#0;	ldy	#0;	jsr	bgcoll;;	jsr	findwall;	bcs	@found	;	inc	weaponlength	@incloop:;	jsr	xp;	jsr	xp;	jsr	findwall;	bcs	@found	inc	weaponlength	lda	weaponlength	cmp	temp+7	bcc	@incloop@found:	lda	PICtemp1,x	sta	PICxlo,x	rts** going left*@negway:	lda	muzzoffx	clc	adc	temp+6	jsl	PICxsub		stz	weaponlength	;	lda	#0;	ldy	#0;	jsr	bgcoll;	jsr	findwall;	bcs	@found2		inc	weaponlength	@incloop2:;	jsr	xm;	jsr	xm;	jsr	findwall;	bcs	@found2	inc	weaponlength	lda	weaponlength	cmp	temp+7	bcc	@incloop2@found2:	lda	PICtemp1,x	sta	PICxlo,x	rts		** move gun/uzi bullet*movebullet:	sta	temp	eor	#255	inc	a	sta	temp+1		lda	PICdirv,x	beq	@horiz	lda	temp+1	jsl	PICyadd	rts@horiz:	lda	PICdir,x		;move bullet...	bmi	@goleft	lda	temp	bra	@move@goleft:	jsl	PICxflip	lda	temp+1@move:	jsl	PICxadd	rts* * various weapon dribble for bob*dribblestrframes:	dc.w	dribble0	dc.w	dribble0	dc.w	dribble1	dc.w	dribble2	dc.w	dribble3	dc.w	dribble4dribbleupframes:	dc.w	dribbleu0	dc.w	dribbleu0	dc.w	dribble1	dc.w	dribbleu2	dc.w	dribbleu3	dc.w	dribbleu4	** dribble frames*dribble0:	dc.w	gundribblestr0	dc.w	gundribblestr1	dc.w	gundribblestr2dribbleu0:	dc.w	gundribbleup0	dc.w	gundribbleup1	dc.w	gundribbleup2	dribble1:	dc.w	flamedribble0	dc.w	flamedribble1	dc.w	flamedribble2	dc.w	flamedribble3		dribble2:	dc.w	missilestr0dribbleu2:	dc.w	missileup0	dribble3:	dc.w	edribblestr0		dc.w	edribblestr1	dc.w	edribblestr2	dc.w	edribblestr3	dc.w	edribblestr4	dc.w	edribblestr5	dc.w	edribblestr6	dribbleu3:	dc.w	edribbleup0		dc.w	edribbleup1	dc.w	edribbleup2	dc.w	edribbleup3	dc.w	edribbleup4	dc.w	edribbleup5	dc.w	edribbleup6	dribble4:	dc.w	sonicdribblestr0	dc.w	sonicdribblestr1	dc.w	sonicdribblestr2	dribbleu4:	dc.w	sonicdribbleup0	dc.w	sonicdribbleup1	dc.w	sonicdribbleup2** counters and colors*dribblefrcount:	dc.b	3,3,4,1,7,3dribblecolor:	dc.b	7,7,6,2,7,7dribbleprior:	dc.b	0,0,0,0,0,0	dc.b	0,0,1,1,0,1dribblexstradjust:	dc.b	8,8,6,8,8,8dribbleystradjust:	dc.b	0,0,0,-4,0,0dribblexupadjust:	dc.b	3,3,3,7,3,3dribbleyupadjust:	dc.b	-3,-3,-3,0,-4,-4	shrapneldeath1:	dc.w	bobshrapnel0	dc.w	bobshrapnel1	dc.w	bobshrapnel2	dc.w	bobshrapnel3	dc.w	bobshrapnel4	dc.w	bobshrapnel5	dc.w	bobshrapnel6	dc.w	0	weapondribble:	stz	PICadrLo,x	stz	PICadrHi,x		lda	status	cmp	#dying	beq	@dead	cmp	#teleported	bne	@nothing@dead:		lda	bobtalks	beq	@notext	** get him to say something witty*	jsl	PICxunflip		lda	bobxpos	clc		adc	#4	sta	PICxlo,x	lda	bobypos	sec		sbc	#28	sta	PICylo,x	lda	#0	sta	PICcolor,x	lda	#31	sta	PICbank,x	lda	status	cmp	#dying	bne	@notdead	 	lda PICxlo,x		;boss die...prevent	cmp	#70				;text from wrapping	bcc	@notext	cmp	#255-70	bcs	@notext		lda	#32	jsl	PICyadd		lda	bobdeathtext	jsl	teleporttext	rtl@notdead:		lda	teleportout	bne	@teleout	lda	bobentrytext	jsl	teleporttext	rtl@teleout:	lda	bobwintext	jsl	teleporttext@notext:	rtl	** else just some dribble*@nothing:	cmp	#drivescooter	beq	@anddie	cmp	#leavegoth	beq	@anddie	cmp	#dying	bne	@go** weapon dribble becomes a death explosion*	lda	deathtype	cmp	#3	bne	@anddie		lda	deathcount	cmp	#7	bcs	@anddie	asl	a	tay	lda	shrapneldeath1,y	sta	tmp	lda	shrapneldeath1+1,y		sta	tmp+1	jsl	PICput2		lda	#6	sta	PICcolor,x	lda	#13	sta	PICbank,x	lda	bobxpos	sta	PICxlo,x	lda	bobypos	sta	PICylo,x	rtl@anddie:		jml	TSKcancel@go:	** should we show dribble*	lda	#4	sta	PICbank,x			lda	status	cmp	#teleported	beq	@nodribble		lda	muzzoffx	cmp	#-1	beq	@nodribble	lda	muzzoffy	cmp	#-1	beq	@nodribble	lda	bobready	beq	@nodribble	ldy	weapon	lda	activeweapons,y	bne	@nodribble	lda	dribblefrcount,y	bne	@hasdribble@nodribble:	rtl** process dribble counter*@hasdribble:	sta	temp	lda	TSKclock	and	#1	beq	@noinc	lda	dribbleframe	inc	a	cmp	temp	bcc	@fine	lda	#0@fine:	sta	dribbleframe@noinc:** position on muzzle*	ldy	weapon	lda	dribblecolor,y	sta	PICcolor,x		lda	dribbleprior,y	sta	PICprior,x		** extract dribble frame address*@extractdribble:	lda	gundir	beq	@shootstraight	lda	#<dribbleupframes	ldy	#>dribbleupframes	bra	@setpicdir@shootstraight:	lda	#<dribblestrframes	ldy	#>dribblestrframes@setpicdir:	sta	tmp	sty	tmp+1		lda	weapon	asl	a	tay	lda (tmp),y	sta	tmp+2	iny	lda	(tmp),y	sta	tmp+3		lda	dribbleframe	asl	a	tay	lda	(tmp+2),y	sta	tmp	iny	lda	(tmp+2),y	sta	tmp+1	jsl	PICput2	rtl** keep dribble on gun*keepdribbleongun:	lda	status	cmp	#teleported	beq	@noway	lda	bobtalks	ora	killbeam	beq	@goon@noway:	rts@goon:	ldx	#1	lda	gundir	beq	@leftright** adjust for vertical shot*	ldy	weapon	lda	dribblexupadjust,y	sta	temp	lda	dribbleyupadjust,y	sta	temp+1		lda	bobypos	clc	adc	muzzoffy	sec	sbc	temp+1	sta	PICylo,x		lda	walkdir	bpl	@right2	lda	bobxpos	sec	sbc	muzzoffx	clc	adc	temp	sta	PICxlo,x	jsl	PICxflip	bra	@extractdribble@right2:	lda	bobxpos	clc	adc	muzzoffx	sec	sbc	temp	sta	PICxlo,x	jsl	PICxunflip	bra	@extractdribble	** adjust left and right*@leftright:	ldy	weapon	lda	dribblexstradjust,y	sta	temp	lda	dribbleystradjust,y	sta	temp+1		lda	bobypos	clc	adc	muzzoffy	clc	adc	temp+1	sta	PICylo,x		lda	walkdir	bpl	@right	lda	bobxpos	sec	sbc	muzzoffx	clc	adc	temp	sta	PICxlo,x	jsl	PICxflip	bra	@extractdribble@right:	lda	bobxpos	clc	adc	muzzoffx	sec	sbc temp	sta	PICxlo,x	jsl	PICxunflip	@extractdribble:	ldx	TSKcurrent	rts