** Bullets/explosions/sharpnel/turrets*** set up remote bullets*archtraject:	dc.b	-4,-4,-4,-3,-3,-3,-2,-2,-2,-2		;tank trajectory shot	dc.b	-1,-1,-1,-1,-1,-1,-1,0,0,0,0	dc.b	0,0,0,0,1,1,1,1,1,2,2,2,2,2,3,3,3,3,4,4,4,4,99	rpallete:	dc.b	6,2,0,0,0,7rbullxoff	dc.b	4,4,0,0,0,4	;remote bulet offsetsrbullyoff	dc.b	-1,10,0,0,0,-1rbullxspeed	dc.b	6,3,0,0,0,7	putbullet:	tay	lda	PIClogic,x		;remote type that fired	sta	PIClogic,y				phb	lda	#0	pha		plb		phy	tay					;extract remote start points	lda	rbullxoff,y	sta	temp+2	lda	rbullyoff,y	sta	temp+3	lda	rbullxspeed,y	;and bullet speed	sta	temp+4	lda	rpallete,y	sta	temp+5	ply		lda	PICdir,x		;if negative, negate	bpl	@plus	lda	temp+2	eor	#255	clc	adc	#1	sta	temp+2			;start point	lda	temp+4	eor	#255	clc	adc	#1	sta	temp+4			;x speed@plus	lda	temp+4	sta	PICdir,y		lda	temp+5	sta	PICcolor,y		lda	PICxlo,x		;and adjust start points	clc	adc	temp+2	sta	PICxlo,y	lda	PICylo,x	sec	sbc	temp+3	sta	PICylo,y		lda	PICxhi,x	sta	PICxhi,y		lda	PICyhi,x	sta	PICyhi,y		lda	#5				;massive shot	sta	PIChealth,y		plb	rtl	** bullet*bullet:** off screen check*	lda	#4	sta	PICbank,x		lda	PICxhi,x		;kill when off main screen	ora	PICyhi,x	beq	@notdead	jmp	TSKcancel@notdead:** wall collision*	lda	#0				;wall explode	ldy	#0	jsr	bgcoll	jsr	findwall	bcc	@clear@endbullet:		lda	#0	jmp	makeexplode** draw the bullet*@clear:	lda	PICdir,x		;flip....	bpl	@noflip	jsl	PICxflip@noflip:	lda	PIClogic,x	bne	@seeother	jsl	PICput			;draw	dw	fgunbullet	bra	@move@seeother:	cmp	#1	bne	@bezerk	jsl	PICput	dw	bouncericochet4	bra	@move@bezerk:	jsl	PICput	dw	bezbullet@move:	lda	#1	sta	PICscroll,x	** enemy smash check*	lda	#type_enemy	jsr	checkhit	bcc	@missed@killbullet:	lda	PICtype,y	beq	@missed	lda	PIChealth,y	cmp	#5	bcs	@almost	lda	#0	beq	@sethealth@almost:	sec	sbc	#5@sethealth	sta	PIChealth,y@nohit:	jmp	TSKcancel	** move the bullet*@missed:	lda	PICdir,x		;x move	jsl	PICxadd	lda	PICdir,x		;x move	jsl	PICxadd	lda	PIClogic,x	cmp	#1	bne	@straight		ldy	PICcount,x	lda	archtraject,y	cmp	#99	bne	@arch	lda	#4	bne	@down@arch:	inc	PICcount,x	bra	@down	@straight:	lda	PICanim,x		;y move@down:	sta	temp	jsl	PICyadd	lda	temp	jsl	PICyadd	rtl	** entry point for other tasks that want to explode dahling*		acc has type - 0=small, 1=large*makeexplode:	sta	PICstatus,x	stz	PICanim,x		;frames counter	stz	PICcount,x		;delay counter	stz	TSKbank,x		stz	PICtype,x		;harmless** explosion*	PICstatus=0 is small*	PICstatus=1 is big*	explosion:		lda	#2	sta	PICcolor,x	sta PICprior,x		lda	#3	sta	PICscroll,x		jsl	TSKsuspend	lda	#4	sta	PICbank,x	lda	PICcount,x	beq	@drawframe	inc	PICcount,x	lda	PICcount,x	cmp	#3	bcc	@nowrap	lda	#0	sta	PICcount,x@nowrap:	rtl		@drawframe:	inc	PICcount,x	lda	PICanim,x	cmp	#6	bcc	@goon	jmp	TSKcancel@goon:	inc	PICanim,x		asl	a	tay			lda	PICstatus,x	bne	@biggie	@smallie:		lda	sexplodeframes,y	sta	tmp	iny	lda	sexplodeframes,y	sta	tmp+1	jsl	PICput2	rtl@biggie:	lda	bexplodeframes,y	sta	tmp	iny	lda	bexplodeframes,y	sta	tmp+1	jsl	PICput2	rtl** explosion picture data*sexplodeframes:	dw	explo0	dw	explo1	dw	explo2	dw	explo3	dw	explo4	dw	explo5bexplodeframes:	dw	explo6	dw	explo7	dw	explo8	dw	explo9	dw	explo10	dw	explo11