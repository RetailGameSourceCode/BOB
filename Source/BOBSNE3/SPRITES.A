** draw sprites during vblank*dumpsprites:	stz	OAMADDL	stz	OAMADDH	lda #<OAM_DATA	sta	VMADDL	lda #>OAM_DATA	sta	VMADDH		lda	#%00000000	sta	$4300			; dma mode	lda	#4			;<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#0	sta	$4304			; bank #	lda	#<sprbuf	sta	$4302			; a-bus low addr	lda	#>sprbuf		;RAM source-(put),y	sta	$4303			; a-bus high addr		lda	#<maxsprites*4				;32		sta	$4305			; # of bytes low		lda	#>maxsprites*4				;2				sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma		* dump hi bits only	lda #<256	sta	OAMADDL	lda #>256	sta	OAMADDH	lda #<OAM_DATA	sta	VMADDL	lda #>OAM_DATA	sta	VMADDH		lda	#%00000000	sta	$4300			; dma mode	lda	#4			;<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#0	sta	$4304			; bank #	lda	#<sprbuf+512	sta	$4302			; a-bus low addr	lda	#>sprbuf+512		;RAM source-(put),y	sta	$4303			; a-bus high addr		lda	#32		sta	$4305			; # of bytes low		lda	#0				;2				sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts				changesprites	proc**	draw legs*	lda	#<$4020		;set VRAM destination	sta	VMADDL	lda	#>$4020	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#5	sta	$4304			; bank #	lda	spec_legs			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_legs+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#192	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	lda spec_legs	clc	adc #192	sta spec_legs	bcc @group1		inc spec_legs+1	@group1:* grouping 2	lda	#<$4120	;set VRAM destination	sta	VMADDL	lda	#>$4120	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#5	sta	$4304			; bank #	lda	spec_legs			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_legs+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#192 	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma* *	draw torso*	lda	#<$4220		;set VRAM destination	sta	VMADDL	lda	#>$4220	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#2	sta	$4304			; bank #	lda	spec_torso			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_torso+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#192	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	lda spec_torso	clc	adc #192	sta spec_torso	bcc @group2		inc spec_torso+1	@group2:	lda	#<$4320		;set VRAM destination	sta	VMADDL	lda	#>$4320	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#2	sta	$4304			; bank #	lda	spec_torso			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_torso+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#192	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	lda spec_torso	clc	adc #192	sta spec_torso	bcc @group3		inc spec_torso+1	@group3:	lda	#<$4420		;set VRAM destination	sta	VMADDL	lda	#>$4420	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#2	sta	$4304			; bank #	lda	spec_torso			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_torso+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#192	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma**	draw head*	lda	#<$47e0		;set VRAM destination	sta	VMADDL	lda	#>$47e0	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#1	sta	$4304			; bank #	lda	spec_head			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_head+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#64	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	lda spec_head	clc	adc #64	sta spec_head	bcc @group5		inc spec_head+1	@group5:	lda	#<$48e0		;set VRAM destination	sta	VMADDL	lda	#>$48e0	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#1	sta	$4304			; bank #	lda	spec_head			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_head+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#64	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	lda spec_head	clc	adc #64	sta spec_head	bcc @group6		inc spec_head+1	@group6:	lda	#<$49e0		;set VRAM destination	sta	VMADDL	lda	#>$49e0	sta	VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#1	sta	$4304			; bank #	lda	spec_head			;anim data lo	sta	$4302			; a-bus low addr	lda	spec_head+1		;anim data hi	sta	$4303			; a-bus high addr		lda	#64	sta	$4305			; # of bytes low	lda #0	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts	** weapon dma*weaponloc:	dc.w	wobj0	dc.w	wobj0	dc.w	wobj1	dc.w	wobj2	dc.w	wobj3	dc.w	wobj4	dc.w	weapondeath	dmadeath3:	lda	#6	bra	dmaweapons2dmaweapons:	lda	weapon	bpl	dmaweapons2	rtsdmaweapons2:	asl	a	tay	lda	weaponloc,y	sta	tmp	iny	lda	weaponloc,y	sta	tmp+1		lda #<$4000+(192*16)	sta VMADDL	lda #>$4000+(192*16)	sta VMADDH			lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#15	sta	$4304			; bank #		lda	tmp				;anim data lo	sta	$4302			; a-bus low addr	lda	tmp+1			;anim data hi	sta	$4303			; a-bus high addr		lda	#<(32*32) 	sta	$4305			; # of bytes low	lda #>(32*32)	sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts	**  change ancient lava characters*anclocation1:	dc.w	ancanim1			;0	dc.w	ancanim1+(8*32)		;1	dc.w	ancanim1+(16*32)	;2	dc.w	ancanim1+(24*32)	;3	dc.w	ancanim1+(32*32)	;4	dc.w	ancanim1+(40*32)	;5	dc.w	ancanim1+(48*32)	;6	dc.w	ancanim1+(56*32)	;7animateancientlava2: 	inc	doorcycle	lda	doorcycle	and	#3	cmp	#3	beq	@change	rts@change:	inc	doorcounter3	lda	doorcounter3	cmp	#8	bcc	@open2	lda	#0	sta doorcounter3@open2:	asl	a	tay	lda	anclocation1,y	sta	tmp	iny	lda	anclocation1,y	sta	tmp+1		lda #<$2000+(457*16)	sta VMADDL	lda #>$2000+(457*16)	sta VMADDH		lda	#<(32*8) 	sta	$4305			; # of bytes low	lda #>(32*8)	sta	$4306			; # of bytes high		@dumpit:	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#22	sta	$4304			; bank #		lda	tmp				;anim data lo	sta	$4302			; a-bus low addr	lda	tmp+1			;anim data hi	sta	$4303			; a-bus high addr		lda	#1	sta	MDMAEN		; turn on dma	rts			**  change lava lava characters*firelocation:	dc.w	$b000			;0	dc.w	$b000+(12*32)	;1	dc.w	$b000+(24*32)	;2	dc.w	$b000+(36*32)	;3	dc.w	$b000+(48*32)	;4	dc.w	$b000+(60*32)	;5	dc.w	$b000+(72*32)	;6	dc.w	$b000+(84*32)	;7	groundfirelocation	dc.w	$b000+(32*96)			;0	dc.w	$b000+(32*96)+(20*32)	;1	dc.w	$b000+(32*96)+(40*32)	;2	dc.w	$b000+(32*96)+(60*32)	;3	dc.w	$b000+(32*96)+(80*32)	;4	dc.w	$b000+(32*96)+(100*32)	;5	dc.w	$b000+(32*96)+(120*32)	;6	dc.w	$b000+(32*96)+(140*32) ;7	animatefirelava:	inc	doorcycle	lda	doorcycle	and	#1	bne	@change	rts@change:	lda	doorcycle	and	#2	bne	@dolava	** flowing lava*@dopillar:	inc	doorcounter2	lda	doorcounter2	cmp	#8	bcc	@open2	lda	#0	sta doorcounter2@open2:	asl	a	tay	lda firelocation,y	sta	tmp	iny	lda	firelocation,y	sta	tmp+1		lda #<$2000+(224*16)	sta VMADDL	lda #>$2000+(224*16)	sta VMADDH		lda	#<(8*32) 	sta	$4305			; # of bytes low	lda #>(8*32)	sta	$4306			; # of bytes high			bra	@dumpit	** bubbling ground lava*@dolava:	inc	doorcounter	lda	doorcounter	cmp	#8	bcc	@open	lda	#0	sta doorcounter@open:	asl	a	tay	lda	groundfirelocation,y	sta	tmp	iny	lda	groundfirelocation,y	sta	tmp+1		lda #<$2000+(236*16)	sta VMADDL	lda #>$2000+(236*16)	sta VMADDH		lda	#<(32*20) 	sta	$4305			; # of bytes low	lda #>(32*20)	sta	$4306			; # of bytes high	@dumpit:	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#$7e	sta	$4304			; bank #		lda	tmp				;anim data lo	sta	$4302			; a-bus low addr	lda	tmp+1			;anim data hi	sta	$4303			; a-bus high addr		lda	#1	sta	MDMAEN		; turn on dma	rts		**  change bug lava characters*lavalocation	dc.w	$b000			;0	dc.w	$b000+(8*32)	;1	dc.w	$b000+(16*32)	;2	dc.w	$b000+(24*32)	;3	dc.w	$b000+(32*32)	;4	dc.w	$b000+(40*32)	;5	dc.w	$b000+(48*32)	;6	dc.w	$b000+(56*32)	;7	lavalocation2	dc.w	$b000+(32*64)			;0	dc.w	$b000+(32*64)+(12*32)	;1	dc.w	$b000+(32*64)+(24*32)	;2	dc.w	$b000+(32*64)+(36*32)	;3animatelava:	inc	doorcycle	lda	doorcycle	and	#1	bne	@change	rts@change:	lda	doorcycle	and	#2	bne	@dolava	** pillar lava*@dopillar:	inc	doorcounter2	lda	doorcounter2	cmp	#4	bcc	@open2	lda	#0	sta doorcounter2@open2:	asl	a	tay	lda	lavalocation2,y	sta	tmp	iny	lda	lavalocation2,y	sta	tmp+1		lda #<$2000+(208*16)	sta VMADDL	lda #>$2000+(208*16)	sta VMADDH	lda	#<(32*12) 	sta	$4305			; # of bytes low	lda #>(32*12)	sta	$4306			; # of bytes high			bra	@dumpit		** bubbling lava*@dolava:	inc	doorcounter	lda	doorcounter	cmp	#8	bcc	@open	lda	#0	sta doorcounter@open:	asl	a	tay	lda	lavalocation,y	sta	tmp	iny	lda	lavalocation,y	sta	tmp+1		lda #<$2000+(233*16)	sta VMADDL	lda #>$2000+(233*16)	sta VMADDH		lda	#<(32*8) 	sta	$4305			; # of bytes low	lda #>(32*8)	sta	$4306			; # of bytes high	@dumpit:	lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#$7e	sta	$4304			; bank #		lda	tmp				;anim data lo	sta	$4302			; a-bus low addr	lda	tmp+1			;anim data hi	sta	$4303			; a-bus high addr		lda	#1	sta	MDMAEN		; turn on dma	rts** Control panel DMA download *DMAdownloadtext proc	lda	bobready	bne	@go	rts@go:	lda	panelline	eor	#1	sta	panelline	beq	@justpanel** 12 score bytes*	lda	#<$1000+(32*1)+15	sta	VMADDL			; vram low	lda	#>$1000+(32*1)+15	sta	VMADDH			; vram high		lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#<scorebuffer	sta	$4302			; a-bus low addr	lda	#>scorebuffer	; RAM source-(put),y	sta	$4303			; a-bus high addr	lda	#0					sta	$4304			; bank #	lda	#12+4	sta	$4305			; # of bytes low	lda	#0					sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts		** control panel - 2 lines*@justpanel:	lda	#<$1000+(32*24)+1	sta	VMADDL			; vram low	lda	#>$1000+(32*24)+1	sta	VMADDH			; vram high		lda	#%00000001	sta	$4300			; dma mode	lda	#<VMDATAWL		; which channel for DMA	sta	$4301			; b-bus addr	lda	#<controlbar1+2	sta	$4302			; a-bus low addr	lda	#>controlbar1+2	; RAM source-(put),y	sta	$4303			; a-bus high addr	lda	#0					sta	$4304			; bank #	lda	#124-2	sta	$4305			; # of bytes low	lda	#0					sta	$4306			; # of bytes high	lda	#1	sta	MDMAEN		; turn on dma	rts