bgcoll_longer:		ora	#0		; Test if X offset + or -	bpl	@posxoff	eor	#255	inc	a		; Negate offset	sta	temp	lda	PICxlo,x	sec	sbc	temp	sta	tmp	lda	PICxhi,x	sbc	#0	sta	tmp+1	bra	@xdone@posxoff:	clc	adc	PICxlo,x	sta	tmp	lda	PICxhi,x	adc     #0	sta	tmp+1		; tmp=PICx+X offset@xdone:	lda	tmp	clc	adc	blockcounth	sta	tmp	bcc	@nocarry	; tmp=Xcoordinate+blockcounth	inc	tmp+1@nocarry:	tya	ora	#0		; Test if Y offset + or -	bpl	@posyoff	eor	#255	inc	a		; Negate offset	sta	temp	lda	PICylo,x	sec	sbc	temp	sta	tmp+2	lda	PICyhi,x	sbc	#0	sta	tmp+3	bra	@ydone@posyoff:	clc	adc	PICylo,x	sta	tmp+2	lda	PICyhi,x	adc     #0	sta	tmp+3		; tmp=PICx+X offset@ydone:	lda	tmp+2	clc	adc	blockcountv	sta	tmp+2	bcc	@nocarry1	; tmp=Xcoordinate+blockcounth	inc	tmp+3@nocarry1:	SET16	lda	tmp+2		; Y pixel value	bpl	@posval		; First divide by 32	lsr	a	lsr	a	lsr	a	lsr	a	lsr	a		; /32	ora	#61440		; Add in negative stuff	bra	@negval@posval:	lsr	a	lsr	a	lsr	a	lsr	a	lsr	a		; /32@negval:	sta	temp+2		; temp+2=Y/32	lda	tmp		; Y pixel value	bpl	@posval1	; First divide by 32	lsr	a	lsr	a	lsr	a	lsr	a	lsr	a		; /32	ora	#61440		; Add in negative stuff	bra	@negval1@posval1:	lsr	a	lsr	a	lsr	a	lsr	a	lsr	a		; /32@negval1:	sta	temp		; temp=X/32	SET8	lda	temp+2		; Y map block position	sta 	WRMPYA		; multiplicand	lda 	mapwidth	sta 	WRMPYB		; multiplier		;block number * 32 chars	nop	nop	nop	nop	nop	nop	nop	nop	lda 	RDMPYL	clc	adc	temp		; X block offset	sta 	temp+2	lda 	RDMPYH	adc	#0	sta 	temp+3	     	; temp+2=Total map offset	lda	temp+2	clc	adc	map	sta	temp+2	lda	temp+3	adc	map+1	sta	temp+3		; temp+2=Map block pointer	phb	lda	#$7e		; Map bank	pha	plb	lda	(temp+2)	; Which block is it@	plb	sta	temp		; temp=block piece	stz	temp+1	phb	lda	blockpage	pha	plb	SET16	lda	temp		; Block #	asl	a	asl	a	asl	a	asl	a	asl	a	        ; x32	clc	adc	blockaddress	; +location of blockset	sta	temp		; temp=pointer to block	lda	tmp		; X pixel	and	#24		; within block - LSB 3 bits	lsr	a	lsr	a		; which character within block	clc	adc	temp	sta	temp		; Update block pointer	lda	tmp+2		; Y pixel	and	#24		; within block - LSB 3 bits	clc	adc	temp	sta	temp		; Update block pointer	lda	(temp)		; This is the charater!	and	#511	sta	temp		; temp=result	SET8		lda temp	sta whichchar					;tmp now holds the collision character	lda temp+1	sta whichchar+1		jsl charactertype_long	plb			; Set to bank 0	rtl	