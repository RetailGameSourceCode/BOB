** Crumbling platforms*howcrumbly:	dc.b	0,11,7crumblecolor:	dc.b	0,5,3	crumblingplatform:	lda	#2	sta	PICscroll,x	lda	#13	sta	PICbank,x	lda	#type_crumbler	sta	PICtype,x		stz	PICcount,x	stz	PICcount2,x	stz	PICanim,x	ldy	world	lda	howcrumbly,y	sta	PICthingy,x	lda	crumblecolor,y	sta	PICcolor,x		jsl	TSKsuspend** draw the current state*		lda	PICcount,x	asl	a	tay	lda	world	cmp	#2	beq	@ufcrumb	lda	crumbleplatforms,y	sta	tmp	iny	lda	crumbleplatforms,y	sta	tmp+1	bra	@drawit@ufcrumb:	lda	ufcrumbleplatforms,y	sta	tmp	iny	lda	ufcrumbleplatforms,y	sta	tmp+1@drawit:	jsl	PICput2	lda	PICanim,x	beq	@nocrumble	lda	PICcount2,x	cmp	#4	bcs	@die	inc	a	sta	PICcount2,x	cmp	#3	beq	@nocrumble	lda	#SFXVOLCANO	jsl	soundeffects	rtl@die:	lda	TSKclock	and	#1	bne	@nocrumble		inc	PICcount,x	lda	PICcount,x	cmp	#3	bcc	@nocrumble	stz	PICtype,x	cmp	PICthingy,x	bcc	@nocrumble	jml	TSKCancel@nocrumble:	rtl		** see if bob is trying to go through a platform*platformhit:	lda	bobymove		;only if going up	bmi	@search	rtl@search:		lda	bobxpos			;get bob's edges	sec		sbc	bobsizex	sta	temp+5	clc	adc	bobsizex	clc	adc	bobsizex	sta	temp+6	lda	bobypos			;get bob's head	sec	sbc	bobsizey	sec	sbc	bobymove	sta	temp+7	lda	#24	;elevator_start	;elevator range			sta	temp@elloop:	ldx	temp	lda	TSKflags,x		;must be there	bmi	@alive@nextelevator:	inc	temp	lda	temp	cmp	#29	;elevator_end	bcc	@elloop	ldx	TSKCurrent	rtl	** we have one....*@alive:	lda	PICxhi,x	ora	PICyhi,x	bne	@nextelevator	;	lda	PICtype,x;	cmp	#type_bubble;	beq	@nextelevator		lda	PICxlo,x		;and the elevator edges	sec		sbc	#32	sta	temp+2	clc	adc	#64	sta	temp+3	lda	temp+5			;is left side on elevator	cmp	temp+2	bcc	@leftoff	cmp	temp+3	bcc	@checky@leftoff:	lda	temp+6			;or right side?	cmp	temp+2	bcc	@nextelevator	cmp	temp+3	bcc	@checky@nope:		jmp	@nextelevator	** check for head bonk*@checky:	lda	PICylo,x			cmp	temp+7	bcs	@nextelevator	clc	adc	#32	cmp	temp+7	bne	@stillhigh	stz	bobymove	rtl	@stillhigh:	jmp	@nextelevator** see if bob is standing or about to stand on an elevator*platformstand:	sta	temp	sty	edtemp		stz	standonelevator			lda	status			;first must be on elevator	cmp	#elevator	beq	@exit	lda	bobmd			;if on solid, cannot ride elevator	beq	@notonsolid@exit:	rtl@notonsolid:** get bobs characteristics*	lda	status	cmp	#crouching	bne	@notfall	lda	jumpyspeed		;bug fix!!	cmp	#2	beq	@notfall	cmp	#6				;a few cycles no land	bcc	@exit@notfall:	lda	whichplatform		;platform is going down and bob is on it..	beq	@notriding	tay	lda	PICdirv,y	bmi	@notriding	lsr	a	sta	temp	lda	bobymove			;therefore adjust bob to where he should be	clc	adc	temp	sta	bobymove@notriding:	lda	bobxpos			;get bob's edges	sec		sbc	bobsizex	sta	temp+5	clc	adc	bobsizex	clc	adc	bobsizex	sta	temp+6	lda	bobypos			;get bob's feet	clc	adc	#24	;bobsizey;	clc;	adc	boboffsety	clc	adc	bobymove	sta	temp+7		** ok...scan through any existing elevators*;	lda	#elevator_start	;elevator range		;	sta	temp@elloop:	ldx	temp	lda	TSKflags,x		;must be there	bmi	@alive@nextelevator:	inc	temp	lda	temp	cmp	edtemp	;#elevator_end	;platform_end	bcc	@elloop@commonexit:	ldx	TSKCurrent	lda	whichplatform	beq	@noton	tay	lda	#1	sta	PICscroll,y	stz	whichplatform@noton:	rtl	** we have one....*@alive:	lda	PICxhi,x			;must be onscreen				ora	PICyhi,x	bne	@nextelevator		lda	PICtype,x			;type must be correct	cmp	#type_elevator	bcc	@nextelevator	cmp	#type_platform2+2	bcs	@nextelevator	@continue:;	lda	PICtype,x;	cmp	#type_elevator;	bne	@platform;	lda	#32;	bne	@yes;@platform:;	cmp	#type_platform;	bne	@nextelevator;	lda	#32;@yes:	lda	PICtype,x	cmp	#type_elevator	bne	@trybubble	lda	#32	sta	tmp		;save size	asl	a	sta	tmp+1	bra	@sizeset@trybubble:	lda	#16-2	sta	tmp	lda	#32-4	sta	tmp+1@sizeset:	lda	PICxlo,x		;and the elevator edges	sec		sbc	tmp	sta	temp+2	clc	adc	tmp+1	sta	temp+3		lda	temp+5			;is left side on elevator	cmp	temp+2	bcc	@leftoff	cmp	temp+3	bcc	@checky@leftoff:	lda	temp+6			;or right side?	cmp	temp+2	bcc	@nextelevator	cmp	temp+3	bcc	@checky@nope:		jmp	@nextelevator	** check for y positioning*@checky:	lda	PICtype,x	cmp	#type_crumbler	beq	@higher	cmp	#type_bubble	bne	@regel	lda	PICylo,x		;bubble position	clc	adc	#23	sta	temp+1	clc	adc	#8	sta	temp+2	bra	@pastregel		@higher	lda	PICylo,x	sec	sbc	#4	sta	temp+1	clc	adc	#8	sta	temp+2	bra	@pastregel	@regel:	lda	PICylo,x		;and elevator positioning...	clc	adc	#11	sta	temp+1	clc	adc	#8	sta	temp+2@pastregel:	lda	temp+7			;feet must be within an 8 pixel	cmp	temp+1			;boundary of elevator floor	bcs	@nothigh	jmp	@nextelevator@nothigh:	cmp	temp+2	bcc	@notlow	jmp	@nextelevator** ok...if dropping onto elevator....bob must be adjusted* so he lands right on the platform*@notlow:	lda	bobymove	bpl	@try	jmp	@nextelevator@try:	lda	temp+7			;have we passed walk point	cmp	temp+1	beq	@bullseye	sec						sbc	temp+1	sta	temp+1			;distance embedded	bra	@lookx		** bob is on elevator...put in that mode*@bullseye:	stz	temp+1@lookx:	lda	bobymove		;and new movement allowed...	sec	sbc	temp+1	sta	bobymove		lda	#1				;fall no further	sta	bobmd		** land on elevator ?*	lda	PICtype,x	cmp	#type_elevator	bne	@noride	lda	PICxlo,x		;elevator bug????????	cmp	#128-22	bcc	@stillhigh	cmp	#128+22	bcs	@stillhigh	lda	lookbelow	bne	@stillhigh		lda	#1	sta	standonelevator	;	lda	alternate			;synch with 30 hertz sprites;	and	#1;	bne	@stillhigh	lda	status			;is he walking	cmp	#walking	bne	@stillhigh		lda	decelcount		;fully stopped	cmp	#MAXDECEL	bne	@stillhigh		lda	bobhmove		;and motionless	bne	@stillhigh	lda	Joy1Data+1	and	#JoyDown	beq	@maybedown;	lda	#32;	jsl	canliftgo;	bcs	@stillhigh		bra	@heson@maybedown:		lda	Joy1Data+1	and	#JoyUp	beq	@stillhigh;	lda	#-32;	jsl	canliftgo;	bcs	@stillhigh	@heson:	jsl	fullstopl	lda	#elevator		;then elevate	sta	status	txa	sta	whichelevator	;and where..		jmp	@commonexit	@stillhigh:	jmp	@nextelevator** land on bubble ?*@noride:	cmp	#type_bubble	bne	@nobubble	stz	accelcount	stz	decelcount	stz	accelflag	stz	decelflag	stz	bobxmove		lda	#ridebubble	sta	status	txa	sta	whichbubble	jmp	@commonexit	** regular platform*@nobubble:	cmp	#type_platform	bne	@nostop		lda	alternate	and	#1	bne	@doadd			lda	PICanim,x	inc	a	cmp	#60	bcc	@fine	lda	PICdir,x	eor	#255	inc	a	sta	PICdir,x	lda	PICdirv,x	eor	#255	inc	a	sta	PICdirv,x	lda	#0@fine:	sta	PICanim,x@doadd:	lda	PICdir,x	bpl	@pos	eor	#255	inc	a	lsr	a	eor	#255	inc	a	bra	@setspeed@pos:	lsr	a@setspeed:	sta	temp		lda	bobxmove	eor	#255	inc	a	jsl	PICxadd		lda	bobxmove	clc	adc temp	sta	bobxmove		lda	PICdirv,x	bpl	@pos2	eor	#255	inc	a	lsr	a	eor	#255	inc	a	bra	@setspeed2@pos2:	lsr	a@setspeed2:	sta	temp	lda	bobymove	eor	#255	inc	a	jsl	PICyadd			lda	bobymove	clc	adc temp	sta	bobymove	stz	PICscroll,x@noadd:	stx	whichplatform	ldx	TSKcurrent	rtl	;	jmp	@commonexit	** trapdoor*@nostop:	cmp	#type_trapdoor	bne	@trydropper	lda	PICstatus,x	cmp	#opened	bne	@nopl	stz	bobmd	lda	bobymove		;and new movement allowed...	clc	adc	temp+1	sta	bobymove@nopl:	ldx	TSKcurrent	rtl	** dropping platform*@trydropper:			cmp	#type_platform2	bne	@nopl2	stx	whichplatform	lda	PICstatus,x	bne	@dropping	lda	#1	sta	PICstatus,x	bra	@noway@dropping:	lda	PICanim,x	cmp	#15	bcc	@noway** new scroll code*	lda	bobxmove	eor	#255	inc	a	jsl	PICxadd	lda	bobymove	eor	#255	inc	a	jsl	PICyadd			lda	bobymove	clc	adc #2	sta	bobymove	stz	PICscroll,x	@noway:	ldx	TSKcurrent	rtl	@nopl2:	cmp	#type_crumbler	bne	@nowayr	stx	whichplatform	lda	#1	sta	PICanim,x@nowayr:	ldx	TSKcurrent	rtl	** bubble generator*bubblegen:	lda	#38	sta sdmaflag		lda	#0	sta	PICtype,x	sta	PICanim,x	jsl	TSKsuspend		lda	#2	sta	PICscroll,x		lda	status	cmp	#ridebubble	bne	@start	rtl@start:	inc	PICanim,x	lda	PICanim,x	cmp	#120	bcc	@noroom	stz	PICanim,x	lda	#type_walk	jsl	TSKschedule	dw	risingbubble	bcc	@noroom	jsl	copytask@noroom:	rtl		** the rising bubble*risingbubble:		lda	#13	sta	PICbank,x		lda	#1	sta	PICscroll,x	sta	PICprior,x		lda	#1	sta	PICcolor,x		stz	PICanim,x	stz	PICcount,x	stz	PICcount2,x	jsl	TSKsuspend** bubble has blown up*	lda	PICcount,x	beq	@notdead	stz	PICtype,x	clc	adc	#3	asl	a	tay	lda	bubbleframes,y	sta	tmp	lda	bubbleframes+1,y	sta	tmp+1	jsl	PICput2		lda	PICcount,x	inc	a	cmp	#4	bcc	@ok	jml	TSKcancel@ok	sta	PICcount,x	rtl		** bubble is moving...*@notdead:;	lda	punchflag;	ora	activeremotes;	ora	weaponcount;	bne	@killbubble;	;	cpx	whichbubble;	bne	@ignore;	;	lda	status;	cmp	#ridebubble;	bne	@killbubble;@ignore:		lda	PICanim,x	cmp	#3	beq	@abubble	inc	a	sta	PICanim,x	cmp	#3	bne	@notabubble@abubble:			lda	#type_bubble	sta	PICtype,x@notabubble:	lda	PICanim,x	asl	a	tay	lda	bubbleframes,y	sta	tmp	lda	bubbleframes+1,y	sta	tmp+1	jsl	PICput2** now check any collisions*		lda	PICcount2,x	beq	@bobnotin		lda	status			;kill if chopper or tramp is deployed	cmp	#jumping	beq	@killbubble	cmp	#carried	beq	@killbubble	@bobnotin:	lda	#0					ldy	#-30	jsl	bgcoll_long	jsl	findwall_long	bcs	@killbubble	lda	#18					ldy	#-30	jsl	bgcoll_long	jsl	findwall_long	bcs	@killbubble	lda	#-18				ldy	#-30	jsl	bgcoll_long	jsl	findwall_long	bcs	@killbubble	lda	PICyhi,x	cmp	#-1	bne	@alive** ok...kill it*@killbubble:	lda	#1	sta	PICcount,x		lda	#SFXBUGSPLAT1	jsl	soundeffects		stz	PICtype,x		lda	status	cmp	#ridebubble	bne	@notriding	lda	#1	sta	jumpyspeed	lda	#falling			sta	status	stz	fallcount@notriding:	rtl** process bubble dynamics*@alive:	lda	status	cmp	#ridebubble	bne	@noton	cpx	whichbubble	bne	@noton	lda	#1	sta	PICcount2,x	lda	PICxlo,x	cmp	#128	beq	@rideup	bcc	@low@high:	jsl	PICxdec	bra	@rideup@low:	jsl	PICxinc@rideup:	stz	PICscroll,x	rtl	@noton:	jsl	PICydec	rtl	** dropping platform*droppingplatform:	lda	#type_platform2	sta	PICtype,x		lda	#13	sta	PICbank,x		lda	#5	sta	PICcolor,x	jsl	PICput	dw	platformframe	lda	#1	sta	PICscroll,x	** process dropping platform dynamics*	jsl	TSKsuspend	lda	PICstatus,x	beq	@moving	lda	PICanim,x	cmp	#15	bcc	@no	cpx	whichplatform	beq	@moving	lda	#4	jsl	PICyadd	lda	#2	sta	PICmovev,x	bra	@moving@no:	inc	a	sta	PICanim,x	cmp	#10	bcc	@moving;	lda	TSKclock;	and	#1;	bne	@good;	lda	#-2;	bra	@setshake;@good:;	lda	#2;@setshake;	jsl	PICxadd@moving:	lda	#0	ldy	#20	jsl	bgcoll_long	jsl	findwall_long		bcc	@fine	lda	#12	jml	explode@fine:	rtl ** horizontal platform*vertplatform:	lda	#0	sta	PICdir,x		lda	#2	sta	PICdirv,x		bra	aplatform	horizplatform:	lda	#2	sta	PICdir,x		lda	#0	sta	PICdirv,x	aplatform:	lda	#type_platform	sta	PICtype,x		lda	#13	sta	PICbank,x		lda	#1	sta	PICscroll,x		lda	maptype	cmp	#ultralevel	bne	@notultra	jsl	PICput	dw	ufplatformframe	lda	#3	sta	PICcolor,x	bra	@setrest@notultra:	jsl	PICput	dw	platformframe	lda	#5	sta	PICcolor,x@setrest:	lda	#30	sta	PICanim,x	** process moving platform dynamics*	jsl	TSKsuspend	cpx	whichplatform	beq	@platover	@move:	lda	PICanim,x		;move platform 	inc	a	cmp	#60	bcc	@fine	lda	PICdir,x	eor	#255	inc	a	sta	PICdir,x	lda	PICdirv,x	eor	#255	inc	a	sta	PICdirv,x	lda	#0@fine:	sta	PICanim,x	lda	PICdir,x	jsl	PICxadd			lda	PICdirv,x	jsl	PICyadd		lda	#1	sta	PICscroll,x@platover:	rtl** ultra force wind generator*windsizex:	dc.b	12,24,24,12windsizey:	dc.b	24,8,8,24	windgenerator:	lda	#type_generic	sta	PICtype,x		lda	#2	sta	PICscroll,x	lda	#13	sta	PICbank,x		lda	#3	sta	PICcolor,x		jsl	TSKsuspend		lda	status	cmp	#dying	beq	@missed		lda	PICxhi,x	ora	PICyhi,x	bne	@missed		lda	PIClogic,x	tay	lda	windsizex,y	sta	temp	lda	windsizey,y	sta	temp+1		lda	bobxpos	sta	temp+2	sec		sbc	temp	sta	temp+2	lda	bobxpos	sta	temp+3	clc	adc	temp	sta	temp+3	lda	bobypos	sta	temp+4	sec	sbc	temp+1	sta	temp+4	lda	bobypos	sta	temp+5	clc		adc	temp+1	sta	temp+5	lda	PICxlo,x	cmp	temp+2		;#128-32	bcc	@missed	cmp	temp+3		;#128+32		bcs	@missed		lda	PICylo,x	cmp	temp+4		;#Centrey-32	bcc	@missed	cmp	temp+5		;#Centrey+32	bcs	@missed		lda	PIClogic,x	sta	blowdir	beq	@juststat	cmp	#3	beq	@juststat	cmp	#1	beq	@makeright@makeleft:	lda	#faceright	bra	@setdir@makeright:	lda	#faceleft@setdir:	sta	walkdir@juststat	lda	#1	sta	startblowing	lda	#windblown	sta	status	stz	turncount	lda	#SFXBEAM		;hmm?	jsl	soundeffects@missed:** draw the damn wind stuff*	lda	TSKclock	and	#1	bne	@drawit	rtl@drawit:	lda	PIClogic,x	bne	@notup	jsl	PICyflip	lda	PICanim,x	inc	a	cmp	#8	bne	@notdone1	lda	#0@notdone1:	sta	PICanim,x	lda	#16	bra	@drawwind@notup:	cmp	#3	bne	@notdown	lda	PICanim,x	inc	a	cmp	#8	bne	@notdone2	lda	#0@notdone2:	sta	PICanim,x	lda	#16	bra	@drawwind@notdown:	cmp	#1	bne	@notleft	jsl	PICxflip	lda	PICanim,x	inc a	cmp	#8	bne	@notdone3	lda	#0@notdone3:	sta	PICanim,x	lda	#0	bra	@drawwind@notleft:	lda	PICanim,x	inc	a	cmp	#8	bne	@notdone4	lda	#0@notdone4:	sta	PICanim,x	lda	#0@drawwind:	sta	temp	lda	PICanim,x	asl	a	clc	adc	temp	tay	lda	windgenframesv,y	sta	tmp	lda	windgenframesv+1,y	sta	tmp+1	jsl	PICput2	rtlwindgenframesv:	dc.w	windgen29	dc.w	windgen30	dc.w	windgen31	dc.w	windgen32	dc.w	windgen33	dc.w	windgen34	dc.w	windgen35	dc.w	windgen36windgenframesh:	dc.w	windgen37	dc.w	windgen38	dc.w	windgen39	dc.w	windgen40	dc.w	windgen41	dc.w	windgen42	dc.w	windgen43	dc.w	windgen44		** frames*platformframe:ufplatformframe: dc.b $02 dc.b $80,$82+6,$AC dc.b $D0,$82+6,$AA;ufplatformframe:; dc.b $02; dc.b $D0,$C8,$AA; dc.b $80,$C8,$AC** Module to handle the elevator and land mines and breakable floors*	and steam valves*	** Elevator task*anelevator:	lda	#13	sta	PICbank,x	lda	#12				;32*8	sta	PICsize,x			lda	#type_elevator	sta	PICtype,x	lda	#5	sta	PICcolor,x				lda	#parked				;put in parked mode	sta	PICstatus,x		lda	#1	sta	PICscroll,x			;synch with bob		stz	PICprior,x			** whew...start me up*	jsl TSKsuspend		lda	#1	sta	PICscroll,x				;lock in	** what is the elevator doing*	lda	status					;if bob is not riding an elevator	cmp	#elevator				;ignore...	bne	@globalize	txa							;see if correct elevator	cmp	whichelevator	bne	@nothim	stz	PICscroll,x				;unlock from background@nothim:** draw the elevator*@globalize:	lda	PICxhi,x	beq	@seey	cmp	#1	beq	@seeleft	cmp	#-1	beq	@seeright	bra	@isoff@seeright:	lda	PICxlo,x	cmp	#220	bcc	@isoff	bra	@seey@seeleft:	lda	PICxlo,x	cmp	#32	bcs	@isoff@seey:	lda	PICyhi,x	beq	@showit:	cmp	#1	beq	@seebottom	cmp	#-1	beq	@seetop@seebottom:	lda	PICylo,x	cmp	#32	bcs	@isoff	bra	@showit@seetop:	lda	PICylo,x	cmp	#220	bcs	@showit@isoff:	stz	PICadrLo,x	stz	PICadrHi,x	rtl** bank in elevator if needed*@showit:;	lda #20;	sta sdmaflag		jsl	PICput	dw	elevator0	rtl	** Trap doors*trapdoor:;	lda	#2;	sta	PICscroll,x;	lda	#13;	sta	PICbank,x;	lda	#5;	sta	PICcolor,x	;	lda	#closed;	sta	PICstatus,x	;	lda	#type_trapdoor;	sta	PICtype,x	;	stz	PICcount,x;	stz	PICcount2,x	;	lda	#4;	sta	techflag1;	stz	techdmacount		jsl	TSKsuspend** draw the current state*;	lda	PICcount,x;	asl	a;	tay;	lda	trapframes,y;	sta	tmp;	iny;	lda	trapframes,y;	sta	tmp+1;	jsl	PICput2** now do logic bit*	;	lda	PICstatus,x;	cmp	#opening;	beq	@movefloor;	cmp	#closing;	beq	@movefloor;	cmp	#opened;	beq	@waittoclose** determine when to open the trap door*@waittoopen:;	inc	PICcount2,x;	lda	PICcount2,x;	cmp	#60;	bcc	@notyet2;	lda	#opening;	sta	PICstatus,x@notyet2:	rtl** close it when bob moves away*	@waittoclose:;	inc	PICcount2,x;	lda	PICcount2,x;	cmp	#30;	bcc	@notyet;	lda	#closing;	sta	PICstatus,x@notyet:	rtl	** continue with open or close door*@movefloor:;	lda	TSKclock;	and	#1;	cmp	#1;	bne	@notover	;	lda	PICstatus,x;	cmp	#opening;	beq	@openit@closeit:;	dec	PICcount,x;	lda	PICcount,x;	bne	@notover;	lda	#closed;	sta	PICstatus,x;	stz	PICcount2,x;	rtl	@openit:;	inc	PICcount,x;	lda	PICcount,x;	cmp	#3;	bcc	@notover;	lda	#opened;	sta	PICstatus,x;	stz	PICcount2,x;@notover:	rtl	** related frames*;trapframes:;	dc.w	trapdoor1;	dc.w	trapdoor2;	dc.w	trapdoor3;	dc.w	trapdoor4elevator0: dc.b $08 dc.b $60,$C5,$A0 dc.b $50,$C5,$E8 dc.b $10,$C5,$A2 dc.b $00,$C5,$A8 dc.b $10,$8B,$A6 dc.b $60,$8B,$A4 dc.b $50,$8B,$A5 dc.b $00,$8B,$A5;trapdoor1:; dc.b $08; dc.b $60,$93,$EC; dc.b $10,$93,$EC; dc.b $60,$83,$AC; dc.b $10,$83,$AC; dc.b $50,$93,$ED; dc.b $00,$93,$EB; dc.b $00,$83,$AB; dc.b $50,$83,$AD;trapdoor2:; dc.b $08; dc.b $60,$93,$EC; dc.b $10,$93,$EC; dc.b $60,$83,$AC; dc.b $10,$83,$AC; dc.b $58,$93,$ED; dc.b $08,$93,$EB; dc.b $08,$83,$AB; dc.b $58,$83,$AD;trapdoor3:; dc.b $04; dc.b $60,$93,$ED; dc.b $10,$93,$EB; dc.b $10,$83,$AB; dc.b $60,$83,$AD;trapdoor4:; dc.b $04; dc.b $10,$93,$EA; dc.b $60,$93,$EE; dc.b $60,$83,$AE; dc.b $10,$83,$AAbubbleframes	dc.w	bubbleframe0	dc.w	bubbleframe1	dc.w	bubbleframe2	dc.w	bubbleframe3	dc.w	bubbleframe4	dc.w	bubbleframe5	dc.w	bubbleframe6		bubbleframe0: dc.b $04 dc.b $90,$8D,$06 dc.b $80,$8D,$04 dc.b $D0,$8D,$02 dc.b $E0,$8D,$00bubbleframe1: dc.b $07 dc.b $90,$8D,$26 dc.b $D0,$8D,$22 dc.b $E0,$8D,$20 dc.b $90,$C3,$06 dc.b $80,$C3,$04 dc.b $D0,$C3,$02 dc.b $E0,$C3,$00bubbleframe2: dc.b $0A dc.b $90,$8D,$0E dc.b $80,$8D,$0C dc.b $E0,$8D,$08 dc.b $90,$C3,$26 dc.b $D0,$C3,$22 dc.b $E0,$C3,$20 dc.b $90,$D3,$06 dc.b $80,$D3,$04 dc.b $D0,$D3,$02 dc.b $E0,$D3,$00bubbleframe3: dc.b $0E dc.b $90,$8D,$2E dc.b $80,$8D,$2C dc.b $D0,$8D,$2A dc.b $E0,$8D,$28 dc.b $90,$C3,$0E dc.b $80,$C3,$0C dc.b $E0,$C3,$08 dc.b $90,$D3,$26 dc.b $D0,$D3,$22 dc.b $E0,$D3,$20 dc.b $90,$E3,$06 dc.b $80,$E3,$04 dc.b $D0,$E3,$02 dc.b $E0,$E3,$00bubbleframe4: dc.b $0C dc.b $F0,$D0,$E8 dc.b $E0,$E0,$E8 dc.b $90,$E0,$EA dc.b $A0,$D0,$EA dc.b $A0,$88,$EE dc.b $90,$98,$EE dc.b $E0,$98,$EC dc.b $F0,$88,$EC dc.b $D0,$80,$EC dc.b $80,$80,$EE dc.b $80,$D0,$EA dc.b $D0,$D0,$E8bubbleframe5: dc.b $0D dc.b $31,$02,$3D dc.b $2A,$0B,$2C dc.b $6F,$0B,$2C dc.b $14,$62,$2D dc.b $28,$00,$2D dc.b $12,$25,$2D dc.b $59,$26,$2D dc.b $71,$42,$2D dc.b $63,$60,$2D dc.b $1E,$D6,$2C dc.b $1A,$93,$2C dc.b $6C,$94,$2C dc.b $6E,$D4,$2Cbubbleframe6: dc.b $0B dc.b $25,$22,$3D dc.b $22,$44,$3D dc.b $29,$10,$3D dc.b $16,$27,$3D dc.b $5F,$26,$3D dc.b $74,$12,$3D dc.b $79,$54,$3D dc.b $29,$4E,$2D dc.b $22,$1C,$2D dc.b $6D,$1C,$2D dc.b $6F,$50,$2Dcrumbleplatforms:	dc.w	crumble0	dc.w	crumble1	dc.w	crumble2	dc.w	crumble3	dc.w	crumble4	dc.w	crumble5	dc.w	crumble6	dc.w	crumble7	dc.w	crumble8	dc.w	crumble9	dc.w	crumble10	dc.w	crumble11ufcrumbleplatforms:	dc.w	ufcrumble0	dc.w	ufcrumble1	dc.w	ufcrumble2	dc.w	ufcrumble3	dc.w	ufcrumble4	dc.w	ufcrumble5	dc.w	ufcrumble6	dc.w	ufcrumble7	crumble0: dc.b $04 dc.b $00,$80,$A6 dc.b $50,$80,$A4 dc.b $00,$D0,$A2 dc.b $50,$D0,$A0 crumble1: dc.b $04 dc.b $50,$81,$A8 dc.b $00,$80,$A6 dc.b $00,$D0,$A2 dc.b $50,$D0,$A0crumble2: dc.b $05 dc.b $52,$C3,$AE dc.b $00,$81,$A8 dc.b $50,$85,$A8 dc.b $00,$D0,$A2 dc.b $50,$D0,$A0crumble3: dc.b $06 dc.b $02,$C2,$AE dc.b $51,$81,$AE dc.b $50,$8A,$AA dc.b $00,$CE,$A8 dc.b $00,$85,$A8 dc.b $50,$D0,$A0crumble4: dc.b $05 dc.b $51,$85,$AE dc.b $50,$91,$AA dc.b $00,$8A,$AA dc.b $00,$CA,$A8 dc.b $50,$CE,$A8crumble5: dc.b $05 dc.b $43,$86,$AE dc.b $51,$97,$AC dc.b $00,$91,$AA dc.b $00,$C6,$AA dc.b $50,$CA,$A8crumble6: dc.b $04 dc.b $00,$95,$AC dc.b $51,$9E,$AC dc.b $00,$81,$AA dc.b $50,$C5,$AAcrumble7: dc.b $04 dc.b $50,$A5,$AE dc.b $50,$C1,$AA dc.b $00,$84,$AC dc.b $00,$9B,$ACcrumble8: dc.b $04 dc.b $50,$83,$AC dc.b $00,$8A,$AC dc.b $41,$A2,$AE dc.b $51,$AC,$AEcrumble9: dc.b $03 dc.b $00,$A8,$AE dc.b $01,$90,$AE dc.b $4F,$89,$ACcrumble10: dc.b $02 dc.b $01,$97,$AE dc.b $4F,$93,$AEcrumble11: dc.b $01 dc.b $4F,$99,$AEufcrumble0: db $03 db $48,$C8,$E2 db $00,$C8,$E4 db $50,$C8,$E4ufcrumble1: db $03 db $48,$C2,$E2 db $00,$C8,$E4 db $50,$C8,$E4ufcrumble2: db $03 db $47,$85,$E2 db $00,$C6,$E4 db $50,$C8,$E4ufcrumble3: db $03 db $47,$8E,$E2 db $00,$C3,$E0 db $50,$C6,$E4ufcrumble4: db $04 db $C3,$1D,$CD db $C4,$14,$CD db $00,$84,$E0 db $4F,$C6,$E0ufcrumble5: db $04 db $C3,$24,$CD db $87,$15,$CD db $84,$0D,$CD db $4F,$C2,$E0ufcrumble6: db $02 db $86,$1D,$CD db $4F,$86,$E0ufcrumble7: db $02 db $CC,$1B,$CD db $CA,$13,$CD