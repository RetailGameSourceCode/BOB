** main collision routine for bob*		align bob on even pixel boundary*			scooterfix:	lda	#12			;left side	ldy	#0	jsr	bgcoll	lda	chartype	cmp	#death	beq	@trydrain	jsr	xm	lda	chartype	cmp	#death	beq	@trydrain	jsr	xm	lda	chartype	cmp	#death	bne	@nodeath@trydrain:	lda	enoughdrain	bne	@nodeath	lda	#1	jsr	justdrainstrength	jsr	makebobflash2	inc	enoughdrain@nodeath:	rts	bobfix:	lda	#-16			;left side	ldy	#0	jsr	bgcoll	lda	chartype	cmp	#death	beq	@trydrain	jsr	xp	lda	chartype	cmp	#death	beq	@trydrain	jsr	xp	lda	chartype	cmp	#death	bne	@nodeath@trydrain:	lda	enoughdrain	bne	@nodeath	lda	#1	jsr	justdrainstrength	jsr	makebobflash2	inc	enoughdrain@nodeath:	rts	** bob's background collision routine...* backcollide:	lda	status	cmp	#leavegoth	bne	@check@nocheck:	rts@check:	lda	PICylo,x			;first get pixel boundary for head	sec		sbc	bobsizey	clc	adc bobymove	and	#7	sta	bobpixu		stz	bodypoints	** number of feet points to scan*	lda	bobsizex		;calculate number of points	lsr	a				;to check in between edges	lsr	a	dec	a	sta	temp+5				** and get size and offsets for feet and head*	lda	bobxmove		;how far to check for feet	bne	@moving	stz	bobml	stz	bobmr	lda	#4				;3 in on each side if not moving	ldy	#3	bra	@setit@moving:	bmi	@tryleft	stz	bobml	lda	#0				;if going right, set 0 on left	ldy	#4				;and 2 in on right	bra	@setit@tryleft:	stz	bobmr	lda	#4				;else if left, 3 in on left	ldy	#0				;and 0 on right@setit:	sta	temp+6	sty	temp+7** vertical collisions*		jsr	savebobxy			;save points...		lda	bobxmove			;and push to where he wants to go...	jsl	PICxadd	lda	bobymove	jsl	PICyadd		lda	boboffsety	jsl	PICyadd		jsr	checkycoll	jsr	restorebobxy** horizontal collisions*	@checkx:	jsr	savebobxy			;save points...		lda	bobxmove			;and push to where he wants to go...	jsl	PICxadd	lda	bobymove	jsl	PICyadd	lda	boboffsety			;mainly for crouch	jsl	PICyadd		jsr	checkxcoll	jsr	restorebobxy		rts** look at bottom of bob (feet)*checkycoll:;	lda	bobymove;	bmi	@lookhead		lda	bobsizex		;left side	eor	#255	clc	adc	temp+6	ldy	bobsizey	jsr	bgcoll	jsr	bobfindfeet	bcs	@standing	lda	bobsizex		;and right side	sec	sbc	temp+7	ldy	bobsizey	jsr	bgcoll	jsr	bobfindfeet	bcs	@standing	stz	bobmd			;standing on nothing...	bra	@lookhead** about to hit..do not allow bob to imbed himself*@standing:	lda	status	cmp	#drivescooter	bne	@walking	jsr	revscootyspeed	rts@walking:	lda	imbedy	sta	temp	cmp	#7	;5	beq	@ok1	bcc	@ok1	sec	sbc	#7	;5	sta	temp@ok1:	lda	bobymove	sec	sbc	temp	sta	bobymove		@righton:	lda	#1	sta	bobmd				;bob cannot go down...	** look at his head*@lookhead:	lda	bobymove	bmi	@yes	stz	bobmu@letjump:	rts@yes:	lda	bobsizey		;top o' his head	eor	#255	clc	adc	#1	sta	temp+4		lda	bobsizex		;left side	eor	#255	clc	adc	temp+6	ldy	temp+4	jsr	bgcoll	jsr	bobfindwall	bcs	@hithead		lda	bobsizex		;and right side	sec	sbc	temp+7	ldy	temp+4	jsr	bgcoll	jsr	bobfindwall	bcs	@hithead@nolook:	stz	bobmu	rts** about to hit..do not allow bob to imbed himself*@hithead: 	lda	status	cmp	#drivescooter	bne	@walking2	jsr	revscootyspeed	rts@walking2:	lda blockcountv	and	#7	sta	temp		lda	#7	sec	sbc	bobpixu	cmp	temp	beq	@righton2	bcs	@nof4	clc	adc	#8@nof4:	sec	sbc	temp;	inc	a	sta	temp		lda	bobymove	clc	adc	temp	sta	bobymove@righton2:	lda	#1	sta	bobmu				;bob cannot go up...	rts** look at his right side (4 points)*checkxcoll:	lda	bobsizey		;max points between edges	lsr	a	lsr	a	dec	a	sta	temp+6		lda	bobxmove		;if moving...check dir of move...	beq	@no@yes:	bpl	@lookright	jmp	@lookleft@no:	lda	cputime			;else alternate both sides...	and	#1				;on 2 cycle counts.....	bne	@lookright	jmp	@lookleft	@lookright:	lda	bobsizey		;top side, 1 pixel down	eor #255	clc		adc	#2+2-2	tay	lda	bobsizex		;right side	jsr	bgcoll	jsr	bobfindwall	bcc	@nohit	inc	bodypoints@nohit:	stz	temp+4				;scan in between points@loopyr:	jsr	yp	jsr	bobfindwall	bcc	@nohit2	inc	bodypoints@nohit2:	inc	temp+4	lda	temp+4			cmp	temp+6	bne	@loopyr	lda	bobsizey		;bottom side, 1 pixel up	dec	a	tay	lda	bobsizex		;right side	jsr	bgcoll	jsr	bobfindwall	bcc	@nohit3	inc	bodypoints	@nohit3:	lda	bodypoints	bne	@hitwall1	@skipfeet:	stz	bobmr	rts			@hitwall1:	lda	status	cmp	#drivescooter	bne	@walking3	jsr	revscootxspeed	rts@walking3:	lda	imbedx	sta	temp		lda	bobxmove	sec	sbc	temp		sta	bobxmove	@righton4:	lda	#1	sta	bobmr			;bob cannot go left...	rts	** look at left side*@lookleft:	lda	bobsizey		;top side, 1 pixel down	eor #255	clc		adc	#2+2-2	tay	lda	bobsizex		;left side	eor	#255	clc	adc	#1	jsr	bgcoll	jsr	bobfindwall	bcc	@nohit4	inc	bodypoints@nohit4:		stz	temp+4				;scan in between points@loopyl:	jsr	yp	jsr	bobfindwall	bcc	@nohit5	inc	bodypoints@nohit5:	inc	temp+4	lda	temp+4			cmp	temp+6	bne	@loopyl	lda	bobsizey		;bottom side, 1 pixel up	dec	a	tay	lda	bobsizex		;left side	eor	#255	clc	adc	#1	jsr	bgcoll 	jsr	bobfindwall	bcc	@nohit6	inc	bodypoints@nohit6:	lda	bodypoints	bne	@hitwall2	@skipfeet1:	stz	bobml	rts	@hitwall2:	lda	status	cmp	#drivescooter	bne	@walking4	jsr	revscootxspeed	rts@walking4:	lda	#7	sec	sbc	imbedx	sta temp		lda	bobxmove	clc	adc	temp	sta	bobxmove		@righton3:	lda	#1	sta	bobml			;bob cannot go left...	rts** save bob's x and y position*savebobxy:	lda	PICxlo,x	sta	tmp+4	lda	PICylo,x	sta	tmp+6	rts	restorebobxy:	lda	tmp+4	sta	PICxlo,x	lda	tmp+6	sta	PICylo,x	rts	** see if bobby can grab a ladder or hand rail*grabhandrail:	sta	temp	lda	bodyflag	bne	@noladder	jsr	lookoverhead	lda	chartype	cmp	#overhand	beq	@gotoverhead@noladder:	clc	rts	** caught over hand over hand*@gotoverhead:	lda	#7	sec	sbc	imbedy	sta	leftover	sta	tempdebug	lda	#handmove	sta	status	stz	climbframe	stz	jumpyspeed	stz	bobymove	stz	jumptype	stz	turncount	sec	rts	grabladder:	sta	temp	lda	bodyflag	bne	@noladder	jsr	lookoverhead	lda	chartype	cmp	#ladderleft	beq	@gotladder1	cmp	#ladderright	beq	@gotladder2@noladder:	clc	rts	** caught left ladder*@gotladder1:	sta	ladderhalf	lda	#7	sec	sbc	imbedx	bra	@save** caught right ladder*@gotladder2:	sta	ladderhalf	lda	imbedx@save:	sta	leftover	stz	climbcount	stz	climbframe	stz	jumptype	stz	turncount	lda	#climbing	sta	status	stz	gundir	jsr	fullstop	sec	rts@missed:	clc	rts** has he still got the ladder*stillonladder:		sta	temp	jsr	lookoverhead	lda	chartype	cmp	#ladderright	beq	@gotladder	cmp	#ladderleft	beq	@gotladder	clc	rts@gotladder	sec	rts	** spot to grab ladders/pipes*lookoverhead:	lda	bobsizey	clc	adc	temp	eor	#255	clc		adc	#1	tay	lda	#0	jsr	bgcoll	rts	** which feet to look at*;findfeet:;	lda	status;	cmp	#drivescooter;	bne	findfloor;	;	lda	chartype;	cmp	#floor;	beq	@scwall;	cmp	#solid;	bne	@noscwall;@scwall:;	sec;	rts;@noscwall:;	clc;	rts	** which feet to look at*bobfindwall:bobfindfeet:	lda	chartype	cmp	#death			;ouch....	bne	@nodeath	lda	mapnumber		;screen lifter fix....	cmp	#40	beq	@noscwall	lda	enoughdrain	bne	@nodrain	lda	#1	jsr	justdrainstrength	inc	enoughdrain	jsr	makebobflash2@nodrain:	lda	maptype			;bug fix....solid danger on bubble	cmp	#bubblelevel	beq	@scwall	cmp	#buglevel	beq	@scwall	clc		rts@nodeath:;	lda	chartype;	cmp	#victory		;process victory/death for bobby!;	bne	@nowin;	jsl	startvictory;	clc;	rts@nowin:	lda	chartype	cmp	#floor	beq	@scwall	cmp	#solid	bne	@noscwall@scwall:	sec	rts@noscwall:	clc	rts	** look for floor characters*findfloor:findwall:	lda	chartype	cmp	#solid	bne	@nofloor	sec	rts@nofloor:	clc	rts	** look for wall*;bobfindwall:;	lda	chartype;	cmp	#death			;ouch....;	bne	@nodeath;	lda	enoughdrain;	bne	@nodrain;	lda	#1;	jsr	justdrainstrength;	jsr	makebobflash2;	inc	enoughdrain;@nodrain:;	lda	maptype			;bug fix....solid danger on bubble;	cmp	#bubblelevel;	beq	@yeswall;	clc;	rts;@nodeath:;	lda	chartype;	cmp	#victory		;process victory/death for bobby!;	bne	@nowin;	jsl	startvictory;	clc;	rts;@nowin:;	cmp	#floor;	beq	@yeswall;	cmp	#solid;	bne	@nowall;@yeswall:;	sec;	rts;@nowall:;	clc;	rts** look for wall*;findwall:;	lda	chartype;	cmp	#soliddoor;	bne	@floor;	lda	doorcounter;	cmp	#8;	beq	@nowall;	bra	@yeswall;@floor:;	cmp	#floor;	beq	@yeswall;	cmp	#solid;	bne	@nowall;@yeswall:;	sec;	rts;@nowall:;	clc;	rts** come to a full stop*fullstop:	lda	#MAXDECEL	sta	decelcount	stz	decelflag	stz	accelcount	stz	accelflag	rts	fullstopl:	lda	#MAXDECEL	sta	decelcount	stz	decelflag	stz	accelcount	stz	accelflag	rtl** floor stop routine while on elevators*floorstop:	ldx	whichelevator		;get centre of elevator	lda	PICstatus,x			;up or down	cmp	#rising	bne	@dropping	lda	#4	bra	@setx@dropping:	lda	#8@setx:		sta	eledir			lda world	beq	@world1	cmp	#1	beq	@world1@world3:	lda	#32+4	ldy	eledir	jsr	bgcoll	jsr	charactertype	lda	chartype	cmp	#elevatorstop	beq	@imbedded			lda	#-32-4	ldy	eledir	jsr	bgcoll	jsr	charactertype	lda	chartype	cmp	#elevatorstop	beq	@imbedded	ldx	TSKcurrent	clc	rts			@world1:	lda	#32+4	ldy	eledir	jsr	bgcoll	lda	whichchar	cmp	#134	beq	@imbedded		lda	#-32-4	ldy	eledir	jsr	bgcoll	lda	whichchar	cmp	#134	beq	@imbedded	@no:	ldx	TSKcurrent	clc	rts@imbedded:	ldx	TSKcurrent	sec	rts	** is this a valid sleep area*sleepingarea:	lda	#0	ldy	#0	jsr	bgcoll	lda	chartype	cmp	#sleepleft	beq	@yes1	cmp	#sleepright	beq	@yes2	clc	rts@yes1:	sta	ladderhalf	lda	#7	sec	sbc	imbedx	bra	@save@yes2:	sta	ladderhalf	lda	imbedx@save:	sta	leftover	sec	rts		** start the victory sequence*startvictory: 	lda	status	cmp	#drivescooter	bne	@trytele	lda	scooterwin	bne	@done	lda	#4	jsl	addscore	lda	#maxstrength	sta	strength	inc scooterwin;	lda	winflag;	bne	@done;	inc	winflag	;	jsr	dofadeout	rtl	@trytele:	lda	status	cmp	#teleported	beq	@done	cmp	#carried	beq	@wait	cmp	#falling	beq	@wait	cmp	#jumping	bne	@regular@wait:	lda	#1	sta	waitforwin	clc	rtl	@regular		cmp	#walking	beq	@go	cmp	#windblown	beq	@go	cmp	#stopping	beq	@go	cmp	#crouching	bne	@done@go:	jsr	setupwin@done:	rtl	charactersets:	dc.w	borgkars	dc.w	bugkars	dc.w	lavakars	dc.w	borgkars	dc.w	anckars	dc.w	borgkars	dc.w	lavakars	dc.w	ultrakars	dc.w	ultrakars	dc.w	bubblekars	dc.w	borgkars2	dc.w	borgkars3		dc.w	doorkars	charactertype_long	jsr	charactertype	rtlcharactertype:	phb	lda	#7			;character tables in walls.asm - page 7	pha	plb		SET16	ldy	#0@searchloop:	lda	(charlookup),y	cmp	whichchar	;edtemp	bcs	@found@carryon:	iny	iny	iny	bra	@searchloop@found:	SET8	iny	iny	lda	(charlookup),y	sta	chartype	plb	rts	** reverse scootx/yspeed*revscootyspeed:	lda	scootyspeed	bpl	@plus	eor	#255	inc a@plus:	cmp	#2	bcc	@nosound	lda	#SFXCRASH1	jsl	soundeffects@nosound:	lda	scootyspeed	bmi	@notyet	lsr	a	eor	#255	inc	a	bra	@notyet2@notyet:	eor	#255	inc	a		lsr	a@notyet2:	sta	scootyspeed	sta	bobymove	rtsrevscootxspeed:	lda	scootxspeed	bpl	@plus	eor	#255	inc a@plus:	cmp	#2	bcc	@nosound	cmp	#4	bcc	@little	lda	#SFXEXPLODE1	bra	@setitoff@little:	lda	#SFXCRASH1@setitoff:	jsl	soundeffects@nosound:	lda	scootxspeed	bmi	@notyet	lsr	a	eor	#255	inc	a	bra	@notyet2@notyet:	eor	#255	inc	a		lsr	a@notyet2:	sta	scootxspeed	sta	bobxmove	rts		** is bob on solid ground?*	bobonsolid:	lda	#-12			;left side	ldy	#24	jsr	bgcoll	lda	chartype	cmp	#solid	bne	@nomelt	lda	#12	ldy	#24	jsr	bgcoll	lda	chartype	cmp	#solid	bne	@nomelt	sec	rts@nomelt:	clc	rts